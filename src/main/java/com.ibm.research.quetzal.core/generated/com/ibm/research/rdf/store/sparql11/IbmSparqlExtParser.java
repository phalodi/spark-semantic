// $ANTLR 3.4 /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g 2016-09-01 11:19:44
 
package com.ibm.research.rdf.store.sparql11;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class IbmSparqlExtParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ABS", "ADD", "ALL", "ALT", "ANNON", "ARROW", "AS", "ASC", "ASK", "AVG", "B", "BASE", "BIG_DECIMAL", "BIG_INTEGER", "BIND", "BINDINGS", "BIND_VALUES", "BLANK_NODE_LABEL", "BNODE", "BOOLEAN", "BOUND", "BROKEN_MINUS", "BROKEN_PLUS", "BY", "C", "CEIL", "CLEAR", "CLOSE_BRACE", "CLOSE_CURLY_BRACE", "CLOSE_SQ_BRACKET", "COALESCE", "COLLECTION", "COMMA", "COMMENT", "CONCAT", "CONDITION", "CONSTRUCT", "CONTAINS", "COPY", "COUNT", "CREATE", "D", "DATA", "DATASET", "DATATYPE", "DAY", "DECIMAL", "DECIMAL_NEGATIVE", "DECIMAL_POSITIVE", "DEFAULT", "DEFAULT_NAMESPACE", "DELETE", "DESC", "DESCRIBE", "DIGIT", "DISTINCT", "DOT", "DOUBLE", "DOUBLE_NEGATIVE", "DOUBLE_POSITIVE", "DROP", "E", "ECHAR", "ELT", "ENCODE_FOR_URI", "EOL", "EOP", "EXISTS", "EXP", "EXPONENT", "EXPRESSION", "F", "FALSE", "FILTER", "FLOOR", "FROM", "FUNCBODY", "FUNCCALL", "FUNCLANG", "FUNCLG", "FUNCNAME", "FUNCTION", "G", "GET", "GRAPH", "GRAPH_GRAPH_PATTERN", "GRAPH_NODE", "GROUP", "GROUP_BY", "GROUP_CONCAT", "GROUP_GRAPH_PATTERN", "GROUP_GRAPH_PATTERN_SUB", "H", "HAVING", "HEXDIGIT", "HOURS", "I", "IF", "IN", "INLINE_DATA", "INSERT", "INTEGER", "INTEGER_NEGATIVE", "INTEGER_POSITIVE", "INTO", "INV", "IRI", "IRI_OR_FUNCTION", "IRI_REF", "ISBLANK", "ISIRI", "ISLITERAL", "ISNUMERIC", "ISURI", "J", "K", "KEY", "KIND", "L", "LANG", "LANGMATCHES", "LANGTAG", "LCASE", "LIMIT", "LOAD", "LOGICAL_AND", "LOGICAL_OR", "LT", "LTE", "M", "MAX", "MD5", "MIN", "MINUS", "MINUTES", "MODIFIERS", "MONTH", "MOVE", "N", "NAMED", "NAMESPACE_PREFIX_MAP", "NIL", "NON_TRIPLES", "NOT", "NOT_EXISTS", "NOT_IN", "NOW", "NUMERIC", "O", "OFFSET", "OPEN_BRACE", "OPEN_CURLY_BRACE", "OPEN_SQ_BRACKET", "OPTIONAL", "ORDER", "ORDER_BY", "OUTV", "P", "PARAM", "PARAMS", "PATH", "PERCENT", "PLX", "PNAME_LN", "PNAME_NS", "PN_CHARS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_LOCAL", "PN_LOCAL_ESC", "PN_PREFIX", "POST", "PREDICATE", "PREDICATE_VALUE", "PREFIX", "PREFIXED_NAME", "PREFIXED_NS", "PROLOGUE", "PROPERTY_LIST", "PVARS", "Q", "QUERY", "R", "RAND", "REDUCED", "REGEX", "REPLACE", "ROOT", "ROUND", "S", "SAMETERM", "SAMPLE", "SECONDS", "SELECT", "SEMICOLON", "SEPARATOR", "SEQ", "SERVICE", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "SILENT", "SOP", "STR", "STRAFTER", "STRBEFORE", "STRDT", "STRENDS", "STRING", "STRING_LINE_NONEOP", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "STRLANG", "STRLEN", "STRSTARTS", "STRUUID", "SUBJECT", "SUBSTR", "SUB_SELECT", "SUM", "T", "TABLE", "TIMEZONE", "TO", "TRIPLE", "TRIPLE2", "TRIPLES_BLOCK", "TRIPLES_NODE", "TRIPLES_NODE_PROPERTY_LIST", "TRIPLES_SAME_SUBJECT", "TRUE", "TYPE", "TZ", "U", "UCASE", "UNDEF", "UNICODE_ESCAPE", "UNION", "UPDATE", "URI", "USING", "UUID", "V", "VALUE", "VALUES", "VAR", "VAR0", "VAR1", "VAR2", "VARNAME", "W", "WHERE", "WHERE_TOKEN", "WITH", "WS", "X", "Y", "YEAR", "Z", "'!'", "'!='", "'*'", "'+'", "'-'", "'/'", "'::'", "'='", "'>'", "'>='", "'?'", "'^'", "'^^'", "'a'", "'|'"
    };

    public static final int EOF=-1;
    public static final int T__268=268;
    public static final int T__269=269;
    public static final int T__270=270;
    public static final int T__271=271;
    public static final int T__272=272;
    public static final int T__273=273;
    public static final int T__274=274;
    public static final int T__275=275;
    public static final int T__276=276;
    public static final int T__277=277;
    public static final int T__278=278;
    public static final int T__279=279;
    public static final int T__280=280;
    public static final int T__281=281;
    public static final int T__282=282;
    public static final int A=4;
    public static final int ABS=5;
    public static final int ADD=6;
    public static final int ALL=7;
    public static final int ALT=8;
    public static final int ANNON=9;
    public static final int ARROW=10;
    public static final int AS=11;
    public static final int ASC=12;
    public static final int ASK=13;
    public static final int AVG=14;
    public static final int B=15;
    public static final int BASE=16;
    public static final int BIG_DECIMAL=17;
    public static final int BIG_INTEGER=18;
    public static final int BIND=19;
    public static final int BINDINGS=20;
    public static final int BIND_VALUES=21;
    public static final int BLANK_NODE_LABEL=22;
    public static final int BNODE=23;
    public static final int BOOLEAN=24;
    public static final int BOUND=25;
    public static final int BROKEN_MINUS=26;
    public static final int BROKEN_PLUS=27;
    public static final int BY=28;
    public static final int C=29;
    public static final int CEIL=30;
    public static final int CLEAR=31;
    public static final int CLOSE_BRACE=32;
    public static final int CLOSE_CURLY_BRACE=33;
    public static final int CLOSE_SQ_BRACKET=34;
    public static final int COALESCE=35;
    public static final int COLLECTION=36;
    public static final int COMMA=37;
    public static final int COMMENT=38;
    public static final int CONCAT=39;
    public static final int CONDITION=40;
    public static final int CONSTRUCT=41;
    public static final int CONTAINS=42;
    public static final int COPY=43;
    public static final int COUNT=44;
    public static final int CREATE=45;
    public static final int D=46;
    public static final int DATA=47;
    public static final int DATASET=48;
    public static final int DATATYPE=49;
    public static final int DAY=50;
    public static final int DECIMAL=51;
    public static final int DECIMAL_NEGATIVE=52;
    public static final int DECIMAL_POSITIVE=53;
    public static final int DEFAULT=54;
    public static final int DEFAULT_NAMESPACE=55;
    public static final int DELETE=56;
    public static final int DESC=57;
    public static final int DESCRIBE=58;
    public static final int DIGIT=59;
    public static final int DISTINCT=60;
    public static final int DOT=61;
    public static final int DOUBLE=62;
    public static final int DOUBLE_NEGATIVE=63;
    public static final int DOUBLE_POSITIVE=64;
    public static final int DROP=65;
    public static final int E=66;
    public static final int ECHAR=67;
    public static final int ELT=68;
    public static final int ENCODE_FOR_URI=69;
    public static final int EOL=70;
    public static final int EOP=71;
    public static final int EXISTS=72;
    public static final int EXP=73;
    public static final int EXPONENT=74;
    public static final int EXPRESSION=75;
    public static final int F=76;
    public static final int FALSE=77;
    public static final int FILTER=78;
    public static final int FLOOR=79;
    public static final int FROM=80;
    public static final int FUNCBODY=81;
    public static final int FUNCCALL=82;
    public static final int FUNCLANG=83;
    public static final int FUNCLG=84;
    public static final int FUNCNAME=85;
    public static final int FUNCTION=86;
    public static final int G=87;
    public static final int GET=88;
    public static final int GRAPH=89;
    public static final int GRAPH_GRAPH_PATTERN=90;
    public static final int GRAPH_NODE=91;
    public static final int GROUP=92;
    public static final int GROUP_BY=93;
    public static final int GROUP_CONCAT=94;
    public static final int GROUP_GRAPH_PATTERN=95;
    public static final int GROUP_GRAPH_PATTERN_SUB=96;
    public static final int H=97;
    public static final int HAVING=98;
    public static final int HEXDIGIT=99;
    public static final int HOURS=100;
    public static final int I=101;
    public static final int IF=102;
    public static final int IN=103;
    public static final int INLINE_DATA=104;
    public static final int INSERT=105;
    public static final int INTEGER=106;
    public static final int INTEGER_NEGATIVE=107;
    public static final int INTEGER_POSITIVE=108;
    public static final int INTO=109;
    public static final int INV=110;
    public static final int IRI=111;
    public static final int IRI_OR_FUNCTION=112;
    public static final int IRI_REF=113;
    public static final int ISBLANK=114;
    public static final int ISIRI=115;
    public static final int ISLITERAL=116;
    public static final int ISNUMERIC=117;
    public static final int ISURI=118;
    public static final int J=119;
    public static final int K=120;
    public static final int KEY=121;
    public static final int KIND=122;
    public static final int L=123;
    public static final int LANG=124;
    public static final int LANGMATCHES=125;
    public static final int LANGTAG=126;
    public static final int LCASE=127;
    public static final int LIMIT=128;
    public static final int LOAD=129;
    public static final int LOGICAL_AND=130;
    public static final int LOGICAL_OR=131;
    public static final int LT=132;
    public static final int LTE=133;
    public static final int M=134;
    public static final int MAX=135;
    public static final int MD5=136;
    public static final int MIN=137;
    public static final int MINUS=138;
    public static final int MINUTES=139;
    public static final int MODIFIERS=140;
    public static final int MONTH=141;
    public static final int MOVE=142;
    public static final int N=143;
    public static final int NAMED=144;
    public static final int NAMESPACE_PREFIX_MAP=145;
    public static final int NIL=146;
    public static final int NON_TRIPLES=147;
    public static final int NOT=148;
    public static final int NOT_EXISTS=149;
    public static final int NOT_IN=150;
    public static final int NOW=151;
    public static final int NUMERIC=152;
    public static final int O=153;
    public static final int OFFSET=154;
    public static final int OPEN_BRACE=155;
    public static final int OPEN_CURLY_BRACE=156;
    public static final int OPEN_SQ_BRACKET=157;
    public static final int OPTIONAL=158;
    public static final int ORDER=159;
    public static final int ORDER_BY=160;
    public static final int OUTV=161;
    public static final int P=162;
    public static final int PARAM=163;
    public static final int PARAMS=164;
    public static final int PATH=165;
    public static final int PERCENT=166;
    public static final int PLX=167;
    public static final int PNAME_LN=168;
    public static final int PNAME_NS=169;
    public static final int PN_CHARS=170;
    public static final int PN_CHARS_BASE=171;
    public static final int PN_CHARS_U=172;
    public static final int PN_LOCAL=173;
    public static final int PN_LOCAL_ESC=174;
    public static final int PN_PREFIX=175;
    public static final int POST=176;
    public static final int PREDICATE=177;
    public static final int PREDICATE_VALUE=178;
    public static final int PREFIX=179;
    public static final int PREFIXED_NAME=180;
    public static final int PREFIXED_NS=181;
    public static final int PROLOGUE=182;
    public static final int PROPERTY_LIST=183;
    public static final int PVARS=184;
    public static final int Q=185;
    public static final int QUERY=186;
    public static final int R=187;
    public static final int RAND=188;
    public static final int REDUCED=189;
    public static final int REGEX=190;
    public static final int REPLACE=191;
    public static final int ROOT=192;
    public static final int ROUND=193;
    public static final int S=194;
    public static final int SAMETERM=195;
    public static final int SAMPLE=196;
    public static final int SECONDS=197;
    public static final int SELECT=198;
    public static final int SEMICOLON=199;
    public static final int SEPARATOR=200;
    public static final int SEQ=201;
    public static final int SERVICE=202;
    public static final int SHA1=203;
    public static final int SHA224=204;
    public static final int SHA256=205;
    public static final int SHA384=206;
    public static final int SHA512=207;
    public static final int SILENT=208;
    public static final int SOP=209;
    public static final int STR=210;
    public static final int STRAFTER=211;
    public static final int STRBEFORE=212;
    public static final int STRDT=213;
    public static final int STRENDS=214;
    public static final int STRING=215;
    public static final int STRING_LINE_NONEOP=216;
    public static final int STRING_LITERAL1=217;
    public static final int STRING_LITERAL2=218;
    public static final int STRING_LITERAL_LONG1=219;
    public static final int STRING_LITERAL_LONG2=220;
    public static final int STRLANG=221;
    public static final int STRLEN=222;
    public static final int STRSTARTS=223;
    public static final int STRUUID=224;
    public static final int SUBJECT=225;
    public static final int SUBSTR=226;
    public static final int SUB_SELECT=227;
    public static final int SUM=228;
    public static final int T=229;
    public static final int TABLE=230;
    public static final int TIMEZONE=231;
    public static final int TO=232;
    public static final int TRIPLE=233;
    public static final int TRIPLE2=234;
    public static final int TRIPLES_BLOCK=235;
    public static final int TRIPLES_NODE=236;
    public static final int TRIPLES_NODE_PROPERTY_LIST=237;
    public static final int TRIPLES_SAME_SUBJECT=238;
    public static final int TRUE=239;
    public static final int TYPE=240;
    public static final int TZ=241;
    public static final int U=242;
    public static final int UCASE=243;
    public static final int UNDEF=244;
    public static final int UNICODE_ESCAPE=245;
    public static final int UNION=246;
    public static final int UPDATE=247;
    public static final int URI=248;
    public static final int USING=249;
    public static final int UUID=250;
    public static final int V=251;
    public static final int VALUE=252;
    public static final int VALUES=253;
    public static final int VAR=254;
    public static final int VAR0=255;
    public static final int VAR1=256;
    public static final int VAR2=257;
    public static final int VARNAME=258;
    public static final int W=259;
    public static final int WHERE=260;
    public static final int WHERE_TOKEN=261;
    public static final int WITH=262;
    public static final int WS=263;
    public static final int X=264;
    public static final int Y=265;
    public static final int YEAR=266;
    public static final int Z=267;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public IbmSparqlExtParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public IbmSparqlExtParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return IbmSparqlExtParser.tokenNames; }
    public String getGrammarFileName() { return "/home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g"; }


    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}
    	
    	public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    		throws RecognitionException	
    	{
    		throw e;
    	}
    	
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
        	throws RecognitionException
    	{   
        	throw new MismatchedTokenException(ttype, input);
    	}  


    public static class queryUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryUnit"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:128:1: queryUnit : query -> ^( ROOT query ) ;
    public final IbmSparqlExtParser.queryUnit_return queryUnit() throws RecognitionException {
        IbmSparqlExtParser.queryUnit_return retval = new IbmSparqlExtParser.queryUnit_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.query_return query1 =null;


        RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:129:2: ( query -> ^( ROOT query ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:129:4: query
            {
            pushFollow(FOLLOW_query_in_queryUnit442);
            query1=query();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query.add(query1.getTree());

            // AST REWRITE
            // elements: query
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 131:3: -> ^( ROOT query )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:131:7: ^( ROOT query )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ROOT, "ROOT")
                , root_1);

                adaptor.addChild(root_1, stream_query.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryUnit"


    public static class query_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:135:1: query : p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) ;
    public final IbmSparqlExtParser.query_return query() throws RecognitionException {
        IbmSparqlExtParser.query_return retval = new IbmSparqlExtParser.query_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.prologue_return p =null;

        IbmSparqlExtParser.selectQuery_return s =null;

        IbmSparqlExtParser.constructQuery_return c =null;

        IbmSparqlExtParser.describeQuery_return d =null;

        IbmSparqlExtParser.askQuery_return a =null;

        IbmSparqlExtParser.bindingsClause_return b =null;


        RewriteRuleSubtreeStream stream_constructQuery=new RewriteRuleSubtreeStream(adaptor,"rule constructQuery");
        RewriteRuleSubtreeStream stream_describeQuery=new RewriteRuleSubtreeStream(adaptor,"rule describeQuery");
        RewriteRuleSubtreeStream stream_bindingsClause=new RewriteRuleSubtreeStream(adaptor,"rule bindingsClause");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_selectQuery=new RewriteRuleSubtreeStream(adaptor,"rule selectQuery");
        RewriteRuleSubtreeStream stream_askQuery=new RewriteRuleSubtreeStream(adaptor,"rule askQuery");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:136:2: (p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:136:4: p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )?
            {
            pushFollow(FOLLOW_prologue_in_query478);
            p=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prologue.add(p.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:137:3: (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery )
            int alt1=4;
            switch ( input.LA(1) ) {
            case FUNCTION:
            case SELECT:
                {
                alt1=1;
                }
                break;
            case CONSTRUCT:
                {
                alt1=2;
                }
                break;
            case DESCRIBE:
                {
                alt1=3;
                }
                break;
            case ASK:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }

            switch (alt1) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:137:5: s= selectQuery
                    {
                    pushFollow(FOLLOW_selectQuery_in_query486);
                    s=selectQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectQuery.add(s.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:137:21: c= constructQuery
                    {
                    pushFollow(FOLLOW_constructQuery_in_query492);
                    c=constructQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructQuery.add(c.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:137:40: d= describeQuery
                    {
                    pushFollow(FOLLOW_describeQuery_in_query498);
                    d=describeQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_describeQuery.add(d.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:137:58: a= askQuery
                    {
                    pushFollow(FOLLOW_askQuery_in_query504);
                    a=askQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_askQuery.add(a.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:138:4: (b= bindingsClause )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==BINDINGS||LA2_0==VALUES) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:138:4: b= bindingsClause
                    {
                    pushFollow(FOLLOW_bindingsClause_in_query512);
                    b=bindingsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bindingsClause.add(b.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: p, d, a, s, c, b
            // token labels: 
            // rule labels: p, a, b, s, c, d, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 140:3: -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:7: ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(QUERY, "QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:20: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextTree());

                }
                stream_s.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:24: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:28: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:32: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:140:36: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class updateUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updateUnit"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:143:1: updateUnit : update -> ^( UPDATE update ) ;
    public final IbmSparqlExtParser.updateUnit_return updateUnit() throws RecognitionException {
        IbmSparqlExtParser.updateUnit_return retval = new IbmSparqlExtParser.updateUnit_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.update_return update2 =null;


        RewriteRuleSubtreeStream stream_update=new RewriteRuleSubtreeStream(adaptor,"rule update");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:144:2: ( update -> ^( UPDATE update ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:144:6: update
            {
            pushFollow(FOLLOW_update_in_updateUnit571);
            update2=update();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update.add(update2.getTree());

            // AST REWRITE
            // elements: update
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 146:3: -> ^( UPDATE update )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:146:7: ^( UPDATE update )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(UPDATE, "UPDATE")
                , root_1);

                adaptor.addChild(root_1, stream_update.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updateUnit"


    public static class prologue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prologue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:149:1: prologue : (b+= baseDecl |p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) ;
    public final IbmSparqlExtParser.prologue_return prologue() throws RecognitionException {
        IbmSparqlExtParser.prologue_return retval = new IbmSparqlExtParser.prologue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_b=null;
        List list_p=null;
        RuleReturnScope b = null;
        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_baseDecl=new RewriteRuleSubtreeStream(adaptor,"rule baseDecl");
        RewriteRuleSubtreeStream stream_prefixDecl=new RewriteRuleSubtreeStream(adaptor,"rule prefixDecl");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:150:2: ( (b+= baseDecl |p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:150:6: (b+= baseDecl |p+= prefixDecl )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:150:6: (b+= baseDecl |p+= prefixDecl )*
            loop3:
            do {
                int alt3=3;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==BASE) ) {
                    alt3=1;
                }
                else if ( (LA3_0==PREFIX) ) {
                    alt3=2;
                }


                switch (alt3) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:150:8: b+= baseDecl
            	    {
            	    pushFollow(FOLLOW_baseDecl_in_prologue609);
            	    b=baseDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_baseDecl.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:150:22: p+= prefixDecl
            	    {
            	    pushFollow(FOLLOW_prefixDecl_in_prologue615);
            	    p=prefixDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prefixDecl.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            // AST REWRITE
            // elements: p, b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p, b
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 152:3: -> ^( PROLOGUE ( $b)* ( $p)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:152:7: ^( PROLOGUE ( $b)* ( $p)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROLOGUE, "PROLOGUE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:152:20: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:152:25: ( $p)*
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prologue"


    public static class baseDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "baseDecl"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:155:1: baseDecl : BASE i= iRIref -> ^( BASE $i) ;
    public final IbmSparqlExtParser.baseDecl_return baseDecl() throws RecognitionException {
        IbmSparqlExtParser.baseDecl_return retval = new IbmSparqlExtParser.baseDecl_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BASE3=null;
        IbmSparqlExtParser.iRIref_return i =null;


        XTree BASE3_tree=null;
        RewriteRuleTokenStream stream_BASE=new RewriteRuleTokenStream(adaptor,"token BASE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:156:2: ( BASE i= iRIref -> ^( BASE $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:156:6: BASE i= iRIref
            {
            BASE3=(Token)match(input,BASE,FOLLOW_BASE_in_baseDecl657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE.add(BASE3);


            pushFollow(FOLLOW_iRIref_in_baseDecl661);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // AST REWRITE
            // elements: BASE, i
            // token labels: 
            // rule labels: i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 158:3: -> ^( BASE $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:158:7: ^( BASE $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_BASE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "baseDecl"


    public static class prefixDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefixDecl"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:161:1: prefixDecl : PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) ;
    public final IbmSparqlExtParser.prefixDecl_return prefixDecl() throws RecognitionException {
        IbmSparqlExtParser.prefixDecl_return retval = new IbmSparqlExtParser.prefixDecl_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token p=null;
        Token PREFIX4=null;
        IbmSparqlExtParser.iRIref_return i =null;


        XTree p_tree=null;
        XTree PREFIX4_tree=null;
        RewriteRuleTokenStream stream_PREFIX=new RewriteRuleTokenStream(adaptor,"token PREFIX");
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:162:2: ( PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:162:6: PREFIX p= PNAME_NS i= iRIref
            {
            PREFIX4=(Token)match(input,PREFIX,FOLLOW_PREFIX_in_prefixDecl694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PREFIX.add(PREFIX4);


            p=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixDecl698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PNAME_NS.add(p);


            pushFollow(FOLLOW_iRIref_in_prefixDecl702);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // AST REWRITE
            // elements: p, PREFIX, i
            // token labels: p
            // rule labels: i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 164:3: -> ^( PREFIX ^( PREFIXED_NS $p) $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:164:7: ^( PREFIX ^( PREFIXED_NS $p) $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_PREFIX.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:164:17: ^( PREFIXED_NS $p)
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS")
                , root_2);

                adaptor.addChild(root_2, stream_p.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefixDecl"


    public static class selectQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:168:1: selectQuery : (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ( ^( FUNCTION ( $f)* ) )? ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) ;
    public final IbmSparqlExtParser.selectQuery_return selectQuery() throws RecognitionException {
        IbmSparqlExtParser.selectQuery_return retval = new IbmSparqlExtParser.selectQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_f=null;
        List list_d=null;
        IbmSparqlExtParser.selectClause_return s =null;

        IbmSparqlExtParser.whereClause_return w =null;

        IbmSparqlExtParser.solutionModifier_return m =null;

        RuleReturnScope f = null;
        RuleReturnScope d = null;
        RewriteRuleSubtreeStream stream_functionDecl=new RewriteRuleSubtreeStream(adaptor,"rule functionDecl");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:2: ( (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ( ^( FUNCTION ( $f)* ) )? ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:6: (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:7: (f+= functionDecl )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==FUNCTION) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:7: f+= functionDecl
            	    {
            	    pushFollow(FOLLOW_functionDecl_in_selectQuery751);
            	    f=functionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_functionDecl.add(f.getTree());
            	    if (list_f==null) list_f=new ArrayList();
            	    list_f.add(f.getTree());


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            pushFollow(FOLLOW_selectClause_in_selectQuery756);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:39: (d+= datasetClause )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==FROM) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:169:39: d+= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_selectQuery760);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            pushFollow(FOLLOW_whereClause_in_selectQuery765);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            pushFollow(FOLLOW_solutionModifier_in_selectQuery769);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());

            // AST REWRITE
            // elements: f, w, d, s, m
            // token labels: 
            // rule labels: s, w, m, retval
            // token list labels: 
            // rule list labels: d, f
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"token d",list_d);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            root_0 = (XTree)adaptor.nil();
            // 170:3: -> ( ^( FUNCTION ( $f)* ) )? ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:7: ( ^( FUNCTION ( $f)* ) )?
                if ( stream_f.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:7: ^( FUNCTION ( $f)* )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(FUNCTION, "FUNCTION")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:19: ( $f)*
                    while ( stream_f.hasNext() ) {
                        adaptor.addChild(root_1, stream_f.nextTree());

                    }
                    stream_f.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_f.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:24: ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(SELECT, "SELECT")
                , root_1);

                adaptor.addChild(root_1, stream_s.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:36: ( ^( DATASET ( $d)* ) )?
                if ( stream_d.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:36: ^( DATASET ( $d)* )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(DATASET, "DATASET")
                    , root_2);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:47: ( $d)*
                    while ( stream_d.hasNext() ) {
                        adaptor.addChild(root_2, stream_d.nextTree());

                    }
                    stream_d.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:53: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:170:57: ( $m)?
                if ( stream_m.hasNext() ) {
                    adaptor.addChild(root_1, stream_m.nextTree());

                }
                stream_m.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectQuery"


    public static class functionParam_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionParam"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:173:1: functionParam : param= string ARROW (valueE= expression |valueP= groupGraphPattern | POST DATA ) -> ^( PARAM $param ( $valueE)? ( $valueP)? ) ;
    public final IbmSparqlExtParser.functionParam_return functionParam() throws RecognitionException {
        IbmSparqlExtParser.functionParam_return retval = new IbmSparqlExtParser.functionParam_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ARROW5=null;
        Token POST6=null;
        Token DATA7=null;
        IbmSparqlExtParser.string_return param =null;

        IbmSparqlExtParser.expression_return valueE =null;

        IbmSparqlExtParser.groupGraphPattern_return valueP =null;


        XTree ARROW5_tree=null;
        XTree POST6_tree=null;
        XTree DATA7_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleTokenStream stream_POST=new RewriteRuleTokenStream(adaptor,"token POST");
        RewriteRuleTokenStream stream_DATA=new RewriteRuleTokenStream(adaptor,"token DATA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:5: (param= string ARROW (valueE= expression |valueP= groupGraphPattern | POST DATA ) -> ^( PARAM $param ( $valueE)? ( $valueP)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:8: param= string ARROW (valueE= expression |valueP= groupGraphPattern | POST DATA )
            {
            pushFollow(FOLLOW_string_in_functionParam826);
            param=string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_string.add(param.getTree());

            ARROW5=(Token)match(input,ARROW,FOLLOW_ARROW_in_functionParam828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ARROW.add(ARROW5);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:27: (valueE= expression |valueP= groupGraphPattern | POST DATA )
            int alt6=3;
            switch ( input.LA(1) ) {
            case ABS:
            case AVG:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case COUNT:
            case DATATYPE:
            case DAY:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FALSE:
            case FLOOR:
            case GROUP_CONCAT:
            case HOURS:
            case IF:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI:
            case IRI_REF:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MAX:
            case MD5:
            case MIN:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case OPEN_BRACE:
            case PNAME_LN:
            case PNAME_NS:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SAMPLE:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case SUM:
            case TIMEZONE:
            case TRUE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case VAR1:
            case VAR2:
            case YEAR:
            case 268:
            case 271:
            case 272:
                {
                alt6=1;
                }
                break;
            case OPEN_CURLY_BRACE:
                {
                alt6=2;
                }
                break;
            case POST:
                {
                alt6=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:29: valueE= expression
                    {
                    pushFollow(FOLLOW_expression_in_functionParam834);
                    valueE=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(valueE.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:49: valueP= groupGraphPattern
                    {
                    pushFollow(FOLLOW_groupGraphPattern_in_functionParam840);
                    valueP=groupGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPattern.add(valueP.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:174:76: POST DATA
                    {
                    POST6=(Token)match(input,POST,FOLLOW_POST_in_functionParam844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POST.add(POST6);


                    DATA7=(Token)match(input,DATA,FOLLOW_DATA_in_functionParam846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATA.add(DATA7);


                    }
                    break;

            }


            // AST REWRITE
            // elements: valueE, param, valueP
            // token labels: 
            // rule labels: valueE, param, valueP, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_valueE=new RewriteRuleSubtreeStream(adaptor,"rule valueE",valueE!=null?valueE.tree:null);
            RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param",param!=null?param.tree:null);
            RewriteRuleSubtreeStream stream_valueP=new RewriteRuleSubtreeStream(adaptor,"rule valueP",valueP!=null?valueP.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 175:8: -> ^( PARAM $param ( $valueE)? ( $valueP)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:175:11: ^( PARAM $param ( $valueE)? ( $valueP)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_param.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:175:27: ( $valueE)?
                if ( stream_valueE.hasNext() ) {
                    adaptor.addChild(root_1, stream_valueE.nextTree());

                }
                stream_valueE.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:175:36: ( $valueP)?
                if ( stream_valueP.hasNext() ) {
                    adaptor.addChild(root_1, stream_valueP.nextTree());

                }
                stream_valueP.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionParam"


    public static class functionDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionDecl"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:179:1: functionDecl : FUNCTION fn= iRIref (kind= ( POST ( ALL )? | GET ) )? OPEN_BRACE (inv+= var )* ARROW (outv+= var )* CLOSE_BRACE ( ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) ) | ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) ) ) ;
    public final IbmSparqlExtParser.functionDecl_return functionDecl() throws RecognitionException {
        IbmSparqlExtParser.functionDecl_return retval = new IbmSparqlExtParser.functionDecl_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token kind=null;
        Token fl=null;
        Token x=null;
        Token FUNCTION8=null;
        Token POST9=null;
        Token ALL10=null;
        Token GET11=null;
        Token OPEN_BRACE12=null;
        Token ARROW13=null;
        Token CLOSE_BRACE14=null;
        Token FUNCLANG15=null;
        Token OPEN_SQ_BRACKET16=null;
        Token CLOSE_SQ_BRACKET17=null;
        Token ARROW18=null;
        Token string_literal19=null;
        List list_inv=null;
        List list_outv=null;
        List list_params=null;
        List list_col=null;
        IbmSparqlExtParser.iRIref_return fn =null;

        IbmSparqlExtParser.functionBody_return fb =null;

        IbmSparqlExtParser.expression_return s =null;

        IbmSparqlExtParser.string_return rowdef =null;

        RuleReturnScope inv = null;
        RuleReturnScope outv = null;
        RuleReturnScope params = null;
        RuleReturnScope col = null;
        XTree kind_tree=null;
        XTree fl_tree=null;
        XTree x_tree=null;
        XTree FUNCTION8_tree=null;
        XTree POST9_tree=null;
        XTree ALL10_tree=null;
        XTree GET11_tree=null;
        XTree OPEN_BRACE12_tree=null;
        XTree ARROW13_tree=null;
        XTree CLOSE_BRACE14_tree=null;
        XTree FUNCLANG15_tree=null;
        XTree OPEN_SQ_BRACKET16_tree=null;
        XTree CLOSE_SQ_BRACKET17_tree=null;
        XTree ARROW18_tree=null;
        XTree string_literal19_tree=null;
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_VAR0=new RewriteRuleTokenStream(adaptor,"token VAR0");
        RewriteRuleTokenStream stream_FUNCLANG=new RewriteRuleTokenStream(adaptor,"token FUNCLANG");
        RewriteRuleTokenStream stream_POST=new RewriteRuleTokenStream(adaptor,"token POST");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_274=new RewriteRuleTokenStream(adaptor,"token 274");
        RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_GET=new RewriteRuleTokenStream(adaptor,"token GET");
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_functionParam=new RewriteRuleSubtreeStream(adaptor,"rule functionParam");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:2: ( FUNCTION fn= iRIref (kind= ( POST ( ALL )? | GET ) )? OPEN_BRACE (inv+= var )* ARROW (outv+= var )* CLOSE_BRACE ( ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) ) | ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) ) ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:4: FUNCTION fn= iRIref (kind= ( POST ( ALL )? | GET ) )? OPEN_BRACE (inv+= var )* ARROW (outv+= var )* CLOSE_BRACE ( ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) ) | ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) ) )
            {
            FUNCTION8=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION8);


            pushFollow(FOLLOW_iRIref_in_functionDecl888);
            fn=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(fn.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:27: (kind= ( POST ( ALL )? | GET ) )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==GET||LA9_0==POST) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:27: kind= ( POST ( ALL )? | GET )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:28: ( POST ( ALL )? | GET )
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==POST) ) {
                        alt8=1;
                    }
                    else if ( (LA8_0==GET) ) {
                        alt8=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 0, input);

                        throw nvae;

                    }
                    switch (alt8) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:29: POST ( ALL )?
                            {
                            POST9=(Token)match(input,POST,FOLLOW_POST_in_functionDecl893); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_POST.add(POST9);


                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:34: ( ALL )?
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==ALL) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:34: ALL
                                    {
                                    ALL10=(Token)match(input,ALL,FOLLOW_ALL_in_functionDecl895); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ALL.add(ALL10);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:41: GET
                            {
                            GET11=(Token)match(input,GET,FOLLOW_GET_in_functionDecl900); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GET.add(GET11);


                            }
                            break;

                    }


                    }
                    break;

            }


            OPEN_BRACE12=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_functionDecl904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE12);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:61: (inv+= var )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( ((LA10_0 >= VAR1 && LA10_0 <= VAR2)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:61: inv+= var
            	    {
            	    pushFollow(FOLLOW_var_in_functionDecl908);
            	    inv=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(inv.getTree());
            	    if (list_inv==null) list_inv=new ArrayList();
            	    list_inv.add(inv.getTree());


            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            ARROW13=(Token)match(input,ARROW,FOLLOW_ARROW_in_functionDecl911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ARROW.add(ARROW13);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:78: (outv+= var )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( ((LA11_0 >= VAR1 && LA11_0 <= VAR2)) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:180:78: outv+= var
            	    {
            	    pushFollow(FOLLOW_var_in_functionDecl915);
            	    outv=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(outv.getTree());
            	    if (list_outv==null) list_outv=new ArrayList();
            	    list_outv.add(outv.getTree());


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            CLOSE_BRACE14=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_functionDecl918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE14);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:181:9: ( ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) ) | ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==FUNCLANG) ) {
                alt15=1;
            }
            else if ( (LA15_0==SERVICE||LA15_0==TABLE) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:181:11: ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:181:11: ( FUNCLANG fl= VAR0 fb= functionBody -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:181:13: FUNCLANG fl= VAR0 fb= functionBody
                    {
                    FUNCLANG15=(Token)match(input,FUNCLANG,FOLLOW_FUNCLANG_in_functionDecl932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCLANG.add(FUNCLANG15);


                    fl=(Token)match(input,VAR0,FOLLOW_VAR0_in_functionDecl936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR0.add(fl);


                    pushFollow(FOLLOW_functionBody_in_functionDecl940);
                    fb=functionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_functionBody.add(fb.getTree());

                    // AST REWRITE
                    // elements: fn, fl, inv, fb, kind, outv
                    // token labels: fl, kind
                    // rule labels: fn, fb, retval
                    // token list labels: 
                    // rule list labels: inv, outv
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_fl=new RewriteRuleTokenStream(adaptor,"token fl",fl);
                    RewriteRuleTokenStream stream_kind=new RewriteRuleTokenStream(adaptor,"token kind",kind);
                    RewriteRuleSubtreeStream stream_fn=new RewriteRuleSubtreeStream(adaptor,"rule fn",fn!=null?fn.tree:null);
                    RewriteRuleSubtreeStream stream_fb=new RewriteRuleSubtreeStream(adaptor,"rule fb",fb!=null?fb.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_inv=new RewriteRuleSubtreeStream(adaptor,"token inv",list_inv);
                    RewriteRuleSubtreeStream stream_outv=new RewriteRuleSubtreeStream(adaptor,"token outv",list_outv);
                    root_0 = (XTree)adaptor.nil();
                    // 182:8: -> ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:11: ^( FUNCNAME $fn ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLG $fl) $fb)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(FUNCNAME, "FUNCNAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_fn.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:27: ^( KIND ( $kind)? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(KIND, "KIND")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:35: ( $kind)?
                        if ( stream_kind.hasNext() ) {
                            adaptor.addChild(root_2, stream_kind.nextNode());

                        }
                        stream_kind.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:42: ^( INV ( $inv)* )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:49: ( $inv)*
                        while ( stream_inv.hasNext() ) {
                            adaptor.addChild(root_2, stream_inv.nextTree());

                        }
                        stream_inv.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:55: ^( OUTV ( $outv)* )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(OUTV, "OUTV")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:63: ( $outv)*
                        while ( stream_outv.hasNext() ) {
                            adaptor.addChild(root_2, stream_outv.nextTree());

                        }
                        stream_outv.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:182:70: ^( FUNCLG $fl)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(FUNCLG, "FUNCLG")
                        , root_2);

                        adaptor.addChild(root_2, stream_fl.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fb.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:9: ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:9: ( (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+ -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:11: (x= SERVICE |x= TABLE ) s= expression OPEN_SQ_BRACKET (params+= functionParam )* CLOSE_SQ_BRACKET ARROW rowdef= string '::' (col+= string )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:11: (x= SERVICE |x= TABLE )
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==SERVICE) ) {
                        alt12=1;
                    }
                    else if ( (LA12_0==TABLE) ) {
                        alt12=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 0, input);

                        throw nvae;

                    }
                    switch (alt12) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:13: x= SERVICE
                            {
                            x=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_functionDecl1020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SERVICE.add(x);


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:25: x= TABLE
                            {
                            x=(Token)match(input,TABLE,FOLLOW_TABLE_in_functionDecl1026); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_TABLE.add(x);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_functionDecl1032);
                    s=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(s.getTree());

                    OPEN_SQ_BRACKET16=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_functionDecl1034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET16);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:70: (params+= functionParam )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( ((LA13_0 >= STRING_LITERAL1 && LA13_0 <= STRING_LITERAL_LONG2)) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:70: params+= functionParam
                    	    {
                    	    pushFollow(FOLLOW_functionParam_in_functionDecl1038);
                    	    params=functionParam();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_functionParam.add(params.getTree());
                    	    if (list_params==null) list_params=new ArrayList();
                    	    list_params.add(params.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    CLOSE_SQ_BRACKET17=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_functionDecl1041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET17);


                    ARROW18=(Token)match(input,ARROW,FOLLOW_ARROW_in_functionDecl1043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ARROW.add(ARROW18);


                    pushFollow(FOLLOW_string_in_functionDecl1047);
                    rowdef=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_string.add(rowdef.getTree());

                    string_literal19=(Token)match(input,274,FOLLOW_274_in_functionDecl1049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_274.add(string_literal19);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:129: (col+= string )+
                    int cnt14=0;
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0 >= STRING_LITERAL1 && LA14_0 <= STRING_LITERAL_LONG2)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:184:131: col+= string
                    	    {
                    	    pushFollow(FOLLOW_string_in_functionDecl1055);
                    	    col=string();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_string.add(col.getTree());
                    	    if (list_col==null) list_col=new ArrayList();
                    	    list_col.add(col.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt14 >= 1 ) break loop14;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(14, input);
                                throw eee;
                        }
                        cnt14++;
                    } while (true);


                    // AST REWRITE
                    // elements: x, params, col, outv, inv, kind, s, rowdef, fn
                    // token labels: kind, x
                    // rule labels: s, rowdef, fn, retval
                    // token list labels: 
                    // rule list labels: inv, col, params, outv
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_kind=new RewriteRuleTokenStream(adaptor,"token kind",kind);
                    RewriteRuleTokenStream stream_x=new RewriteRuleTokenStream(adaptor,"token x",x);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_rowdef=new RewriteRuleSubtreeStream(adaptor,"rule rowdef",rowdef!=null?rowdef.tree:null);
                    RewriteRuleSubtreeStream stream_fn=new RewriteRuleSubtreeStream(adaptor,"rule fn",fn!=null?fn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_inv=new RewriteRuleSubtreeStream(adaptor,"token inv",list_inv);
                    RewriteRuleSubtreeStream stream_col=new RewriteRuleSubtreeStream(adaptor,"token col",list_col);
                    RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"token params",list_params);
                    RewriteRuleSubtreeStream stream_outv=new RewriteRuleSubtreeStream(adaptor,"token outv",list_outv);
                    root_0 = (XTree)adaptor.nil();
                    // 185:11: -> ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:14: ^( FUNCNAME ^( $x $s $fn) ^( KIND ( $kind)? ) ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( PARAMS ( $params)* ) $rowdef ( $col)* )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(FUNCNAME, "FUNCNAME")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:26: ^( $x $s $fn)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(stream_x.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_s.nextTree());

                        adaptor.addChild(root_2, stream_fn.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:39: ^( KIND ( $kind)? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(KIND, "KIND")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:47: ( $kind)?
                        if ( stream_kind.hasNext() ) {
                            adaptor.addChild(root_2, stream_kind.nextNode());

                        }
                        stream_kind.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:54: ^( INV ( $inv)* )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:61: ( $inv)*
                        while ( stream_inv.hasNext() ) {
                            adaptor.addChild(root_2, stream_inv.nextTree());

                        }
                        stream_inv.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:67: ^( OUTV ( $outv)* )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(OUTV, "OUTV")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:75: ( $outv)*
                        while ( stream_outv.hasNext() ) {
                            adaptor.addChild(root_2, stream_outv.nextTree());

                        }
                        stream_outv.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:82: ^( PARAMS ( $params)* )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(PARAMS, "PARAMS")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:92: ( $params)*
                        while ( stream_params.hasNext() ) {
                            adaptor.addChild(root_2, stream_params.nextTree());

                        }
                        stream_params.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_rowdef.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:185:110: ( $col)*
                        while ( stream_col.hasNext() ) {
                            adaptor.addChild(root_1, stream_col.nextTree());

                        }
                        stream_col.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionDecl"


    public static class functionBody_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionBody"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:190:1: functionBody : ( OPEN_CURLY_BRACE f= STRING_LINE_NONEOP CLOSE_CURLY_BRACE -> ^( FUNCBODY ( $f)* ) | OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE -> ^( FUNCBODY $p) );
    public final IbmSparqlExtParser.functionBody_return functionBody() throws RecognitionException {
        IbmSparqlExtParser.functionBody_return retval = new IbmSparqlExtParser.functionBody_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token f=null;
        Token OPEN_CURLY_BRACE20=null;
        Token CLOSE_CURLY_BRACE21=null;
        Token OPEN_CURLY_BRACE22=null;
        Token CLOSE_CURLY_BRACE23=null;
        IbmSparqlExtParser.groupGraphPattern_return p =null;


        XTree f_tree=null;
        XTree OPEN_CURLY_BRACE20_tree=null;
        XTree CLOSE_CURLY_BRACE21_tree=null;
        XTree OPEN_CURLY_BRACE22_tree=null;
        XTree CLOSE_CURLY_BRACE23_tree=null;
        RewriteRuleTokenStream stream_STRING_LINE_NONEOP=new RewriteRuleTokenStream(adaptor,"token STRING_LINE_NONEOP");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:191:2: ( OPEN_CURLY_BRACE f= STRING_LINE_NONEOP CLOSE_CURLY_BRACE -> ^( FUNCBODY ( $f)* ) | OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE -> ^( FUNCBODY $p) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==OPEN_CURLY_BRACE) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==STRING_LINE_NONEOP) ) {
                    alt16=1;
                }
                else if ( (LA16_1==OPEN_CURLY_BRACE) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:191:4: OPEN_CURLY_BRACE f= STRING_LINE_NONEOP CLOSE_CURLY_BRACE
                    {
                    OPEN_CURLY_BRACE20=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_functionBody1150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE20);


                    f=(Token)match(input,STRING_LINE_NONEOP,FOLLOW_STRING_LINE_NONEOP_in_functionBody1154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LINE_NONEOP.add(f);


                    CLOSE_CURLY_BRACE21=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_functionBody1156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE21);


                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 192:4: -> ^( FUNCBODY ( $f)* )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:192:8: ^( FUNCBODY ( $f)* )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(FUNCBODY, "FUNCBODY")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:192:21: ( $f)*
                        while ( stream_f.hasNext() ) {
                            adaptor.addChild(root_1, stream_f.nextNode());

                        }
                        stream_f.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:193:4: OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE
                    {
                    OPEN_CURLY_BRACE22=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_functionBody1177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE22);


                    pushFollow(FOLLOW_groupGraphPattern_in_functionBody1181);
                    p=groupGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPattern.add(p.getTree());

                    CLOSE_CURLY_BRACE23=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_functionBody1183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE23);


                    // AST REWRITE
                    // elements: p
                    // token labels: 
                    // rule labels: p, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 194:4: -> ^( FUNCBODY $p)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:194:8: ^( FUNCBODY $p)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(FUNCBODY, "FUNCBODY")
                        , root_1);

                        adaptor.addChild(root_1, stream_p.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionBody"


    public static class subSelect_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subSelect"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:197:1: subSelect : s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) ;
    public final IbmSparqlExtParser.subSelect_return subSelect() throws RecognitionException {
        IbmSparqlExtParser.subSelect_return retval = new IbmSparqlExtParser.subSelect_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.selectClause_return s =null;

        IbmSparqlExtParser.whereClause_return w =null;

        IbmSparqlExtParser.solutionModifier_return m =null;

        IbmSparqlExtParser.inlineData_return d =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_inlineData=new RewriteRuleSubtreeStream(adaptor,"rule inlineData");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:198:2: (s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:198:6: s= selectClause w= whereClause m= solutionModifier (d= inlineData )?
            {
            pushFollow(FOLLOW_selectClause_in_subSelect1217);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

            pushFollow(FOLLOW_whereClause_in_subSelect1221);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            pushFollow(FOLLOW_solutionModifier_in_subSelect1225);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:198:54: (d= inlineData )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==VALUES) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:198:55: d= inlineData
                    {
                    pushFollow(FOLLOW_inlineData_in_subSelect1230);
                    d=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inlineData.add(d.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: m, w, d, s
            // token labels: 
            // rule labels: s, d, w, m, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 199:3: -> ^( SUB_SELECT $s $w $m ( $d)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:199:7: ^( SUB_SELECT $s $w $m ( $d)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(SUB_SELECT, "SUB_SELECT")
                , root_1);

                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_1, stream_m.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:199:31: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subSelect"


    public static class selectClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:202:1: selectClause : SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) ;
    public final IbmSparqlExtParser.selectClause_return selectClause() throws RecognitionException {
        IbmSparqlExtParser.selectClause_return retval = new IbmSparqlExtParser.selectClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token SELECT24=null;
        Token char_literal25=null;
        List list_v1=null;
        List list_e=null;
        List list_f=null;
        RuleReturnScope v1 = null;
        RuleReturnScope e = null;
        RuleReturnScope f = null;
        XTree t1_tree=null;
        XTree t2_tree=null;
        XTree SELECT24_tree=null;
        XTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_270=new RewriteRuleTokenStream(adaptor,"token 270");
        RewriteRuleTokenStream stream_REDUCED=new RewriteRuleTokenStream(adaptor,"token REDUCED");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expAsVar=new RewriteRuleSubtreeStream(adaptor,"rule expAsVar");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_fexp=new RewriteRuleSubtreeStream(adaptor,"rule fexp");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:2: ( SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:6: SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' )
            {
            SELECT24=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause1273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT24);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:13: (t1= DISTINCT |t2= REDUCED )?
            int alt18=3;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DISTINCT) ) {
                alt18=1;
            }
            else if ( (LA18_0==REDUCED) ) {
                alt18=2;
            }
            switch (alt18) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:15: t1= DISTINCT
                    {
                    t1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause1279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(t1);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:29: t2= REDUCED
                    {
                    t2=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause1285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_REDUCED.add(t2);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:43: ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==ABS||LA20_0==AVG||LA20_0==BNODE||LA20_0==BOUND||LA20_0==CEIL||LA20_0==COALESCE||LA20_0==CONCAT||LA20_0==CONTAINS||LA20_0==COUNT||(LA20_0 >= DATATYPE && LA20_0 <= DAY)||LA20_0==ENCODE_FOR_URI||LA20_0==EXISTS||LA20_0==FLOOR||LA20_0==GROUP_CONCAT||LA20_0==HOURS||LA20_0==IF||LA20_0==IRI||(LA20_0 >= ISBLANK && LA20_0 <= ISURI)||(LA20_0 >= LANG && LA20_0 <= LANGMATCHES)||LA20_0==LCASE||(LA20_0 >= MAX && LA20_0 <= MIN)||LA20_0==MINUTES||LA20_0==MONTH||LA20_0==NOT||LA20_0==NOW||LA20_0==OPEN_BRACE||LA20_0==RAND||(LA20_0 >= REGEX && LA20_0 <= REPLACE)||LA20_0==ROUND||(LA20_0 >= SAMETERM && LA20_0 <= SECONDS)||(LA20_0 >= SHA1 && LA20_0 <= SHA512)||(LA20_0 >= STR && LA20_0 <= STRENDS)||(LA20_0 >= STRLANG && LA20_0 <= STRUUID)||LA20_0==SUBSTR||LA20_0==SUM||LA20_0==TIMEZONE||LA20_0==TZ||LA20_0==UCASE||LA20_0==URI||LA20_0==UUID||(LA20_0 >= VAR1 && LA20_0 <= VAR2)||LA20_0==YEAR) ) {
                alt20=1;
            }
            else if ( (LA20_0==270) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:45: (v1+= var |e+= expAsVar |f+= fexp )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:45: (v1+= var |e+= expAsVar |f+= fexp )+
                    int cnt19=0;
                    loop19:
                    do {
                        int alt19=4;
                        switch ( input.LA(1) ) {
                        case VAR1:
                        case VAR2:
                            {
                            alt19=1;
                            }
                            break;
                        case OPEN_BRACE:
                            {
                            alt19=2;
                            }
                            break;
                        case ABS:
                        case AVG:
                        case BNODE:
                        case BOUND:
                        case CEIL:
                        case COALESCE:
                        case CONCAT:
                        case CONTAINS:
                        case COUNT:
                        case DATATYPE:
                        case DAY:
                        case ENCODE_FOR_URI:
                        case EXISTS:
                        case FLOOR:
                        case GROUP_CONCAT:
                        case HOURS:
                        case IF:
                        case IRI:
                        case ISBLANK:
                        case ISIRI:
                        case ISLITERAL:
                        case ISNUMERIC:
                        case ISURI:
                        case LANG:
                        case LANGMATCHES:
                        case LCASE:
                        case MAX:
                        case MD5:
                        case MIN:
                        case MINUTES:
                        case MONTH:
                        case NOT:
                        case NOW:
                        case RAND:
                        case REGEX:
                        case REPLACE:
                        case ROUND:
                        case SAMETERM:
                        case SAMPLE:
                        case SECONDS:
                        case SHA1:
                        case SHA224:
                        case SHA256:
                        case SHA384:
                        case SHA512:
                        case STR:
                        case STRAFTER:
                        case STRBEFORE:
                        case STRDT:
                        case STRENDS:
                        case STRLANG:
                        case STRLEN:
                        case STRSTARTS:
                        case STRUUID:
                        case SUBSTR:
                        case SUM:
                        case TIMEZONE:
                        case TZ:
                        case UCASE:
                        case URI:
                        case UUID:
                        case YEAR:
                            {
                            alt19=3;
                            }
                            break;

                        }

                        switch (alt19) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:47: v1+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_selectClause1296);
                    	    v1=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v1.getTree());
                    	    if (list_v1==null) list_v1=new ArrayList();
                    	    list_v1.add(v1.getTree());


                    	    }
                    	    break;
                    	case 2 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:57: e+= expAsVar
                    	    {
                    	    pushFollow(FOLLOW_expAsVar_in_selectClause1302);
                    	    e=expAsVar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expAsVar.add(e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;
                    	case 3 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:71: f+= fexp
                    	    {
                    	    pushFollow(FOLLOW_fexp_in_selectClause1308);
                    	    f=fexp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fexp.add(f.getTree());
                    	    if (list_f==null) list_f=new ArrayList();
                    	    list_f.add(f.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt19 >= 1 ) break loop19;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(19, input);
                                throw eee;
                        }
                        cnt19++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:203:84: '*'
                    {
                    char_literal25=(Token)match(input,270,FOLLOW_270_in_selectClause1315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_270.add(char_literal25);


                    }
                    break;

            }


            // AST REWRITE
            // elements: v1, e, f, 270, t1, t2
            // token labels: t1, t2
            // rule labels: retval
            // token list labels: 
            // rule list labels: e, f, v1
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleTokenStream stream_t2=new RewriteRuleTokenStream(adaptor,"token t2",t2);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"token v1",list_v1);
            root_0 = (XTree)adaptor.nil();
            // 205:3: -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:8: ( ^( TYPE ( $t1)? ( $t2)? ) )?
                if ( stream_t1.hasNext()||stream_t2.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:8: ^( TYPE ( $t1)? ( $t2)? )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TYPE, "TYPE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:16: ( $t1)?
                    if ( stream_t1.hasNext() ) {
                        adaptor.addChild(root_1, stream_t1.nextNode());

                    }
                    stream_t1.reset();

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:21: ( $t2)?
                    if ( stream_t2.hasNext() ) {
                        adaptor.addChild(root_1, stream_t2.nextNode());

                    }
                    stream_t2.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_t1.reset();
                stream_t2.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:27: ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PVARS, "PVARS")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:36: ( $v1)*
                while ( stream_v1.hasNext() ) {
                    adaptor.addChild(root_1, stream_v1.nextTree());

                }
                stream_v1.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:41: ( $e)*
                while ( stream_e.hasNext() ) {
                    adaptor.addChild(root_1, stream_e.nextTree());

                }
                stream_e.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:45: ( $f)*
                while ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextTree());

                }
                stream_f.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:205:48: ( '*' )?
                if ( stream_270.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_270.nextNode()
                    );

                }
                stream_270.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectClause"


    public static class expAsVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expAsVar"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:208:1: expAsVar : OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) ;
    public final IbmSparqlExtParser.expAsVar_return expAsVar() throws RecognitionException {
        IbmSparqlExtParser.expAsVar_return retval = new IbmSparqlExtParser.expAsVar_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE26=null;
        Token AS27=null;
        Token CLOSE_BRACE28=null;
        IbmSparqlExtParser.expression_return e =null;

        IbmSparqlExtParser.var_return v =null;


        XTree OPEN_BRACE26_tree=null;
        XTree AS27_tree=null;
        XTree CLOSE_BRACE28_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:209:2: ( OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:209:4: OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            OPEN_BRACE26=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expAsVar1369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE26);


            pushFollow(FOLLOW_expression_in_expAsVar1373);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            AS27=(Token)match(input,AS,FOLLOW_AS_in_expAsVar1375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS27);


            pushFollow(FOLLOW_var_in_expAsVar1379);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            CLOSE_BRACE28=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expAsVar1381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE28);


            // AST REWRITE
            // elements: AS, e, v
            // token labels: 
            // rule labels: e, v, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 211:3: -> ^( AS $v $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:211:6: ^( AS $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_AS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expAsVar"


    public static class fexp_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fexp"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:1: fexp : (a= aggregate |b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) ;
    public final IbmSparqlExtParser.fexp_return fexp() throws RecognitionException {
        IbmSparqlExtParser.fexp_return retval = new IbmSparqlExtParser.fexp_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.aggregate_return a =null;

        IbmSparqlExtParser.builtInCall_return b =null;


        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        RewriteRuleSubtreeStream stream_aggregate=new RewriteRuleSubtreeStream(adaptor,"rule aggregate");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:6: ( (a= aggregate |b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:8: (a= aggregate |b= builtInCall )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:8: (a= aggregate |b= builtInCall )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==AVG||LA21_0==COUNT||LA21_0==GROUP_CONCAT||LA21_0==MAX||LA21_0==MIN||LA21_0==SAMPLE||LA21_0==SUM) ) {
                alt21=1;
            }
            else if ( (LA21_0==ABS||LA21_0==BNODE||LA21_0==BOUND||LA21_0==CEIL||LA21_0==COALESCE||LA21_0==CONCAT||LA21_0==CONTAINS||(LA21_0 >= DATATYPE && LA21_0 <= DAY)||LA21_0==ENCODE_FOR_URI||LA21_0==EXISTS||LA21_0==FLOOR||LA21_0==HOURS||LA21_0==IF||LA21_0==IRI||(LA21_0 >= ISBLANK && LA21_0 <= ISURI)||(LA21_0 >= LANG && LA21_0 <= LANGMATCHES)||LA21_0==LCASE||LA21_0==MD5||LA21_0==MINUTES||LA21_0==MONTH||LA21_0==NOT||LA21_0==NOW||LA21_0==RAND||(LA21_0 >= REGEX && LA21_0 <= REPLACE)||LA21_0==ROUND||LA21_0==SAMETERM||LA21_0==SECONDS||(LA21_0 >= SHA1 && LA21_0 <= SHA512)||(LA21_0 >= STR && LA21_0 <= STRENDS)||(LA21_0 >= STRLANG && LA21_0 <= STRUUID)||LA21_0==SUBSTR||LA21_0==TIMEZONE||LA21_0==TZ||LA21_0==UCASE||LA21_0==URI||LA21_0==UUID||LA21_0==YEAR) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:10: a= aggregate
                    {
                    pushFollow(FOLLOW_aggregate_in_fexp1415);
                    a=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate.add(a.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:214:24: b= builtInCall
                    {
                    pushFollow(FOLLOW_builtInCall_in_fexp1421);
                    b=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtInCall.add(b.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: a, b
            // token labels: 
            // rule labels: a, b, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 216:3: -> ^( EXP ( $a)? ( $b)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:216:7: ^( EXP ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(EXP, "EXP")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:216:15: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:216:19: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fexp"


    public static class constructQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:220:1: constructQuery : CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) ;
    public final IbmSparqlExtParser.constructQuery_return constructQuery() throws RecognitionException {
        IbmSparqlExtParser.constructQuery_return retval = new IbmSparqlExtParser.constructQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CONSTRUCT29=null;
        Token WHERE_TOKEN30=null;
        Token OPEN_CURLY_BRACE31=null;
        Token CLOSE_CURLY_BRACE32=null;
        List list_d1=null;
        List list_d2=null;
        IbmSparqlExtParser.constructTemplate_return c =null;

        IbmSparqlExtParser.whereClause_return w1 =null;

        IbmSparqlExtParser.solutionModifier_return s1 =null;

        IbmSparqlExtParser.triplesTemplate_return t =null;

        IbmSparqlExtParser.solutionModifier_return s2 =null;

        RuleReturnScope d1 = null;
        RuleReturnScope d2 = null;
        XTree CONSTRUCT29_tree=null;
        XTree WHERE_TOKEN30_tree=null;
        XTree OPEN_CURLY_BRACE31_tree=null;
        XTree CLOSE_CURLY_BRACE32_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleTokenStream stream_CONSTRUCT=new RewriteRuleTokenStream(adaptor,"token CONSTRUCT");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_constructTemplate=new RewriteRuleSubtreeStream(adaptor,"rule constructTemplate");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:221:2: ( CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:221:6: CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            {
            CONSTRUCT29=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery1463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONSTRUCT.add(CONSTRUCT29);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:222:6: ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==OPEN_CURLY_BRACE) ) {
                alt25=1;
            }
            else if ( (LA25_0==FROM||LA25_0==WHERE_TOKEN) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:223:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:223:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:223:9: c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier
                    {
                    pushFollow(FOLLOW_constructTemplate_in_constructQuery1483);
                    c=constructTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructTemplate.add(c.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:223:31: (d1+= datasetClause )*
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==FROM) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:223:31: d1+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1487);
                    	    d1=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d1.getTree());
                    	    if (list_d1==null) list_d1=new ArrayList();
                    	    list_d1.add(d1.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    pushFollow(FOLLOW_whereClause_in_constructQuery1492);
                    w1=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w1.getTree());

                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1496);
                    s1=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s1.getTree());

                    }


                    // AST REWRITE
                    // elements: s1, d1, c, CONSTRUCT, w1
                    // token labels: 
                    // rule labels: c, w1, s1, retval
                    // token list labels: 
                    // rule list labels: d1
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
                    RewriteRuleSubtreeStream stream_w1=new RewriteRuleSubtreeStream(adaptor,"rule w1",w1!=null?w1.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_d1=new RewriteRuleSubtreeStream(adaptor,"token d1",list_d1);
                    root_0 = (XTree)adaptor.nil();
                    // 224:5: -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:224:8: ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONSTRUCT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:224:22: ( $c)?
                        if ( stream_c.hasNext() ) {
                            adaptor.addChild(root_1, stream_c.nextTree());

                        }
                        stream_c.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:224:25: ( ^( DATASET ( $d1)* ) )?
                        if ( stream_d1.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:224:25: ^( DATASET ( $d1)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(DATASET, "DATASET")
                            , root_2);

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:224:36: ( $d1)*
                            while ( stream_d1.hasNext() ) {
                                adaptor.addChild(root_2, stream_d1.nextTree());

                            }
                            stream_d1.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d1.reset();

                        adaptor.addChild(root_1, stream_w1.nextTree());

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:9: (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:11: (d2+= datasetClause )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==FROM) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:11: d2+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1541);
                    	    d2=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d2.getTree());
                    	    if (list_d2==null) list_d2=new ArrayList();
                    	    list_d2.add(d2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    WHERE_TOKEN30=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_constructQuery1544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN30);


                    OPEN_CURLY_BRACE31=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE31);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:58: (t= triplesTemplate )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==BLANK_NODE_LABEL||(LA24_0 >= DECIMAL && LA24_0 <= DECIMAL_POSITIVE)||(LA24_0 >= DOUBLE && LA24_0 <= DOUBLE_POSITIVE)||LA24_0==FALSE||(LA24_0 >= INTEGER && LA24_0 <= INTEGER_POSITIVE)||LA24_0==IRI_REF||LA24_0==OPEN_BRACE||LA24_0==OPEN_SQ_BRACKET||(LA24_0 >= PNAME_LN && LA24_0 <= PNAME_NS)||(LA24_0 >= STRING_LITERAL1 && LA24_0 <= STRING_LITERAL_LONG2)||LA24_0==TRUE||(LA24_0 >= VAR1 && LA24_0 <= VAR2)) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:225:58: t= triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_constructQuery1550);
                            t=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesTemplate.add(t.getTree());

                            }
                            break;

                    }


                    CLOSE_CURLY_BRACE32=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE32);


                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1557);
                    s2=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s2.getTree());

                    }


                    // AST REWRITE
                    // elements: t, CONSTRUCT, s2, d2
                    // token labels: 
                    // rule labels: t, retval, s2
                    // token list labels: 
                    // rule list labels: d2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_d2=new RewriteRuleSubtreeStream(adaptor,"token d2",list_d2);
                    root_0 = (XTree)adaptor.nil();
                    // 226:5: -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:8: ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONSTRUCT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:21: ( ^( DATASET ( $d2)* ) )?
                        if ( stream_d2.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:21: ^( DATASET ( $d2)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(DATASET, "DATASET")
                            , root_2);

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:32: ( $d2)*
                            while ( stream_d2.hasNext() ) {
                                adaptor.addChild(root_2, stream_d2.nextTree());

                            }
                            stream_d2.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d2.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:38: ( ^( WHERE $t) )?
                        if ( stream_t.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:226:39: ^( WHERE $t)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(WHERE, "WHERE")
                            , root_2);

                            adaptor.addChild(root_2, stream_t.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t.reset();

                        adaptor.addChild(root_1, stream_s2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructQuery"


    public static class describeQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "describeQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:230:1: describeQuery : DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) ;
    public final IbmSparqlExtParser.describeQuery_return describeQuery() throws RecognitionException {
        IbmSparqlExtParser.describeQuery_return retval = new IbmSparqlExtParser.describeQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token r=null;
        Token DESCRIBE33=null;
        List list_v=null;
        IbmSparqlExtParser.datasetClause_return d =null;

        IbmSparqlExtParser.whereClause_return w =null;

        IbmSparqlExtParser.solutionModifier_return s =null;

        RuleReturnScope v = null;
        XTree r_tree=null;
        XTree DESCRIBE33_tree=null;
        RewriteRuleTokenStream stream_270=new RewriteRuleTokenStream(adaptor,"token 270");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:2: ( DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:6: DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier
            {
            DESCRIBE33=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeQuery1619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE33);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:15: ( (v+= varOrIRIref )+ |r= '*' )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==IRI_REF||(LA27_0 >= PNAME_LN && LA27_0 <= PNAME_NS)||(LA27_0 >= VAR1 && LA27_0 <= VAR2)) ) {
                alt27=1;
            }
            else if ( (LA27_0==270) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:17: (v+= varOrIRIref )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:18: (v+= varOrIRIref )+
                    int cnt26=0;
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( (LA26_0==IRI_REF||(LA26_0 >= PNAME_LN && LA26_0 <= PNAME_NS)||(LA26_0 >= VAR1 && LA26_0 <= VAR2)) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:18: v+= varOrIRIref
                    	    {
                    	    pushFollow(FOLLOW_varOrIRIref_in_describeQuery1625);
                    	    v=varOrIRIref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt26 >= 1 ) break loop26;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(26, input);
                                throw eee;
                        }
                        cnt26++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:35: r= '*'
                    {
                    r=(Token)match(input,270,FOLLOW_270_in_describeQuery1632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_270.add(r);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:44: (d= datasetClause )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==FROM) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:44: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_describeQuery1638);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:61: (w= whereClause )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==OPEN_CURLY_BRACE||LA29_0==WHERE_TOKEN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:231:61: w= whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_describeQuery1643);
                    w=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_solutionModifier_in_describeQuery1648);
            s=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(s.getTree());

            // AST REWRITE
            // elements: DESCRIBE, v, d, s, r, w
            // token labels: r
            // rule labels: s, d, w, retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 233:3: -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:233:7: ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_DESCRIBE.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:233:21: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:233:26: ( $r)?
                if ( stream_r.hasNext() ) {
                    adaptor.addChild(root_1, stream_r.nextNode());

                }
                stream_r.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:233:31: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:233:36: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();

                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "describeQuery"


    public static class askQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "askQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:236:1: askQuery : ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) ;
    public final IbmSparqlExtParser.askQuery_return askQuery() throws RecognitionException {
        IbmSparqlExtParser.askQuery_return retval = new IbmSparqlExtParser.askQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ASK34=null;
        IbmSparqlExtParser.datasetClause_return d =null;

        IbmSparqlExtParser.whereClause_return w =null;


        XTree ASK34_tree=null;
        RewriteRuleTokenStream stream_ASK=new RewriteRuleTokenStream(adaptor,"token ASK");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:237:2: ( ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:237:6: ASK (d= datasetClause )* w= whereClause
            {
            ASK34=(Token)match(input,ASK,FOLLOW_ASK_in_askQuery1702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASK.add(ASK34);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:237:11: (d= datasetClause )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==FROM) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:237:11: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_askQuery1706);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            pushFollow(FOLLOW_whereClause_in_askQuery1711);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            // AST REWRITE
            // elements: w, ASK, d
            // token labels: 
            // rule labels: d, w, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 239:3: -> ^( ASK ( $d)* $w)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:239:7: ^( ASK ( $d)* $w)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_ASK.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:239:15: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "askQuery"


    public static class datasetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datasetClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:242:1: datasetClause : FROM (d= defaultGraphClause |n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) ;
    public final IbmSparqlExtParser.datasetClause_return datasetClause() throws RecognitionException {
        IbmSparqlExtParser.datasetClause_return retval = new IbmSparqlExtParser.datasetClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token FROM35=null;
        IbmSparqlExtParser.defaultGraphClause_return d =null;

        IbmSparqlExtParser.namedGraphClause_return n =null;


        XTree FROM35_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_namedGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule namedGraphClause");
        RewriteRuleSubtreeStream stream_defaultGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule defaultGraphClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:243:2: ( FROM (d= defaultGraphClause |n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:243:6: FROM (d= defaultGraphClause |n= namedGraphClause )
            {
            FROM35=(Token)match(input,FROM,FOLLOW_FROM_in_datasetClause1748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM35);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:243:11: (d= defaultGraphClause |n= namedGraphClause )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==IRI_REF||(LA31_0 >= PNAME_LN && LA31_0 <= PNAME_NS)) ) {
                alt31=1;
            }
            else if ( (LA31_0==NAMED) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:243:13: d= defaultGraphClause
                    {
                    pushFollow(FOLLOW_defaultGraphClause_in_datasetClause1754);
                    d=defaultGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultGraphClause.add(d.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:243:36: n= namedGraphClause
                    {
                    pushFollow(FOLLOW_namedGraphClause_in_datasetClause1760);
                    n=namedGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_namedGraphClause.add(n.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: d, n, FROM
            // token labels: 
            // rule labels: d, n, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 245:3: -> ^( FROM ( $d)? ( ^( NAMED $n) )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:245:7: ^( FROM ( $d)? ( ^( NAMED $n) )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_FROM.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:245:16: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:245:19: ( ^( NAMED $n) )?
                if ( stream_n.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:245:19: ^( NAMED $n)
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(NAMED, "NAMED")
                    , root_2);

                    adaptor.addChild(root_2, stream_n.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_n.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "datasetClause"


    public static class defaultGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultGraphClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:248:1: defaultGraphClause : sourceSelector ;
    public final IbmSparqlExtParser.defaultGraphClause_return defaultGraphClause() throws RecognitionException {
        IbmSparqlExtParser.defaultGraphClause_return retval = new IbmSparqlExtParser.defaultGraphClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.sourceSelector_return sourceSelector36 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:249:2: ( sourceSelector )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:249:6: sourceSelector
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_sourceSelector_in_defaultGraphClause1804);
            sourceSelector36=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sourceSelector36.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defaultGraphClause"


    public static class namedGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedGraphClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:252:1: namedGraphClause : NAMED s= sourceSelector -> $s;
    public final IbmSparqlExtParser.namedGraphClause_return namedGraphClause() throws RecognitionException {
        IbmSparqlExtParser.namedGraphClause_return retval = new IbmSparqlExtParser.namedGraphClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token NAMED37=null;
        IbmSparqlExtParser.sourceSelector_return s =null;


        XTree NAMED37_tree=null;
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_sourceSelector=new RewriteRuleSubtreeStream(adaptor,"rule sourceSelector");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:253:2: ( NAMED s= sourceSelector -> $s)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:253:6: NAMED s= sourceSelector
            {
            NAMED37=(Token)match(input,NAMED,FOLLOW_NAMED_in_namedGraphClause1821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMED.add(NAMED37);


            pushFollow(FOLLOW_sourceSelector_in_namedGraphClause1825);
            s=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sourceSelector.add(s.getTree());

            // AST REWRITE
            // elements: s
            // token labels: 
            // rule labels: s, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 253:30: -> $s
            {
                adaptor.addChild(root_0, stream_s.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namedGraphClause"


    public static class sourceSelector_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sourceSelector"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:256:1: sourceSelector : iRIref ;
    public final IbmSparqlExtParser.sourceSelector_return sourceSelector() throws RecognitionException {
        IbmSparqlExtParser.sourceSelector_return retval = new IbmSparqlExtParser.sourceSelector_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return iRIref38 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:257:2: ( iRIref )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:257:6: iRIref
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_iRIref_in_sourceSelector1848);
            iRIref38=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref38.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sourceSelector"


    public static class whereClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whereClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:260:1: whereClause : ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) ;
    public final IbmSparqlExtParser.whereClause_return whereClause() throws RecognitionException {
        IbmSparqlExtParser.whereClause_return retval = new IbmSparqlExtParser.whereClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token WHERE_TOKEN39=null;
        IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern40 =null;


        XTree WHERE_TOKEN39_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:261:2: ( ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:261:6: ( WHERE_TOKEN )? groupGraphPattern
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:261:6: ( WHERE_TOKEN )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==WHERE_TOKEN) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:261:6: WHERE_TOKEN
                    {
                    WHERE_TOKEN39=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_whereClause1865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN39);


                    }
                    break;

            }


            pushFollow(FOLLOW_groupGraphPattern_in_whereClause1868);
            groupGraphPattern40=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(groupGraphPattern40.getTree());

            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 263:3: -> ^( WHERE groupGraphPattern )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:263:7: ^( WHERE groupGraphPattern )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(WHERE, "WHERE")
                , root_1);

                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whereClause"


    public static class solutionModifier_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "solutionModifier"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:266:1: solutionModifier : (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) ;
    public final IbmSparqlExtParser.solutionModifier_return solutionModifier() throws RecognitionException {
        IbmSparqlExtParser.solutionModifier_return retval = new IbmSparqlExtParser.solutionModifier_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.groupClause_return g =null;

        IbmSparqlExtParser.havingClause_return h =null;

        IbmSparqlExtParser.orderClause_return o =null;

        IbmSparqlExtParser.limitOffsetClauses_return l =null;


        RewriteRuleSubtreeStream stream_limitOffsetClauses=new RewriteRuleSubtreeStream(adaptor,"rule limitOffsetClauses");
        RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:2: ( (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:6: (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )?
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:7: (g= groupClause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==GROUP) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:7: g= groupClause
                    {
                    pushFollow(FOLLOW_groupClause_in_solutionModifier1902);
                    g=groupClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupClause.add(g.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:22: (h= havingClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==HAVING) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:22: h= havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_solutionModifier1907);
                    h=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:38: (o= orderClause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ORDER) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:38: o= orderClause
                    {
                    pushFollow(FOLLOW_orderClause_in_solutionModifier1912);
                    o=orderClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:53: (l= limitOffsetClauses )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==LIMIT||LA36_0==OFFSET) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:267:53: l= limitOffsetClauses
                    {
                    pushFollow(FOLLOW_limitOffsetClauses_in_solutionModifier1917);
                    l=limitOffsetClauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitOffsetClauses.add(l.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: o, l, h, g
            // token labels: 
            // rule labels: g, h, l, retval, o
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 268:3: -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:268:6: ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(MODIFIERS, "MODIFIERS")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:268:19: ( $g)?
                if ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:268:23: ( $h)?
                if ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:268:27: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:268:31: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "solutionModifier"


    public static class groupClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:271:1: groupClause : GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) ;
    public final IbmSparqlExtParser.groupClause_return groupClause() throws RecognitionException {
        IbmSparqlExtParser.groupClause_return retval = new IbmSparqlExtParser.groupClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GROUP41=null;
        Token BY42=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree GROUP41_tree=null;
        XTree BY42_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupCondition=new RewriteRuleSubtreeStream(adaptor,"rule groupCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:272:2: ( GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:272:6: GROUP BY (g+= groupCondition )+
            {
            GROUP41=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP41);


            BY42=(Token)match(input,BY,FOLLOW_BY_in_groupClause1961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY42);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:272:16: (g+= groupCondition )+
            int cnt37=0;
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==ABS||LA37_0==BNODE||LA37_0==BOUND||LA37_0==CEIL||LA37_0==COALESCE||LA37_0==CONCAT||LA37_0==CONTAINS||(LA37_0 >= DATATYPE && LA37_0 <= DAY)||LA37_0==ENCODE_FOR_URI||LA37_0==EXISTS||LA37_0==FLOOR||LA37_0==HOURS||LA37_0==IF||LA37_0==IRI||(LA37_0 >= IRI_REF && LA37_0 <= ISURI)||(LA37_0 >= LANG && LA37_0 <= LANGMATCHES)||LA37_0==LCASE||LA37_0==MD5||LA37_0==MINUTES||LA37_0==MONTH||LA37_0==NOT||LA37_0==NOW||LA37_0==OPEN_BRACE||(LA37_0 >= PNAME_LN && LA37_0 <= PNAME_NS)||LA37_0==RAND||(LA37_0 >= REGEX && LA37_0 <= REPLACE)||LA37_0==ROUND||LA37_0==SAMETERM||LA37_0==SECONDS||(LA37_0 >= SHA1 && LA37_0 <= SHA512)||(LA37_0 >= STR && LA37_0 <= STRENDS)||(LA37_0 >= STRLANG && LA37_0 <= STRUUID)||LA37_0==SUBSTR||LA37_0==TIMEZONE||LA37_0==TZ||LA37_0==UCASE||LA37_0==URI||LA37_0==UUID||(LA37_0 >= VAR1 && LA37_0 <= VAR2)||LA37_0==YEAR) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:272:16: g+= groupCondition
            	    {
            	    pushFollow(FOLLOW_groupCondition_in_groupClause1965);
            	    g=groupCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupCondition.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt37 >= 1 ) break loop37;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(37, input);
                        throw eee;
                }
                cnt37++;
            } while (true);


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 274:3: -> ^( GROUP_BY ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:274:7: ^( GROUP_BY ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(GROUP_BY, "GROUP_BY")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupClause"


    public static class groupCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:277:1: groupCondition : ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var );
    public final IbmSparqlExtParser.groupCondition_return groupCondition() throws RecognitionException {
        IbmSparqlExtParser.groupCondition_return retval = new IbmSparqlExtParser.groupCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE45=null;
        Token AS46=null;
        Token CLOSE_BRACE47=null;
        IbmSparqlExtParser.expression_return e =null;

        IbmSparqlExtParser.var_return v =null;

        IbmSparqlExtParser.builtInCall_return builtInCall43 =null;

        IbmSparqlExtParser.functionCall_return functionCall44 =null;

        IbmSparqlExtParser.var_return var48 =null;


        XTree OPEN_BRACE45_tree=null;
        XTree AS46_tree=null;
        XTree CLOSE_BRACE47_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:278:2: ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var )
            int alt39=4;
            switch ( input.LA(1) ) {
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt39=1;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt39=2;
                }
                break;
            case OPEN_BRACE:
                {
                alt39=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt39=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:278:6: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_groupCondition2000);
                    builtInCall43=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall43.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:279:6: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_functionCall_in_groupCondition2008);
                    functionCall44=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall44.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:280:6: OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE
                    {
                    OPEN_BRACE45=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_groupCondition2016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE45);


                    pushFollow(FOLLOW_expression_in_groupCondition2020);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:280:30: ( AS v= var )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==AS) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:280:32: AS v= var
                            {
                            AS46=(Token)match(input,AS,FOLLOW_AS_in_groupCondition2024); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS46);


                            pushFollow(FOLLOW_var_in_groupCondition2028);
                            v=var();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_var.add(v.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE47=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_groupCondition2033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE47);


                    // AST REWRITE
                    // elements: v, e
                    // token labels: 
                    // rule labels: e, v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 280:58: -> ^( CONDITION $e ( $v)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:280:62: ^( CONDITION $e ( $v)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(CONDITION, "CONDITION")
                        , root_1);

                        adaptor.addChild(root_1, stream_e.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:280:81: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:281:6: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_groupCondition2060);
                    var48=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var48.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupCondition"


    public static class havingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:284:1: havingClause : HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) ;
    public final IbmSparqlExtParser.havingClause_return havingClause() throws RecognitionException {
        IbmSparqlExtParser.havingClause_return retval = new IbmSparqlExtParser.havingClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token HAVING49=null;
        List list_h=null;
        RuleReturnScope h = null;
        XTree HAVING49_tree=null;
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:285:2: ( HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:285:6: HAVING (h+= havingCondition )+
            {
            HAVING49=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause2077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HAVING.add(HAVING49);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:285:14: (h+= havingCondition )+
            int cnt40=0;
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==ABS||LA40_0==BNODE||LA40_0==BOUND||LA40_0==CEIL||LA40_0==COALESCE||LA40_0==CONCAT||LA40_0==CONTAINS||(LA40_0 >= DATATYPE && LA40_0 <= DAY)||LA40_0==ENCODE_FOR_URI||LA40_0==EXISTS||LA40_0==FLOOR||LA40_0==HOURS||LA40_0==IF||LA40_0==IRI||(LA40_0 >= IRI_REF && LA40_0 <= ISURI)||(LA40_0 >= LANG && LA40_0 <= LANGMATCHES)||LA40_0==LCASE||LA40_0==MD5||LA40_0==MINUTES||LA40_0==MONTH||LA40_0==NOT||LA40_0==NOW||LA40_0==OPEN_BRACE||(LA40_0 >= PNAME_LN && LA40_0 <= PNAME_NS)||LA40_0==RAND||(LA40_0 >= REGEX && LA40_0 <= REPLACE)||LA40_0==ROUND||LA40_0==SAMETERM||LA40_0==SECONDS||(LA40_0 >= SHA1 && LA40_0 <= SHA512)||(LA40_0 >= STR && LA40_0 <= STRENDS)||(LA40_0 >= STRLANG && LA40_0 <= STRUUID)||LA40_0==SUBSTR||LA40_0==TIMEZONE||LA40_0==TZ||LA40_0==UCASE||LA40_0==URI||LA40_0==UUID||LA40_0==YEAR) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:285:14: h+= havingCondition
            	    {
            	    pushFollow(FOLLOW_havingCondition_in_havingClause2081);
            	    h=havingCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_havingCondition.add(h.getTree());
            	    if (list_h==null) list_h=new ArrayList();
            	    list_h.add(h.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);


            // AST REWRITE
            // elements: HAVING, h
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: h
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"token h",list_h);
            root_0 = (XTree)adaptor.nil();
            // 287:3: -> ^( HAVING ( $h)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:287:7: ^( HAVING ( $h)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_HAVING.nextNode()
                , root_1);

                if ( !(stream_h.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingClause"


    public static class havingCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:290:1: havingCondition : constraint ;
    public final IbmSparqlExtParser.havingCondition_return havingCondition() throws RecognitionException {
        IbmSparqlExtParser.havingCondition_return retval = new IbmSparqlExtParser.havingCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.constraint_return constraint50 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:291:2: ( constraint )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:291:6: constraint
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_constraint_in_havingCondition2118);
            constraint50=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint50.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingCondition"


    public static class orderClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:294:1: orderClause : ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) ;
    public final IbmSparqlExtParser.orderClause_return orderClause() throws RecognitionException {
        IbmSparqlExtParser.orderClause_return retval = new IbmSparqlExtParser.orderClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ORDER51=null;
        Token BY52=null;
        List list_o=null;
        RuleReturnScope o = null;
        XTree ORDER51_tree=null;
        XTree BY52_tree=null;
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_orderCondition=new RewriteRuleSubtreeStream(adaptor,"rule orderCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:295:2: ( ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:295:6: ORDER BY (o+= orderCondition )+
            {
            ORDER51=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause2135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDER.add(ORDER51);


            BY52=(Token)match(input,BY,FOLLOW_BY_in_orderClause2137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY52);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:295:16: (o+= orderCondition )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==ABS||LA41_0==ASC||LA41_0==BNODE||LA41_0==BOUND||LA41_0==CEIL||LA41_0==COALESCE||LA41_0==CONCAT||LA41_0==CONTAINS||(LA41_0 >= DATATYPE && LA41_0 <= DAY)||LA41_0==DESC||LA41_0==ENCODE_FOR_URI||LA41_0==EXISTS||LA41_0==FLOOR||LA41_0==HOURS||LA41_0==IF||LA41_0==IRI||(LA41_0 >= IRI_REF && LA41_0 <= ISURI)||(LA41_0 >= LANG && LA41_0 <= LANGMATCHES)||LA41_0==LCASE||LA41_0==MD5||LA41_0==MINUTES||LA41_0==MONTH||LA41_0==NOT||LA41_0==NOW||LA41_0==OPEN_BRACE||(LA41_0 >= PNAME_LN && LA41_0 <= PNAME_NS)||LA41_0==RAND||(LA41_0 >= REGEX && LA41_0 <= REPLACE)||LA41_0==ROUND||LA41_0==SAMETERM||LA41_0==SECONDS||(LA41_0 >= SHA1 && LA41_0 <= SHA512)||(LA41_0 >= STR && LA41_0 <= STRENDS)||(LA41_0 >= STRLANG && LA41_0 <= STRUUID)||LA41_0==SUBSTR||LA41_0==TIMEZONE||LA41_0==TZ||LA41_0==UCASE||LA41_0==URI||LA41_0==UUID||(LA41_0 >= VAR1 && LA41_0 <= VAR2)||LA41_0==YEAR) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:295:16: o+= orderCondition
            	    {
            	    pushFollow(FOLLOW_orderCondition_in_orderClause2141);
            	    o=orderCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderCondition.add(o.getTree());
            	    if (list_o==null) list_o=new ArrayList();
            	    list_o.add(o.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            // AST REWRITE
            // elements: o
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: o
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"token o",list_o);
            root_0 = (XTree)adaptor.nil();
            // 297:3: -> ^( ORDER_BY ( $o)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:297:7: ^( ORDER_BY ( $o)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ORDER_BY, "ORDER_BY")
                , root_1);

                if ( !(stream_o.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderClause"


    public static class orderCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:300:1: orderCondition : ( ( ( ASC ^| DESC ^) brackettedExpression ) | constraint | var );
    public final IbmSparqlExtParser.orderCondition_return orderCondition() throws RecognitionException {
        IbmSparqlExtParser.orderCondition_return retval = new IbmSparqlExtParser.orderCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ASC53=null;
        Token DESC54=null;
        IbmSparqlExtParser.brackettedExpression_return brackettedExpression55 =null;

        IbmSparqlExtParser.constraint_return constraint56 =null;

        IbmSparqlExtParser.var_return var57 =null;


        XTree ASC53_tree=null;
        XTree DESC54_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:2: ( ( ( ASC ^| DESC ^) brackettedExpression ) | constraint | var )
            int alt43=3;
            switch ( input.LA(1) ) {
            case ASC:
            case DESC:
                {
                alt43=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case IRI_REF:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case OPEN_BRACE:
            case PNAME_LN:
            case PNAME_NS:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt43=2;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt43=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:4: ( ( ASC ^| DESC ^) brackettedExpression )
                    {
                    root_0 = (XTree)adaptor.nil();


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:4: ( ( ASC ^| DESC ^) brackettedExpression )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:6: ( ASC ^| DESC ^) brackettedExpression
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:6: ( ASC ^| DESC ^)
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==ASC) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==DESC) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;

                    }
                    switch (alt42) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:8: ASC ^
                            {
                            ASC53=(Token)match(input,ASC,FOLLOW_ASC_in_orderCondition2177); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC53_tree = 
                            (XTree)adaptor.create(ASC53)
                            ;
                            root_0 = (XTree)adaptor.becomeRoot(ASC53_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:301:15: DESC ^
                            {
                            DESC54=(Token)match(input,DESC,FOLLOW_DESC_in_orderCondition2182); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC54_tree = 
                            (XTree)adaptor.create(DESC54)
                            ;
                            root_0 = (XTree)adaptor.becomeRoot(DESC54_tree, root_0);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition2187);
                    brackettedExpression55=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression55.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:302:4: constraint
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_constraint_in_orderCondition2194);
                    constraint56=constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint56.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:303:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_orderCondition2203);
                    var57=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var57.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderCondition"


    public static class limitOffsetClauses_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitOffsetClauses"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:306:1: limitOffsetClauses : ( limitClause ( offsetClause )? | offsetClause ( limitClause )? );
    public final IbmSparqlExtParser.limitOffsetClauses_return limitOffsetClauses() throws RecognitionException {
        IbmSparqlExtParser.limitOffsetClauses_return retval = new IbmSparqlExtParser.limitOffsetClauses_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.limitClause_return limitClause58 =null;

        IbmSparqlExtParser.offsetClause_return offsetClause59 =null;

        IbmSparqlExtParser.offsetClause_return offsetClause60 =null;

        IbmSparqlExtParser.limitClause_return limitClause61 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:2: ( limitClause ( offsetClause )? | offsetClause ( limitClause )? )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LIMIT) ) {
                alt46=1;
            }
            else if ( (LA46_0==OFFSET) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:6: limitClause ( offsetClause )?
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_limitClause_in_limitOffsetClauses2220);
                    limitClause58=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause58.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:18: ( offsetClause )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==OFFSET) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:18: offsetClause
                            {
                            pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses2222);
                            offsetClause59=offsetClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause59.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:34: offsetClause ( limitClause )?
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses2227);
                    offsetClause60=offsetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause60.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:47: ( limitClause )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==LIMIT) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:307:47: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_limitOffsetClauses2229);
                            limitClause61=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause61.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitOffsetClauses"


    public static class limitClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:310:1: limitClause : LIMIT i= INTEGER -> ^( LIMIT $i) ;
    public final IbmSparqlExtParser.limitClause_return limitClause() throws RecognitionException {
        IbmSparqlExtParser.limitClause_return retval = new IbmSparqlExtParser.limitClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        Token LIMIT62=null;

        XTree i_tree=null;
        XTree LIMIT62_tree=null;
        RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:311:2: ( LIMIT i= INTEGER -> ^( LIMIT $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:311:6: LIMIT i= INTEGER
            {
            LIMIT62=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause2247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT62);


            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limitClause2251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);


            // AST REWRITE
            // elements: LIMIT, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 311:24: -> ^( LIMIT $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:311:28: ^( LIMIT $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LIMIT.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitClause"


    public static class offsetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "offsetClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:314:1: offsetClause : OFFSET i= INTEGER -> ^( OFFSET $i) ;
    public final IbmSparqlExtParser.offsetClause_return offsetClause() throws RecognitionException {
        IbmSparqlExtParser.offsetClause_return retval = new IbmSparqlExtParser.offsetClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        Token OFFSET63=null;

        XTree i_tree=null;
        XTree OFFSET63_tree=null;
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:315:2: ( OFFSET i= INTEGER -> ^( OFFSET $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:315:6: OFFSET i= INTEGER
            {
            OFFSET63=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause2283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET63);


            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_offsetClause2287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);


            // AST REWRITE
            // elements: OFFSET, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 315:24: -> ^( OFFSET $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:315:28: ^( OFFSET $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_OFFSET.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "offsetClause"


    public static class bindingsClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bindingsClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:318:1: bindingsClause : ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData );
    public final IbmSparqlExtParser.bindingsClause_return bindingsClause() throws RecognitionException {
        IbmSparqlExtParser.bindingsClause_return retval = new IbmSparqlExtParser.bindingsClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BINDINGS64=null;
        Token OPEN_CURLY_BRACE65=null;
        Token OPEN_BRACE66=null;
        Token CLOSE_BRACE67=null;
        Token CLOSE_CURLY_BRACE69=null;
        List list_v=null;
        List list_bv=null;
        IbmSparqlExtParser.nil_return nil68 =null;

        IbmSparqlExtParser.inlineData_return inlineData70 =null;

        RuleReturnScope v = null;
        RuleReturnScope bv = null;
        XTree BINDINGS64_tree=null;
        XTree OPEN_CURLY_BRACE65_tree=null;
        XTree OPEN_BRACE66_tree=null;
        XTree CLOSE_BRACE67_tree=null;
        XTree CLOSE_CURLY_BRACE69_tree=null;
        RewriteRuleTokenStream stream_BINDINGS=new RewriteRuleTokenStream(adaptor,"token BINDINGS");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_bindingValue=new RewriteRuleSubtreeStream(adaptor,"rule bindingValue");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:2: ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==BINDINGS) ) {
                alt50=1;
            }
            else if ( (LA50_0==VALUES) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:6: BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE
                    {
                    BINDINGS64=(Token)match(input,BINDINGS,FOLLOW_BINDINGS_in_bindingsClause2318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINDINGS.add(BINDINGS64);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:16: (v+= var )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( ((LA47_0 >= VAR1 && LA47_0 <= VAR2)) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:16: v+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_bindingsClause2322);
                    	    v=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);


                    OPEN_CURLY_BRACE65=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause2325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE65);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:40: ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )*
                    loop49:
                    do {
                        int alt49=3;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==OPEN_BRACE) ) {
                            int LA49_2 = input.LA(2);

                            if ( (LA49_2==CLOSE_BRACE) ) {
                                alt49=2;
                            }
                            else if ( ((LA49_2 >= DECIMAL && LA49_2 <= DECIMAL_POSITIVE)||(LA49_2 >= DOUBLE && LA49_2 <= DOUBLE_POSITIVE)||LA49_2==FALSE||(LA49_2 >= INTEGER && LA49_2 <= INTEGER_POSITIVE)||LA49_2==IRI_REF||(LA49_2 >= PNAME_LN && LA49_2 <= PNAME_NS)||(LA49_2 >= STRING_LITERAL1 && LA49_2 <= STRING_LITERAL_LONG2)||LA49_2==TRUE||LA49_2==UNDEF) ) {
                                alt49=1;
                            }


                        }


                        switch (alt49) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:42: OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE
                    	    {
                    	    OPEN_BRACE66=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bindingsClause2329); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE66);


                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:55: (bv+= bindingValue )+
                    	    int cnt48=0;
                    	    loop48:
                    	    do {
                    	        int alt48=2;
                    	        int LA48_0 = input.LA(1);

                    	        if ( ((LA48_0 >= DECIMAL && LA48_0 <= DECIMAL_POSITIVE)||(LA48_0 >= DOUBLE && LA48_0 <= DOUBLE_POSITIVE)||LA48_0==FALSE||(LA48_0 >= INTEGER && LA48_0 <= INTEGER_POSITIVE)||LA48_0==IRI_REF||(LA48_0 >= PNAME_LN && LA48_0 <= PNAME_NS)||(LA48_0 >= STRING_LITERAL1 && LA48_0 <= STRING_LITERAL_LONG2)||LA48_0==TRUE||LA48_0==UNDEF) ) {
                    	            alt48=1;
                    	        }


                    	        switch (alt48) {
                    	    	case 1 :
                    	    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:55: bv+= bindingValue
                    	    	    {
                    	    	    pushFollow(FOLLOW_bindingValue_in_bindingsClause2333);
                    	    	    bv=bindingValue();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) stream_bindingValue.add(bv.getTree());
                    	    	    if (list_bv==null) list_bv=new ArrayList();
                    	    	    list_bv.add(bv.getTree());


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt48 >= 1 ) break loop48;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(48, input);
                    	                throw eee;
                    	        }
                    	        cnt48++;
                    	    } while (true);


                    	    CLOSE_BRACE67=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bindingsClause2336); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE67);


                    	    }
                    	    break;
                    	case 2 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:319:85: nil
                    	    {
                    	    pushFollow(FOLLOW_nil_in_bindingsClause2340);
                    	    nil68=nil();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nil.add(nil68.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);


                    CLOSE_CURLY_BRACE69=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause2345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE69);


                    // AST REWRITE
                    // elements: BINDINGS, nil, v, bv
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: bv, v
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_bv=new RewriteRuleSubtreeStream(adaptor,"token bv",list_bv);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
                    root_0 = (XTree)adaptor.nil();
                    // 321:3: -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:321:7: ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BINDINGS.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:321:21: ( $v)*
                        while ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:321:25: ^( BIND_VALUES ( $bv)* ( nil )? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIND_VALUES, "BIND_VALUES")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:321:40: ( $bv)*
                        while ( stream_bv.hasNext() ) {
                            adaptor.addChild(root_2, stream_bv.nextTree());

                        }
                        stream_bv.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:321:44: ( nil )?
                        if ( stream_nil.hasNext() ) {
                            adaptor.addChild(root_2, stream_nil.nextTree());

                        }
                        stream_nil.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:322:9: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineData_in_bindingsClause2385);
                    inlineData70=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData70.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bindingsClause"


    public static class bindingValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bindingValue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:325:1: bindingValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) ;
    public final IbmSparqlExtParser.bindingValue_return bindingValue() throws RecognitionException {
        IbmSparqlExtParser.bindingValue_return retval = new IbmSparqlExtParser.bindingValue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNDEF75=null;
        IbmSparqlExtParser.iRIref_return iRIref71 =null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral72 =null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral73 =null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral74 =null;


        XTree UNDEF75_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:2: ( ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt51=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt51=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt51=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt51=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt51=4;
                }
                break;
            case UNDEF:
                {
                alt51=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }

            switch (alt51) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:8: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_bindingValue2404);
                    iRIref71=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref71.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:17: rDFLiteral
                    {
                    pushFollow(FOLLOW_rDFLiteral_in_bindingValue2408);
                    rDFLiteral72=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral72.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:30: numericLiteral
                    {
                    pushFollow(FOLLOW_numericLiteral_in_bindingValue2412);
                    numericLiteral73=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral73.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:47: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_bindingValue2416);
                    booleanLiteral74=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral74.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:326:64: UNDEF
                    {
                    UNDEF75=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_bindingValue2420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF75_tree = 
                    (XTree)adaptor.create(UNDEF75)
                    ;
                    adaptor.addChild(root_0, UNDEF75_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bindingValue"


    public static class update_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:329:1: update : prologue ( update1 ( SEMICOLON update )? )? ;
    public final IbmSparqlExtParser.update_return update() throws RecognitionException {
        IbmSparqlExtParser.update_return retval = new IbmSparqlExtParser.update_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON78=null;
        IbmSparqlExtParser.prologue_return prologue76 =null;

        IbmSparqlExtParser.update1_return update177 =null;

        IbmSparqlExtParser.update_return update79 =null;


        XTree SEMICOLON78_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:2: ( prologue ( update1 ( SEMICOLON update )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:6: prologue ( update1 ( SEMICOLON update )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_prologue_in_update2439);
            prologue76=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologue76.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:15: ( update1 ( SEMICOLON update )? )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==ADD||LA53_0==CLEAR||LA53_0==COPY||LA53_0==CREATE||LA53_0==DELETE||LA53_0==DROP||LA53_0==INSERT||LA53_0==LOAD||LA53_0==MOVE||LA53_0==WITH) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:17: update1 ( SEMICOLON update )?
                    {
                    pushFollow(FOLLOW_update1_in_update2443);
                    update177=update1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update177.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:25: ( SEMICOLON update )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==SEMICOLON) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:330:27: SEMICOLON update
                            {
                            SEMICOLON78=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_update2447); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON78_tree = 
                            (XTree)adaptor.create(SEMICOLON78)
                            ;
                            adaptor.addChild(root_0, SEMICOLON78_tree);
                            }

                            pushFollow(FOLLOW_update_in_update2449);
                            update79=update();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update79.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update"


    public static class update1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update1"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:333:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );
    public final IbmSparqlExtParser.update1_return update1() throws RecognitionException {
        IbmSparqlExtParser.update1_return retval = new IbmSparqlExtParser.update1_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.load_return load80 =null;

        IbmSparqlExtParser.clear_return clear81 =null;

        IbmSparqlExtParser.drop_return drop82 =null;

        IbmSparqlExtParser.add_return add83 =null;

        IbmSparqlExtParser.move_return move84 =null;

        IbmSparqlExtParser.copy_return copy85 =null;

        IbmSparqlExtParser.create_return create86 =null;

        IbmSparqlExtParser.insertData_return insertData87 =null;

        IbmSparqlExtParser.deleteData_return deleteData88 =null;

        IbmSparqlExtParser.deleteWhere_return deleteWhere89 =null;

        IbmSparqlExtParser.modify_return modify90 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:2: ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify )
            int alt54=11;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt54=1;
                }
                break;
            case CLEAR:
                {
                alt54=2;
                }
                break;
            case DROP:
                {
                alt54=3;
                }
                break;
            case ADD:
                {
                alt54=4;
                }
                break;
            case MOVE:
                {
                alt54=5;
                }
                break;
            case COPY:
                {
                alt54=6;
                }
                break;
            case CREATE:
                {
                alt54=7;
                }
                break;
            case INSERT:
                {
                int LA54_8 = input.LA(2);

                if ( (LA54_8==DATA) ) {
                    alt54=8;
                }
                else if ( (LA54_8==OPEN_CURLY_BRACE) ) {
                    alt54=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 8, input);

                    throw nvae;

                }
                }
                break;
            case DELETE:
                {
                switch ( input.LA(2) ) {
                case DATA:
                    {
                    alt54=9;
                    }
                    break;
                case WHERE_TOKEN:
                    {
                    alt54=10;
                    }
                    break;
                case OPEN_CURLY_BRACE:
                    {
                    alt54=11;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 9, input);

                    throw nvae;

                }

                }
                break;
            case WITH:
                {
                alt54=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:6: load
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_load_in_update12472);
                    load80=load();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load80.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:13: clear
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_clear_in_update12476);
                    clear81=clear();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clear81.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:21: drop
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_drop_in_update12480);
                    drop82=drop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop82.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:28: add
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_add_in_update12484);
                    add83=add();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add83.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:34: move
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_move_in_update12488);
                    move84=move();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, move84.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:41: copy
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_copy_in_update12492);
                    copy85=copy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, copy85.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:48: create
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_create_in_update12496);
                    create86=create();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create86.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:57: insertData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_insertData_in_update12500);
                    insertData87=insertData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertData87.getTree());

                    }
                    break;
                case 9 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:70: deleteData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_deleteData_in_update12504);
                    deleteData88=deleteData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteData88.getTree());

                    }
                    break;
                case 10 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:83: deleteWhere
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_deleteWhere_in_update12508);
                    deleteWhere89=deleteWhere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteWhere89.getTree());

                    }
                    break;
                case 11 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:334:97: modify
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_modify_in_update12512);
                    modify90=modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modify90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update1"


    public static class load_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:337:1: load : LOAD ( SILENT )? iRIref ( INTO graphRef )? ;
    public final IbmSparqlExtParser.load_return load() throws RecognitionException {
        IbmSparqlExtParser.load_return retval = new IbmSparqlExtParser.load_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOAD91=null;
        Token SILENT92=null;
        Token INTO94=null;
        IbmSparqlExtParser.iRIref_return iRIref93 =null;

        IbmSparqlExtParser.graphRef_return graphRef95 =null;


        XTree LOAD91_tree=null;
        XTree SILENT92_tree=null;
        XTree INTO94_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:2: ( LOAD ( SILENT )? iRIref ( INTO graphRef )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:6: LOAD ( SILENT )? iRIref ( INTO graphRef )?
            {
            root_0 = (XTree)adaptor.nil();


            LOAD91=(Token)match(input,LOAD,FOLLOW_LOAD_in_load2529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD91_tree = 
            (XTree)adaptor.create(LOAD91)
            ;
            adaptor.addChild(root_0, LOAD91_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:11: ( SILENT )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SILENT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:11: SILENT
                    {
                    SILENT92=(Token)match(input,SILENT,FOLLOW_SILENT_in_load2531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT92_tree = 
                    (XTree)adaptor.create(SILENT92)
                    ;
                    adaptor.addChild(root_0, SILENT92_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_iRIref_in_load2534);
            iRIref93=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref93.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:26: ( INTO graphRef )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==INTO) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:338:28: INTO graphRef
                    {
                    INTO94=(Token)match(input,INTO,FOLLOW_INTO_in_load2538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO94_tree = 
                    (XTree)adaptor.create(INTO94)
                    ;
                    adaptor.addChild(root_0, INTO94_tree);
                    }

                    pushFollow(FOLLOW_graphRef_in_load2540);
                    graphRef95=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef95.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load"


    public static class clear_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clear"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:341:1: clear : CLEAR ( SILENT )? graphRefAll ;
    public final IbmSparqlExtParser.clear_return clear() throws RecognitionException {
        IbmSparqlExtParser.clear_return retval = new IbmSparqlExtParser.clear_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CLEAR96=null;
        Token SILENT97=null;
        IbmSparqlExtParser.graphRefAll_return graphRefAll98 =null;


        XTree CLEAR96_tree=null;
        XTree SILENT97_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:342:2: ( CLEAR ( SILENT )? graphRefAll )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:342:6: CLEAR ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();


            CLEAR96=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_clear2560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLEAR96_tree = 
            (XTree)adaptor.create(CLEAR96)
            ;
            adaptor.addChild(root_0, CLEAR96_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:342:12: ( SILENT )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==SILENT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:342:12: SILENT
                    {
                    SILENT97=(Token)match(input,SILENT,FOLLOW_SILENT_in_clear2562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT97_tree = 
                    (XTree)adaptor.create(SILENT97)
                    ;
                    adaptor.addChild(root_0, SILENT97_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRefAll_in_clear2565);
            graphRefAll98=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll98.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clear"


    public static class drop_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:345:1: drop : DROP ( SILENT )? graphRefAll ;
    public final IbmSparqlExtParser.drop_return drop() throws RecognitionException {
        IbmSparqlExtParser.drop_return retval = new IbmSparqlExtParser.drop_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DROP99=null;
        Token SILENT100=null;
        IbmSparqlExtParser.graphRefAll_return graphRefAll101 =null;


        XTree DROP99_tree=null;
        XTree SILENT100_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:346:2: ( DROP ( SILENT )? graphRefAll )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:346:6: DROP ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();


            DROP99=(Token)match(input,DROP,FOLLOW_DROP_in_drop2582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DROP99_tree = 
            (XTree)adaptor.create(DROP99)
            ;
            adaptor.addChild(root_0, DROP99_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:346:11: ( SILENT )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SILENT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:346:11: SILENT
                    {
                    SILENT100=(Token)match(input,SILENT,FOLLOW_SILENT_in_drop2584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT100_tree = 
                    (XTree)adaptor.create(SILENT100)
                    ;
                    adaptor.addChild(root_0, SILENT100_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRefAll_in_drop2587);
            graphRefAll101=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll101.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop"


    public static class create_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:349:1: create : CREATE ( SILENT )? graphRef ;
    public final IbmSparqlExtParser.create_return create() throws RecognitionException {
        IbmSparqlExtParser.create_return retval = new IbmSparqlExtParser.create_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CREATE102=null;
        Token SILENT103=null;
        IbmSparqlExtParser.graphRef_return graphRef104 =null;


        XTree CREATE102_tree=null;
        XTree SILENT103_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:350:2: ( CREATE ( SILENT )? graphRef )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:350:6: CREATE ( SILENT )? graphRef
            {
            root_0 = (XTree)adaptor.nil();


            CREATE102=(Token)match(input,CREATE,FOLLOW_CREATE_in_create2604); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE102_tree = 
            (XTree)adaptor.create(CREATE102)
            ;
            adaptor.addChild(root_0, CREATE102_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:350:13: ( SILENT )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==SILENT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:350:13: SILENT
                    {
                    SILENT103=(Token)match(input,SILENT,FOLLOW_SILENT_in_create2606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT103_tree = 
                    (XTree)adaptor.create(SILENT103)
                    ;
                    adaptor.addChild(root_0, SILENT103_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRef_in_create2609);
            graphRef104=graphRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef104.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create"


    public static class add_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:353:1: add : ADD ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.add_return add() throws RecognitionException {
        IbmSparqlExtParser.add_return retval = new IbmSparqlExtParser.add_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ADD105=null;
        Token SILENT106=null;
        Token TO108=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault107 =null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault109 =null;


        XTree ADD105_tree=null;
        XTree SILENT106_tree=null;
        XTree TO108_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:354:2: ( ADD ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:354:6: ADD ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            ADD105=(Token)match(input,ADD,FOLLOW_ADD_in_add2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADD105_tree = 
            (XTree)adaptor.create(ADD105)
            ;
            adaptor.addChild(root_0, ADD105_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:354:10: ( SILENT )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==SILENT) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:354:10: SILENT
                    {
                    SILENT106=(Token)match(input,SILENT,FOLLOW_SILENT_in_add2628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT106_tree = 
                    (XTree)adaptor.create(SILENT106)
                    ;
                    adaptor.addChild(root_0, SILENT106_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_add2631);
            graphOrDefault107=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault107.getTree());

            TO108=(Token)match(input,TO,FOLLOW_TO_in_add2633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO108_tree = 
            (XTree)adaptor.create(TO108)
            ;
            adaptor.addChild(root_0, TO108_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_add2635);
            graphOrDefault109=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault109.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add"


    public static class move_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "move"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:357:1: move : MOVE ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.move_return move() throws RecognitionException {
        IbmSparqlExtParser.move_return retval = new IbmSparqlExtParser.move_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token MOVE110=null;
        Token SILENT111=null;
        Token TO113=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault112 =null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault114 =null;


        XTree MOVE110_tree=null;
        XTree SILENT111_tree=null;
        XTree TO113_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:358:2: ( MOVE ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:358:6: MOVE ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            MOVE110=(Token)match(input,MOVE,FOLLOW_MOVE_in_move2652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MOVE110_tree = 
            (XTree)adaptor.create(MOVE110)
            ;
            adaptor.addChild(root_0, MOVE110_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:358:11: ( SILENT )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==SILENT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:358:11: SILENT
                    {
                    SILENT111=(Token)match(input,SILENT,FOLLOW_SILENT_in_move2654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT111_tree = 
                    (XTree)adaptor.create(SILENT111)
                    ;
                    adaptor.addChild(root_0, SILENT111_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_move2657);
            graphOrDefault112=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault112.getTree());

            TO113=(Token)match(input,TO,FOLLOW_TO_in_move2659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO113_tree = 
            (XTree)adaptor.create(TO113)
            ;
            adaptor.addChild(root_0, TO113_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_move2661);
            graphOrDefault114=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault114.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "move"


    public static class copy_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "copy"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:361:1: copy : COPY ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.copy_return copy() throws RecognitionException {
        IbmSparqlExtParser.copy_return retval = new IbmSparqlExtParser.copy_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COPY115=null;
        Token SILENT116=null;
        Token TO118=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault117 =null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault119 =null;


        XTree COPY115_tree=null;
        XTree SILENT116_tree=null;
        XTree TO118_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:362:2: ( COPY ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:362:6: COPY ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            COPY115=(Token)match(input,COPY,FOLLOW_COPY_in_copy2678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COPY115_tree = 
            (XTree)adaptor.create(COPY115)
            ;
            adaptor.addChild(root_0, COPY115_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:362:11: ( SILENT )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==SILENT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:362:11: SILENT
                    {
                    SILENT116=(Token)match(input,SILENT,FOLLOW_SILENT_in_copy2680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT116_tree = 
                    (XTree)adaptor.create(SILENT116)
                    ;
                    adaptor.addChild(root_0, SILENT116_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_copy2683);
            graphOrDefault117=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault117.getTree());

            TO118=(Token)match(input,TO,FOLLOW_TO_in_copy2685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO118_tree = 
            (XTree)adaptor.create(TO118)
            ;
            adaptor.addChild(root_0, TO118_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_copy2687);
            graphOrDefault119=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault119.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "copy"


    public static class insertData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:365:1: insertData : INSERT DATA quadData ;
    public final IbmSparqlExtParser.insertData_return insertData() throws RecognitionException {
        IbmSparqlExtParser.insertData_return retval = new IbmSparqlExtParser.insertData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INSERT120=null;
        Token DATA121=null;
        IbmSparqlExtParser.quadData_return quadData122 =null;


        XTree INSERT120_tree=null;
        XTree DATA121_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:366:2: ( INSERT DATA quadData )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:366:6: INSERT DATA quadData
            {
            root_0 = (XTree)adaptor.nil();


            INSERT120=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertData2704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT120_tree = 
            (XTree)adaptor.create(INSERT120)
            ;
            adaptor.addChild(root_0, INSERT120_tree);
            }

            DATA121=(Token)match(input,DATA,FOLLOW_DATA_in_insertData2706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA121_tree = 
            (XTree)adaptor.create(DATA121)
            ;
            adaptor.addChild(root_0, DATA121_tree);
            }

            pushFollow(FOLLOW_quadData_in_insertData2708);
            quadData122=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData122.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertData"


    public static class deleteData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:369:1: deleteData : DELETE DATA quadData ;
    public final IbmSparqlExtParser.deleteData_return deleteData() throws RecognitionException {
        IbmSparqlExtParser.deleteData_return retval = new IbmSparqlExtParser.deleteData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE123=null;
        Token DATA124=null;
        IbmSparqlExtParser.quadData_return quadData125 =null;


        XTree DELETE123_tree=null;
        XTree DATA124_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:370:2: ( DELETE DATA quadData )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:370:6: DELETE DATA quadData
            {
            root_0 = (XTree)adaptor.nil();


            DELETE123=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteData2724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE123_tree = 
            (XTree)adaptor.create(DELETE123)
            ;
            adaptor.addChild(root_0, DELETE123_tree);
            }

            DATA124=(Token)match(input,DATA,FOLLOW_DATA_in_deleteData2726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA124_tree = 
            (XTree)adaptor.create(DATA124)
            ;
            adaptor.addChild(root_0, DATA124_tree);
            }

            pushFollow(FOLLOW_quadData_in_deleteData2728);
            quadData125=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData125.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteData"


    public static class deleteWhere_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteWhere"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:373:1: deleteWhere : DELETE WHERE_TOKEN quadPattern ;
    public final IbmSparqlExtParser.deleteWhere_return deleteWhere() throws RecognitionException {
        IbmSparqlExtParser.deleteWhere_return retval = new IbmSparqlExtParser.deleteWhere_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE126=null;
        Token WHERE_TOKEN127=null;
        IbmSparqlExtParser.quadPattern_return quadPattern128 =null;


        XTree DELETE126_tree=null;
        XTree WHERE_TOKEN127_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:374:2: ( DELETE WHERE_TOKEN quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:374:6: DELETE WHERE_TOKEN quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            DELETE126=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteWhere2745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE126_tree = 
            (XTree)adaptor.create(DELETE126)
            ;
            adaptor.addChild(root_0, DELETE126_tree);
            }

            WHERE_TOKEN127=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_deleteWhere2747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN127_tree = 
            (XTree)adaptor.create(WHERE_TOKEN127)
            ;
            adaptor.addChild(root_0, WHERE_TOKEN127_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_deleteWhere2749);
            quadPattern128=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern128.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteWhere"


    public static class modify_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modify"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:377:1: modify : ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern ;
    public final IbmSparqlExtParser.modify_return modify() throws RecognitionException {
        IbmSparqlExtParser.modify_return retval = new IbmSparqlExtParser.modify_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token WITH129=null;
        Token WHERE_TOKEN135=null;
        IbmSparqlExtParser.iRIref_return iRIref130 =null;

        IbmSparqlExtParser.deleteClause_return deleteClause131 =null;

        IbmSparqlExtParser.insertClause_return insertClause132 =null;

        IbmSparqlExtParser.insertClause_return insertClause133 =null;

        IbmSparqlExtParser.usingClause_return usingClause134 =null;

        IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern136 =null;


        XTree WITH129_tree=null;
        XTree WHERE_TOKEN135_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:2: ( ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:6: ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:6: ( WITH iRIref )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==WITH) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:8: WITH iRIref
                    {
                    WITH129=(Token)match(input,WITH,FOLLOW_WITH_in_modify2768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH129_tree = 
                    (XTree)adaptor.create(WITH129)
                    ;
                    adaptor.addChild(root_0, WITH129_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_modify2770);
                    iRIref130=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref130.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:23: ( deleteClause ( insertClause )? | insertClause )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DELETE) ) {
                alt65=1;
            }
            else if ( (LA65_0==INSERT) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:25: deleteClause ( insertClause )?
                    {
                    pushFollow(FOLLOW_deleteClause_in_modify2777);
                    deleteClause131=deleteClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteClause131.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:38: ( insertClause )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==INSERT) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:38: insertClause
                            {
                            pushFollow(FOLLOW_insertClause_in_modify2779);
                            insertClause132=insertClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause132.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:54: insertClause
                    {
                    pushFollow(FOLLOW_insertClause_in_modify2784);
                    insertClause133=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause133.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:69: ( usingClause )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==USING) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:378:69: usingClause
            	    {
            	    pushFollow(FOLLOW_usingClause_in_modify2788);
            	    usingClause134=usingClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, usingClause134.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            WHERE_TOKEN135=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_modify2791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN135_tree = 
            (XTree)adaptor.create(WHERE_TOKEN135)
            ;
            adaptor.addChild(root_0, WHERE_TOKEN135_tree);
            }

            pushFollow(FOLLOW_groupGraphPattern_in_modify2793);
            groupGraphPattern136=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, groupGraphPattern136.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "modify"


    public static class deleteClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:381:1: deleteClause : DELETE quadPattern ;
    public final IbmSparqlExtParser.deleteClause_return deleteClause() throws RecognitionException {
        IbmSparqlExtParser.deleteClause_return retval = new IbmSparqlExtParser.deleteClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE137=null;
        IbmSparqlExtParser.quadPattern_return quadPattern138 =null;


        XTree DELETE137_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:382:2: ( DELETE quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:382:6: DELETE quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            DELETE137=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteClause2809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE137_tree = 
            (XTree)adaptor.create(DELETE137)
            ;
            adaptor.addChild(root_0, DELETE137_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_deleteClause2811);
            quadPattern138=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern138.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteClause"


    public static class insertClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:385:1: insertClause : INSERT quadPattern ;
    public final IbmSparqlExtParser.insertClause_return insertClause() throws RecognitionException {
        IbmSparqlExtParser.insertClause_return retval = new IbmSparqlExtParser.insertClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INSERT139=null;
        IbmSparqlExtParser.quadPattern_return quadPattern140 =null;


        XTree INSERT139_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:386:2: ( INSERT quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:386:6: INSERT quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            INSERT139=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertClause2828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT139_tree = 
            (XTree)adaptor.create(INSERT139)
            ;
            adaptor.addChild(root_0, INSERT139_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_insertClause2830);
            quadPattern140=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern140.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertClause"


    public static class usingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "usingClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:389:1: usingClause : USING ( iRIref | NAMED iRIref ) ;
    public final IbmSparqlExtParser.usingClause_return usingClause() throws RecognitionException {
        IbmSparqlExtParser.usingClause_return retval = new IbmSparqlExtParser.usingClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token USING141=null;
        Token NAMED143=null;
        IbmSparqlExtParser.iRIref_return iRIref142 =null;

        IbmSparqlExtParser.iRIref_return iRIref144 =null;


        XTree USING141_tree=null;
        XTree NAMED143_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:390:2: ( USING ( iRIref | NAMED iRIref ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:390:6: USING ( iRIref | NAMED iRIref )
            {
            root_0 = (XTree)adaptor.nil();


            USING141=(Token)match(input,USING,FOLLOW_USING_in_usingClause2847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING141_tree = 
            (XTree)adaptor.create(USING141)
            ;
            adaptor.addChild(root_0, USING141_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:390:12: ( iRIref | NAMED iRIref )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==IRI_REF||(LA67_0 >= PNAME_LN && LA67_0 <= PNAME_NS)) ) {
                alt67=1;
            }
            else if ( (LA67_0==NAMED) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:390:14: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_usingClause2851);
                    iRIref142=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref142.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:390:23: NAMED iRIref
                    {
                    NAMED143=(Token)match(input,NAMED,FOLLOW_NAMED_in_usingClause2855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED143_tree = 
                    (XTree)adaptor.create(NAMED143)
                    ;
                    adaptor.addChild(root_0, NAMED143_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_usingClause2857);
                    iRIref144=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref144.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "usingClause"


    public static class graphOrDefault_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphOrDefault"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:393:1: graphOrDefault : ( DEFAULT | ( GRAPH )? iRIref );
    public final IbmSparqlExtParser.graphOrDefault_return graphOrDefault() throws RecognitionException {
        IbmSparqlExtParser.graphOrDefault_return retval = new IbmSparqlExtParser.graphOrDefault_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DEFAULT145=null;
        Token GRAPH146=null;
        IbmSparqlExtParser.iRIref_return iRIref147 =null;


        XTree DEFAULT145_tree=null;
        XTree GRAPH146_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:394:2: ( DEFAULT | ( GRAPH )? iRIref )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==DEFAULT) ) {
                alt69=1;
            }
            else if ( (LA69_0==GRAPH||LA69_0==IRI_REF||(LA69_0 >= PNAME_LN && LA69_0 <= PNAME_NS)) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:394:6: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();


                    DEFAULT145=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphOrDefault2876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT145_tree = 
                    (XTree)adaptor.create(DEFAULT145)
                    ;
                    adaptor.addChild(root_0, DEFAULT145_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:394:16: ( GRAPH )? iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:394:16: ( GRAPH )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==GRAPH) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:394:16: GRAPH
                            {
                            GRAPH146=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphOrDefault2880); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GRAPH146_tree = 
                            (XTree)adaptor.create(GRAPH146)
                            ;
                            adaptor.addChild(root_0, GRAPH146_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_iRIref_in_graphOrDefault2883);
                    iRIref147=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref147.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphOrDefault"


    public static class graphRef_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphRef"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:397:1: graphRef : GRAPH iRIref ;
    public final IbmSparqlExtParser.graphRef_return graphRef() throws RecognitionException {
        IbmSparqlExtParser.graphRef_return retval = new IbmSparqlExtParser.graphRef_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH148=null;
        IbmSparqlExtParser.iRIref_return iRIref149 =null;


        XTree GRAPH148_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:398:2: ( GRAPH iRIref )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:398:6: GRAPH iRIref
            {
            root_0 = (XTree)adaptor.nil();


            GRAPH148=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphRef2900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH148_tree = 
            (XTree)adaptor.create(GRAPH148)
            ;
            adaptor.addChild(root_0, GRAPH148_tree);
            }

            pushFollow(FOLLOW_iRIref_in_graphRef2902);
            iRIref149=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref149.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphRef"


    public static class graphRefAll_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphRefAll"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:401:1: graphRefAll : ( graphRef | DEFAULT | NAMED | ALL );
    public final IbmSparqlExtParser.graphRefAll_return graphRefAll() throws RecognitionException {
        IbmSparqlExtParser.graphRefAll_return retval = new IbmSparqlExtParser.graphRefAll_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DEFAULT151=null;
        Token NAMED152=null;
        Token ALL153=null;
        IbmSparqlExtParser.graphRef_return graphRef150 =null;


        XTree DEFAULT151_tree=null;
        XTree NAMED152_tree=null;
        XTree ALL153_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:402:2: ( graphRef | DEFAULT | NAMED | ALL )
            int alt70=4;
            switch ( input.LA(1) ) {
            case GRAPH:
                {
                alt70=1;
                }
                break;
            case DEFAULT:
                {
                alt70=2;
                }
                break;
            case NAMED:
                {
                alt70=3;
                }
                break;
            case ALL:
                {
                alt70=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }

            switch (alt70) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:402:7: graphRef
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphRef_in_graphRefAll2916);
                    graphRef150=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef150.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:402:18: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();


                    DEFAULT151=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphRefAll2920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT151_tree = 
                    (XTree)adaptor.create(DEFAULT151)
                    ;
                    adaptor.addChild(root_0, DEFAULT151_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:402:28: NAMED
                    {
                    root_0 = (XTree)adaptor.nil();


                    NAMED152=(Token)match(input,NAMED,FOLLOW_NAMED_in_graphRefAll2924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED152_tree = 
                    (XTree)adaptor.create(NAMED152)
                    ;
                    adaptor.addChild(root_0, NAMED152_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:402:36: ALL
                    {
                    root_0 = (XTree)adaptor.nil();


                    ALL153=(Token)match(input,ALL,FOLLOW_ALL_in_graphRefAll2928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL153_tree = 
                    (XTree)adaptor.create(ALL153)
                    ;
                    adaptor.addChild(root_0, ALL153_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphRefAll"


    public static class quadPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:405:1: quadPattern : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadPattern_return quadPattern() throws RecognitionException {
        IbmSparqlExtParser.quadPattern_return retval = new IbmSparqlExtParser.quadPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE154=null;
        Token CLOSE_CURLY_BRACE156=null;
        IbmSparqlExtParser.quads_return quads155 =null;


        XTree OPEN_CURLY_BRACE154_tree=null;
        XTree CLOSE_CURLY_BRACE156_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:406:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:406:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE154=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE154_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE154)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE154_tree);
            }

            pushFollow(FOLLOW_quads_in_quadPattern2944);
            quads155=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads155.getTree());

            CLOSE_CURLY_BRACE156=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE156_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE156)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE156_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadPattern"


    public static class quadData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:409:1: quadData : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadData_return quadData() throws RecognitionException {
        IbmSparqlExtParser.quadData_return retval = new IbmSparqlExtParser.quadData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE157=null;
        Token CLOSE_CURLY_BRACE159=null;
        IbmSparqlExtParser.quads_return quads158 =null;


        XTree OPEN_CURLY_BRACE157_tree=null;
        XTree CLOSE_CURLY_BRACE159_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:410:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:410:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE157=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadData2960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE157_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE157)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE157_tree);
            }

            pushFollow(FOLLOW_quads_in_quadData2962);
            quads158=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads158.getTree());

            CLOSE_CURLY_BRACE159=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadData2964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE159_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE159)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE159_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadData"


    public static class quads_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quads"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:413:1: quads : ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* ;
    public final IbmSparqlExtParser.quads_return quads() throws RecognitionException {
        IbmSparqlExtParser.quads_return retval = new IbmSparqlExtParser.quads_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT162=null;
        IbmSparqlExtParser.triplesTemplate_return triplesTemplate160 =null;

        IbmSparqlExtParser.quadsNotTriples_return quadsNotTriples161 =null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate163 =null;


        XTree DOT162_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:2: ( ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:7: ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:7: ( triplesTemplate )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==BLANK_NODE_LABEL||(LA71_0 >= DECIMAL && LA71_0 <= DECIMAL_POSITIVE)||(LA71_0 >= DOUBLE && LA71_0 <= DOUBLE_POSITIVE)||LA71_0==FALSE||(LA71_0 >= INTEGER && LA71_0 <= INTEGER_POSITIVE)||LA71_0==IRI_REF||LA71_0==OPEN_BRACE||LA71_0==OPEN_SQ_BRACKET||(LA71_0 >= PNAME_LN && LA71_0 <= PNAME_NS)||(LA71_0 >= STRING_LITERAL1 && LA71_0 <= STRING_LITERAL_LONG2)||LA71_0==TRUE||(LA71_0 >= VAR1 && LA71_0 <= VAR2)) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:7: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quads2978);
                    triplesTemplate160=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate160.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:24: ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==GRAPH) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:26: quadsNotTriples ( DOT )? ( triplesTemplate )?
            	    {
            	    pushFollow(FOLLOW_quadsNotTriples_in_quads2983);
            	    quadsNotTriples161=quadsNotTriples();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quadsNotTriples161.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:42: ( DOT )?
            	    int alt72=2;
            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0==DOT) ) {
            	        alt72=1;
            	    }
            	    switch (alt72) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:42: DOT
            	            {
            	            DOT162=(Token)match(input,DOT,FOLLOW_DOT_in_quads2985); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOT162_tree = 
            	            (XTree)adaptor.create(DOT162)
            	            ;
            	            adaptor.addChild(root_0, DOT162_tree);
            	            }

            	            }
            	            break;

            	    }


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:47: ( triplesTemplate )?
            	    int alt73=2;
            	    int LA73_0 = input.LA(1);

            	    if ( (LA73_0==BLANK_NODE_LABEL||(LA73_0 >= DECIMAL && LA73_0 <= DECIMAL_POSITIVE)||(LA73_0 >= DOUBLE && LA73_0 <= DOUBLE_POSITIVE)||LA73_0==FALSE||(LA73_0 >= INTEGER && LA73_0 <= INTEGER_POSITIVE)||LA73_0==IRI_REF||LA73_0==OPEN_BRACE||LA73_0==OPEN_SQ_BRACKET||(LA73_0 >= PNAME_LN && LA73_0 <= PNAME_NS)||(LA73_0 >= STRING_LITERAL1 && LA73_0 <= STRING_LITERAL_LONG2)||LA73_0==TRUE||(LA73_0 >= VAR1 && LA73_0 <= VAR2)) ) {
            	        alt73=1;
            	    }
            	    switch (alt73) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:414:47: triplesTemplate
            	            {
            	            pushFollow(FOLLOW_triplesTemplate_in_quads2988);
            	            triplesTemplate163=triplesTemplate();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate163.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quads"


    public static class quadsNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadsNotTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:417:1: quadsNotTriples : GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadsNotTriples_return quadsNotTriples() throws RecognitionException {
        IbmSparqlExtParser.quadsNotTriples_return retval = new IbmSparqlExtParser.quadsNotTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH164=null;
        Token OPEN_CURLY_BRACE166=null;
        Token CLOSE_CURLY_BRACE168=null;
        IbmSparqlExtParser.varOrIRIref_return varOrIRIref165 =null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate167 =null;


        XTree GRAPH164_tree=null;
        XTree OPEN_CURLY_BRACE166_tree=null;
        XTree CLOSE_CURLY_BRACE168_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:418:2: ( GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:418:7: GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            GRAPH164=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_quadsNotTriples3006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH164_tree = 
            (XTree)adaptor.create(GRAPH164)
            ;
            adaptor.addChild(root_0, GRAPH164_tree);
            }

            pushFollow(FOLLOW_varOrIRIref_in_quadsNotTriples3008);
            varOrIRIref165=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrIRIref165.getTree());

            OPEN_CURLY_BRACE166=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples3010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE166_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE166)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE166_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:418:42: ( triplesTemplate )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==BLANK_NODE_LABEL||(LA75_0 >= DECIMAL && LA75_0 <= DECIMAL_POSITIVE)||(LA75_0 >= DOUBLE && LA75_0 <= DOUBLE_POSITIVE)||LA75_0==FALSE||(LA75_0 >= INTEGER && LA75_0 <= INTEGER_POSITIVE)||LA75_0==IRI_REF||LA75_0==OPEN_BRACE||LA75_0==OPEN_SQ_BRACKET||(LA75_0 >= PNAME_LN && LA75_0 <= PNAME_NS)||(LA75_0 >= STRING_LITERAL1 && LA75_0 <= STRING_LITERAL_LONG2)||LA75_0==TRUE||(LA75_0 >= VAR1 && LA75_0 <= VAR2)) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:418:42: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quadsNotTriples3012);
                    triplesTemplate167=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate167.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE168=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples3015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE168_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE168)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE168_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadsNotTriples"


    public static class triplesTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesTemplate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:421:1: triplesTemplate : triplesSameSubject ( DOT ( triplesTemplate )? )? ;
    public final IbmSparqlExtParser.triplesTemplate_return triplesTemplate() throws RecognitionException {
        IbmSparqlExtParser.triplesTemplate_return retval = new IbmSparqlExtParser.triplesTemplate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT170=null;
        IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject169 =null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate171 =null;


        XTree DOT170_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:2: ( triplesSameSubject ( DOT ( triplesTemplate )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:7: triplesSameSubject ( DOT ( triplesTemplate )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate3029);
            triplesSameSubject169=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject169.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:26: ( DOT ( triplesTemplate )? )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==DOT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:28: DOT ( triplesTemplate )?
                    {
                    DOT170=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate3033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT170_tree = 
                    (XTree)adaptor.create(DOT170)
                    ;
                    adaptor.addChild(root_0, DOT170_tree);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:32: ( triplesTemplate )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==BLANK_NODE_LABEL||(LA76_0 >= DECIMAL && LA76_0 <= DECIMAL_POSITIVE)||(LA76_0 >= DOUBLE && LA76_0 <= DOUBLE_POSITIVE)||LA76_0==FALSE||(LA76_0 >= INTEGER && LA76_0 <= INTEGER_POSITIVE)||LA76_0==IRI_REF||LA76_0==OPEN_BRACE||LA76_0==OPEN_SQ_BRACKET||(LA76_0 >= PNAME_LN && LA76_0 <= PNAME_NS)||(LA76_0 >= STRING_LITERAL1 && LA76_0 <= STRING_LITERAL_LONG2)||LA76_0==TRUE||(LA76_0 >= VAR1 && LA76_0 <= VAR2)) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:422:32: triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_triplesTemplate3035);
                            triplesTemplate171=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate171.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesTemplate"


    public static class groupGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:425:1: groupGraphPattern : OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) ;
    public final IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPattern_return retval = new IbmSparqlExtParser.groupGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE172=null;
        Token CLOSE_CURLY_BRACE173=null;
        IbmSparqlExtParser.subSelect_return s =null;

        IbmSparqlExtParser.groupGraphPatternSub_return g =null;


        XTree OPEN_CURLY_BRACE172_tree=null;
        XTree CLOSE_CURLY_BRACE173_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_subSelect=new RewriteRuleSubtreeStream(adaptor,"rule subSelect");
        RewriteRuleSubtreeStream stream_groupGraphPatternSub=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSub");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:426:2: ( OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:426:7: OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE
            {
            OPEN_CURLY_BRACE172=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern3053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE172);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:426:24: (s= subSelect |g= groupGraphPatternSub )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==SELECT) ) {
                alt78=1;
            }
            else if ( (LA78_0==BIND||LA78_0==BLANK_NODE_LABEL||LA78_0==CLOSE_CURLY_BRACE||(LA78_0 >= DECIMAL && LA78_0 <= DECIMAL_POSITIVE)||(LA78_0 >= DOUBLE && LA78_0 <= DOUBLE_POSITIVE)||(LA78_0 >= FALSE && LA78_0 <= FILTER)||LA78_0==GRAPH||(LA78_0 >= INTEGER && LA78_0 <= INTEGER_POSITIVE)||LA78_0==IRI_REF||LA78_0==MINUS||(LA78_0 >= OPEN_BRACE && LA78_0 <= OPTIONAL)||(LA78_0 >= PNAME_LN && LA78_0 <= PNAME_NS)||LA78_0==SERVICE||(LA78_0 >= STRING_LITERAL1 && LA78_0 <= STRING_LITERAL_LONG2)||LA78_0==TRUE||LA78_0==VALUES||(LA78_0 >= VAR1 && LA78_0 <= VAR2)) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:426:26: s= subSelect
                    {
                    pushFollow(FOLLOW_subSelect_in_groupGraphPattern3059);
                    s=subSelect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelect.add(s.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:426:40: g= groupGraphPatternSub
                    {
                    pushFollow(FOLLOW_groupGraphPatternSub_in_groupGraphPattern3065);
                    g=groupGraphPatternSub();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPatternSub.add(g.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE173=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern3069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE173);


            // AST REWRITE
            // elements: subSelect, groupGraphPatternSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 428:3: -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:428:7: ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:428:30: ( subSelect )?
                if ( stream_subSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelect.nextTree());

                }
                stream_subSelect.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:428:41: ( groupGraphPatternSub )?
                if ( stream_groupGraphPatternSub.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupGraphPatternSub.nextTree());

                }
                stream_groupGraphPatternSub.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPattern"


    public static class groupGraphPatternSub_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPatternSub"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:431:1: groupGraphPatternSub : ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* ;
    public final IbmSparqlExtParser.groupGraphPatternSub_return groupGraphPatternSub() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPatternSub_return retval = new IbmSparqlExtParser.groupGraphPatternSub_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.triplesBlock_return triplesBlock174 =null;

        IbmSparqlExtParser.groupGraphPatternSubInt_return groupGraphPatternSubInt175 =null;


        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_groupGraphPatternSubInt=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSubInt");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:2: ( ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:7: ( triplesBlock )? ( groupGraphPatternSubInt )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:7: ( triplesBlock )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==BLANK_NODE_LABEL||(LA79_0 >= DECIMAL && LA79_0 <= DECIMAL_POSITIVE)||(LA79_0 >= DOUBLE && LA79_0 <= DOUBLE_POSITIVE)||LA79_0==FALSE||(LA79_0 >= INTEGER && LA79_0 <= INTEGER_POSITIVE)||LA79_0==IRI_REF||LA79_0==OPEN_BRACE||LA79_0==OPEN_SQ_BRACKET||(LA79_0 >= PNAME_LN && LA79_0 <= PNAME_NS)||(LA79_0 >= STRING_LITERAL1 && LA79_0 <= STRING_LITERAL_LONG2)||LA79_0==TRUE||(LA79_0 >= VAR1 && LA79_0 <= VAR2)) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:7: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSub3103);
                    triplesBlock174=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock174.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:21: ( groupGraphPatternSubInt )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==BIND||LA80_0==FILTER||LA80_0==GRAPH||LA80_0==MINUS||LA80_0==OPEN_CURLY_BRACE||LA80_0==OPTIONAL||LA80_0==SERVICE||LA80_0==VALUES) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:432:21: groupGraphPatternSubInt
            	    {
            	    pushFollow(FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub3106);
            	    groupGraphPatternSubInt175=groupGraphPatternSubInt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupGraphPatternSubInt.add(groupGraphPatternSubInt175.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            // AST REWRITE
            // elements: triplesBlock, groupGraphPatternSubInt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 433:3: -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )*
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:433:7: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:433:7: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK")
                    , root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:433:38: ( groupGraphPatternSubInt )*
                while ( stream_groupGraphPatternSubInt.hasNext() ) {
                    adaptor.addChild(root_0, stream_groupGraphPatternSubInt.nextTree());

                }
                stream_groupGraphPatternSubInt.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSub"


    public static class groupGraphPatternSubInt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPatternSubInt"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:436:1: groupGraphPatternSubInt : graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? ;
    public final IbmSparqlExtParser.groupGraphPatternSubInt_return groupGraphPatternSubInt() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPatternSubInt_return retval = new IbmSparqlExtParser.groupGraphPatternSubInt_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT177=null;
        IbmSparqlExtParser.graphPatternNotTriples_return graphPatternNotTriples176 =null;

        IbmSparqlExtParser.triplesBlock_return triplesBlock178 =null;


        XTree DOT177_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_graphPatternNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule graphPatternNotTriples");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:2: ( graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:7: graphPatternNotTriples ( DOT )? ( triplesBlock )?
            {
            pushFollow(FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt3136);
            graphPatternNotTriples176=graphPatternNotTriples();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_graphPatternNotTriples.add(graphPatternNotTriples176.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:30: ( DOT )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==DOT) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:30: DOT
                    {
                    DOT177=(Token)match(input,DOT,FOLLOW_DOT_in_groupGraphPatternSubInt3138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT177);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:35: ( triplesBlock )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==BLANK_NODE_LABEL||(LA82_0 >= DECIMAL && LA82_0 <= DECIMAL_POSITIVE)||(LA82_0 >= DOUBLE && LA82_0 <= DOUBLE_POSITIVE)||LA82_0==FALSE||(LA82_0 >= INTEGER && LA82_0 <= INTEGER_POSITIVE)||LA82_0==IRI_REF||LA82_0==OPEN_BRACE||LA82_0==OPEN_SQ_BRACKET||(LA82_0 >= PNAME_LN && LA82_0 <= PNAME_NS)||(LA82_0 >= STRING_LITERAL1 && LA82_0 <= STRING_LITERAL_LONG2)||LA82_0==TRUE||(LA82_0 >= VAR1 && LA82_0 <= VAR2)) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:437:35: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSubInt3141);
                    triplesBlock178=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock178.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: triplesBlock, graphPatternNotTriples
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 438:3: -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )?
            {
                adaptor.addChild(root_0, stream_graphPatternNotTriples.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:438:30: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:438:30: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK")
                    , root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSubInt"


    public static class triplesBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesBlock"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:441:1: triplesBlock : t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? ;
    public final IbmSparqlExtParser.triplesBlock_return triplesBlock() throws RecognitionException {
        IbmSparqlExtParser.triplesBlock_return retval = new IbmSparqlExtParser.triplesBlock_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT179=null;
        IbmSparqlExtParser.triplesSameSubjectPath_return t1 =null;

        IbmSparqlExtParser.triplesBlock_return t2 =null;


        XTree DOT179_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_triplesSameSubjectPath=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubjectPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:2: (t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:7: t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )?
            {
            pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock3172);
            t1=triplesSameSubjectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_triplesSameSubjectPath.add(t1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:33: ( DOT (t2= triplesBlock )? )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DOT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:35: DOT (t2= triplesBlock )?
                    {
                    DOT179=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock3176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT179);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:41: (t2= triplesBlock )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==BLANK_NODE_LABEL||(LA83_0 >= DECIMAL && LA83_0 <= DECIMAL_POSITIVE)||(LA83_0 >= DOUBLE && LA83_0 <= DOUBLE_POSITIVE)||LA83_0==FALSE||(LA83_0 >= INTEGER && LA83_0 <= INTEGER_POSITIVE)||LA83_0==IRI_REF||LA83_0==OPEN_BRACE||LA83_0==OPEN_SQ_BRACKET||(LA83_0 >= PNAME_LN && LA83_0 <= PNAME_NS)||(LA83_0 >= STRING_LITERAL1 && LA83_0 <= STRING_LITERAL_LONG2)||LA83_0==TRUE||(LA83_0 >= VAR1 && LA83_0 <= VAR2)) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:41: t2= triplesBlock
                            {
                            pushFollow(FOLLOW_triplesBlock_in_triplesBlock3180);
                            t2=triplesBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesBlock.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: triplesBlock, triplesSameSubjectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 442:60: -> triplesSameSubjectPath ( ( triplesBlock )+ )?
            {
                adaptor.addChild(root_0, stream_triplesSameSubjectPath.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:442:87: ( ( triplesBlock )+ )?
                if ( stream_triplesBlock.hasNext() ) {
                    if ( !(stream_triplesBlock.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_triplesBlock.hasNext() ) {
                        adaptor.addChild(root_0, stream_triplesBlock.nextTree());

                    }
                    stream_triplesBlock.reset();

                }
                stream_triplesBlock.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesBlock"


    public static class graphPatternNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphPatternNotTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:445:1: graphPatternNotTriples : ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData );
    public final IbmSparqlExtParser.graphPatternNotTriples_return graphPatternNotTriples() throws RecognitionException {
        IbmSparqlExtParser.graphPatternNotTriples_return retval = new IbmSparqlExtParser.graphPatternNotTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern180 =null;

        IbmSparqlExtParser.optionalGraphPattern_return optionalGraphPattern181 =null;

        IbmSparqlExtParser.minusGraphPattern_return minusGraphPattern182 =null;

        IbmSparqlExtParser.graphGraphPattern_return graphGraphPattern183 =null;

        IbmSparqlExtParser.serviceGraphPattern_return serviceGraphPattern184 =null;

        IbmSparqlExtParser.filter_return filter185 =null;

        IbmSparqlExtParser.bind_return bind186 =null;

        IbmSparqlExtParser.inlineData_return inlineData187 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:446:2: ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData )
            int alt85=8;
            switch ( input.LA(1) ) {
            case OPEN_CURLY_BRACE:
                {
                alt85=1;
                }
                break;
            case OPTIONAL:
                {
                alt85=2;
                }
                break;
            case MINUS:
                {
                alt85=3;
                }
                break;
            case GRAPH:
                {
                alt85=4;
                }
                break;
            case SERVICE:
                {
                alt85=5;
                }
                break;
            case FILTER:
                {
                alt85=6;
                }
                break;
            case BIND:
                {
                alt85=7;
                }
                break;
            case VALUES:
                {
                alt85=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }

            switch (alt85) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:446:7: groupOrUnionGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples3211);
                    groupOrUnionGraphPattern180=groupOrUnionGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupOrUnionGraphPattern180.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:447:10: optionalGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_optionalGraphPattern_in_graphPatternNotTriples3225);
                    optionalGraphPattern181=optionalGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalGraphPattern181.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:448:10: minusGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_minusGraphPattern_in_graphPatternNotTriples3238);
                    minusGraphPattern182=minusGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, minusGraphPattern182.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:449:10: graphGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphGraphPattern_in_graphPatternNotTriples3252);
                    graphGraphPattern183=graphGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphGraphPattern183.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:450:10: serviceGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_serviceGraphPattern_in_graphPatternNotTriples3266);
                    serviceGraphPattern184=serviceGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, serviceGraphPattern184.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:451:10: filter
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_filter_in_graphPatternNotTriples3280);
                    filter185=filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter185.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:452:10: bind
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_bind_in_graphPatternNotTriples3294);
                    bind186=bind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind186.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:453:10: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineData_in_graphPatternNotTriples3307);
                    inlineData187=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData187.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphPatternNotTriples"


    public static class inlineData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:456:1: inlineData : VALUES dataBlock -> ^( VALUES dataBlock ) ;
    public final IbmSparqlExtParser.inlineData_return inlineData() throws RecognitionException {
        IbmSparqlExtParser.inlineData_return retval = new IbmSparqlExtParser.inlineData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token VALUES188=null;
        IbmSparqlExtParser.dataBlock_return dataBlock189 =null;


        XTree VALUES188_tree=null;
        RewriteRuleTokenStream stream_VALUES=new RewriteRuleTokenStream(adaptor,"token VALUES");
        RewriteRuleSubtreeStream stream_dataBlock=new RewriteRuleSubtreeStream(adaptor,"rule dataBlock");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:457:5: ( VALUES dataBlock -> ^( VALUES dataBlock ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:457:10: VALUES dataBlock
            {
            VALUES188=(Token)match(input,VALUES,FOLLOW_VALUES_in_inlineData3327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VALUES.add(VALUES188);


            pushFollow(FOLLOW_dataBlock_in_inlineData3329);
            dataBlock189=dataBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dataBlock.add(dataBlock189.getTree());

            // AST REWRITE
            // elements: dataBlock, VALUES
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 457:27: -> ^( VALUES dataBlock )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:457:30: ^( VALUES dataBlock )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_VALUES.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_dataBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineData"


    public static class dataBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dataBlock"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:460:1: dataBlock : ( inlineDataOneVar | inlineDataFull );
    public final IbmSparqlExtParser.dataBlock_return dataBlock() throws RecognitionException {
        IbmSparqlExtParser.dataBlock_return retval = new IbmSparqlExtParser.dataBlock_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.inlineDataOneVar_return inlineDataOneVar190 =null;

        IbmSparqlExtParser.inlineDataFull_return inlineDataFull191 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:461:5: ( inlineDataOneVar | inlineDataFull )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( ((LA86_0 >= VAR1 && LA86_0 <= VAR2)) ) {
                alt86=1;
            }
            else if ( (LA86_0==OPEN_BRACE) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:461:10: inlineDataOneVar
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineDataOneVar_in_dataBlock3357);
                    inlineDataOneVar190=inlineDataOneVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataOneVar190.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:461:29: inlineDataFull
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineDataFull_in_dataBlock3361);
                    inlineDataFull191=inlineDataFull();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataFull191.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dataBlock"


    public static class inlineDataOneVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineDataOneVar"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:464:1: inlineDataOneVar : v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) ;
    public final IbmSparqlExtParser.inlineDataOneVar_return inlineDataOneVar() throws RecognitionException {
        IbmSparqlExtParser.inlineDataOneVar_return retval = new IbmSparqlExtParser.inlineDataOneVar_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE192=null;
        Token CLOSE_CURLY_BRACE193=null;
        List list_b=null;
        IbmSparqlExtParser.var_return v =null;

        RuleReturnScope b = null;
        XTree OPEN_CURLY_BRACE192_tree=null;
        XTree CLOSE_CURLY_BRACE193_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:5: (v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:10: v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE
            {
            pushFollow(FOLLOW_var_in_inlineDataOneVar3383);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            OPEN_CURLY_BRACE192=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar3385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE192);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:34: (b+= dataBlockValue )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( ((LA87_0 >= DECIMAL && LA87_0 <= DECIMAL_POSITIVE)||(LA87_0 >= DOUBLE && LA87_0 <= DOUBLE_POSITIVE)||LA87_0==FALSE||(LA87_0 >= INTEGER && LA87_0 <= INTEGER_POSITIVE)||LA87_0==IRI_REF||(LA87_0 >= PNAME_LN && LA87_0 <= PNAME_NS)||(LA87_0 >= STRING_LITERAL1 && LA87_0 <= STRING_LITERAL_LONG2)||LA87_0==TRUE||LA87_0==UNDEF) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:34: b+= dataBlockValue
            	    {
            	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataOneVar3389);
            	    b=dataBlockValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            CLOSE_CURLY_BRACE193=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar3392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE193);


            // AST REWRITE
            // elements: v, b
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: b
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 465:70: -> ^( INLINE_DATA $v ( $b)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:73: ^( INLINE_DATA $v ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(INLINE_DATA, "INLINE_DATA")
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:465:91: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineDataOneVar"


    public static class inlineDataFull_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineDataFull"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:468:1: inlineDataFull : OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) ;
    public final IbmSparqlExtParser.inlineDataFull_return inlineDataFull() throws RecognitionException {
        IbmSparqlExtParser.inlineDataFull_return retval = new IbmSparqlExtParser.inlineDataFull_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE194=null;
        Token CLOSE_BRACE195=null;
        Token OPEN_CURLY_BRACE196=null;
        Token OPEN_BRACE197=null;
        Token CLOSE_BRACE198=null;
        Token CLOSE_CURLY_BRACE199=null;
        List list_v=null;
        List list_b=null;
        RuleReturnScope v = null;
        RuleReturnScope b = null;
        XTree OPEN_BRACE194_tree=null;
        XTree CLOSE_BRACE195_tree=null;
        XTree OPEN_CURLY_BRACE196_tree=null;
        XTree OPEN_BRACE197_tree=null;
        XTree CLOSE_BRACE198_tree=null;
        XTree CLOSE_CURLY_BRACE199_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:5: ( OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:10: OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE
            {
            OPEN_BRACE194=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull3425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE194);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:22: (v+= var )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( ((LA88_0 >= VAR1 && LA88_0 <= VAR2)) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:22: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_inlineDataFull3429);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            CLOSE_BRACE195=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull3432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE195);


            OPEN_CURLY_BRACE196=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull3434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE196);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:58: ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==OPEN_BRACE) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:60: OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE
            	    {
            	    OPEN_BRACE197=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull3438); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE197);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:72: (b+= dataBlockValue )*
            	    loop89:
            	    do {
            	        int alt89=2;
            	        int LA89_0 = input.LA(1);

            	        if ( ((LA89_0 >= DECIMAL && LA89_0 <= DECIMAL_POSITIVE)||(LA89_0 >= DOUBLE && LA89_0 <= DOUBLE_POSITIVE)||LA89_0==FALSE||(LA89_0 >= INTEGER && LA89_0 <= INTEGER_POSITIVE)||LA89_0==IRI_REF||(LA89_0 >= PNAME_LN && LA89_0 <= PNAME_NS)||(LA89_0 >= STRING_LITERAL1 && LA89_0 <= STRING_LITERAL_LONG2)||LA89_0==TRUE||LA89_0==UNDEF) ) {
            	            alt89=1;
            	        }


            	        switch (alt89) {
            	    	case 1 :
            	    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:72: b+= dataBlockValue
            	    	    {
            	    	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataFull3442);
            	    	    b=dataBlockValue();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    	    if (list_b==null) list_b=new ArrayList();
            	    	    list_b.add(b.getTree());


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop89;
            	        }
            	    } while (true);


            	    CLOSE_BRACE198=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull3445); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE198);


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            CLOSE_CURLY_BRACE199=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull3450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE199);


            // AST REWRITE
            // elements: v, b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b, v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 469:124: -> ^( INLINE_DATA ( $v)* ( $b)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:127: ^( INLINE_DATA ( $v)* ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(INLINE_DATA, "INLINE_DATA")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:142: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:469:146: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineDataFull"


    public static class dataBlockValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dataBlockValue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:472:1: dataBlockValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF );
    public final IbmSparqlExtParser.dataBlockValue_return dataBlockValue() throws RecognitionException {
        IbmSparqlExtParser.dataBlockValue_return retval = new IbmSparqlExtParser.dataBlockValue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNDEF204=null;
        IbmSparqlExtParser.iRIref_return iRIref200 =null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral201 =null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral202 =null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral203 =null;


        XTree UNDEF204_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt91=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt91=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt91=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt91=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt91=4;
                }
                break;
            case UNDEF:
                {
                alt91=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_dataBlockValue3484);
                    iRIref200=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref200.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_dataBlockValue3488);
                    rDFLiteral201=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral201.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_dataBlockValue3492);
                    numericLiteral202=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral202.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_dataBlockValue3496);
                    booleanLiteral203=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral203.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:473:63: UNDEF
                    {
                    root_0 = (XTree)adaptor.nil();


                    UNDEF204=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_dataBlockValue3500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF204_tree = 
                    (XTree)adaptor.create(UNDEF204)
                    ;
                    adaptor.addChild(root_0, UNDEF204_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dataBlockValue"


    public static class optionalGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optionalGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:475:1: optionalGraphPattern : OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) ;
    public final IbmSparqlExtParser.optionalGraphPattern_return optionalGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.optionalGraphPattern_return retval = new IbmSparqlExtParser.optionalGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPTIONAL205=null;
        IbmSparqlExtParser.groupGraphPattern_return g =null;


        XTree OPTIONAL205_tree=null;
        RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,"token OPTIONAL");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:476:2: ( OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:476:7: OPTIONAL g= groupGraphPattern
            {
            OPTIONAL205=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_optionalGraphPattern3513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPTIONAL.add(OPTIONAL205);


            pushFollow(FOLLOW_groupGraphPattern_in_optionalGraphPattern3517);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: OPTIONAL, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 478:3: -> ^( OPTIONAL $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:478:7: ^( OPTIONAL $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_OPTIONAL.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optionalGraphPattern"


    public static class graphGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:481:1: graphGraphPattern : GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) ;
    public final IbmSparqlExtParser.graphGraphPattern_return graphGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.graphGraphPattern_return retval = new IbmSparqlExtParser.graphGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH206=null;
        IbmSparqlExtParser.varOrIRIref_return v =null;

        IbmSparqlExtParser.groupGraphPattern_return g =null;


        XTree GRAPH206_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:482:2: ( GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:482:7: GRAPH v= varOrIRIref g= groupGraphPattern
            {
            GRAPH206=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphGraphPattern3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAPH.add(GRAPH206);


            pushFollow(FOLLOW_varOrIRIref_in_graphGraphPattern3551);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());

            pushFollow(FOLLOW_groupGraphPattern_in_graphGraphPattern3555);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: v, GRAPH, g
            // token labels: 
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 484:3: -> ^( GRAPH $v $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:484:7: ^( GRAPH $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_GRAPH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphGraphPattern"


    public static class serviceGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "serviceGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:487:1: serviceGraphPattern : SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) ;
    public final IbmSparqlExtParser.serviceGraphPattern_return serviceGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.serviceGraphPattern_return retval = new IbmSparqlExtParser.serviceGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token s=null;
        Token SERVICE207=null;
        IbmSparqlExtParser.varOrIRIref_return v =null;

        IbmSparqlExtParser.groupGraphPattern_return g =null;


        XTree s_tree=null;
        XTree SERVICE207_tree=null;
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:489:2: ( SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:489:7: SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern
            {
            SERVICE207=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_serviceGraphPattern3597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SERVICE.add(SERVICE207);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:489:16: (s= SILENT )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==SILENT) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:489:16: s= SILENT
                    {
                    s=(Token)match(input,SILENT,FOLLOW_SILENT_in_serviceGraphPattern3601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SILENT.add(s);


                    }
                    break;

            }


            pushFollow(FOLLOW_varOrIRIref_in_serviceGraphPattern3606);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());

            pushFollow(FOLLOW_groupGraphPattern_in_serviceGraphPattern3610);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: SERVICE, g, s, v
            // token labels: s
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 491:3: -> ^( SERVICE ( $s)? $v $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:491:7: ^( SERVICE ( $s)? $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_SERVICE.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:491:20: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { ((XTree)retval.tree).matched = input.toString(retval.start,input.LT(-1)); }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "serviceGraphPattern"


    public static class bind_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bind"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:495:1: bind : ( bind1 | bind2 );
    public final IbmSparqlExtParser.bind_return bind() throws RecognitionException {
        IbmSparqlExtParser.bind_return retval = new IbmSparqlExtParser.bind_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.bind1_return bind1208 =null;

        IbmSparqlExtParser.bind2_return bind2209 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:496:2: ( bind1 | bind2 )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==BIND) ) {
                int LA93_1 = input.LA(2);

                if ( (LA93_1==OPEN_BRACE) ) {
                    switch ( input.LA(3) ) {
                    case ABS:
                    case AVG:
                    case BNODE:
                    case BOUND:
                    case CEIL:
                    case COALESCE:
                    case CONCAT:
                    case CONTAINS:
                    case COUNT:
                    case DATATYPE:
                    case DAY:
                    case DECIMAL:
                    case DECIMAL_NEGATIVE:
                    case DECIMAL_POSITIVE:
                    case DOUBLE:
                    case DOUBLE_NEGATIVE:
                    case DOUBLE_POSITIVE:
                    case ENCODE_FOR_URI:
                    case EXISTS:
                    case FALSE:
                    case FLOOR:
                    case GROUP_CONCAT:
                    case HOURS:
                    case IF:
                    case INTEGER:
                    case INTEGER_NEGATIVE:
                    case INTEGER_POSITIVE:
                    case IRI:
                    case ISBLANK:
                    case ISIRI:
                    case ISLITERAL:
                    case ISNUMERIC:
                    case ISURI:
                    case LANG:
                    case LANGMATCHES:
                    case LCASE:
                    case MAX:
                    case MD5:
                    case MIN:
                    case MINUTES:
                    case MONTH:
                    case NOT:
                    case NOW:
                    case OPEN_BRACE:
                    case RAND:
                    case REGEX:
                    case REPLACE:
                    case ROUND:
                    case SAMETERM:
                    case SAMPLE:
                    case SECONDS:
                    case SHA1:
                    case SHA224:
                    case SHA256:
                    case SHA384:
                    case SHA512:
                    case STR:
                    case STRAFTER:
                    case STRBEFORE:
                    case STRDT:
                    case STRENDS:
                    case STRING_LITERAL1:
                    case STRING_LITERAL2:
                    case STRING_LITERAL_LONG1:
                    case STRING_LITERAL_LONG2:
                    case STRLANG:
                    case STRLEN:
                    case STRSTARTS:
                    case STRUUID:
                    case SUBSTR:
                    case SUM:
                    case TIMEZONE:
                    case TRUE:
                    case TZ:
                    case UCASE:
                    case URI:
                    case UUID:
                    case VAR1:
                    case VAR2:
                    case YEAR:
                    case 268:
                    case 271:
                    case 272:
                        {
                        alt93=1;
                        }
                        break;
                    case IRI_REF:
                        {
                        int LA93_4 = input.LA(4);

                        if ( (LA93_4==OPEN_BRACE) ) {
                            switch ( input.LA(5) ) {
                            case CLOSE_BRACE:
                                {
                                int LA93_8 = input.LA(6);

                                if ( ((LA93_8 >= DECIMAL_NEGATIVE && LA93_8 <= DECIMAL_POSITIVE)||(LA93_8 >= DOUBLE_NEGATIVE && LA93_8 <= DOUBLE_POSITIVE)||LA93_8==IN||(LA93_8 >= INTEGER_NEGATIVE && LA93_8 <= INTEGER_POSITIVE)||(LA93_8 >= LOGICAL_AND && LA93_8 <= LTE)||LA93_8==NOT||(LA93_8 >= 269 && LA93_8 <= 273)||(LA93_8 >= 275 && LA93_8 <= 277)) ) {
                                    alt93=1;
                                }
                                else if ( (LA93_8==AS) ) {
                                    int LA93_11 = input.LA(7);

                                    if ( (LA93_11==OPEN_BRACE) ) {
                                        alt93=2;
                                    }
                                    else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                        alt93=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 11, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 8, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case ABS:
                            case AVG:
                            case BNODE:
                            case BOUND:
                            case CEIL:
                            case COALESCE:
                            case CONCAT:
                            case CONTAINS:
                            case COUNT:
                            case DATATYPE:
                            case DAY:
                            case DECIMAL:
                            case DECIMAL_NEGATIVE:
                            case DECIMAL_POSITIVE:
                            case DISTINCT:
                            case DOUBLE:
                            case DOUBLE_NEGATIVE:
                            case DOUBLE_POSITIVE:
                            case ENCODE_FOR_URI:
                            case EXISTS:
                            case FALSE:
                            case FLOOR:
                            case GROUP_CONCAT:
                            case HOURS:
                            case IF:
                            case INTEGER:
                            case INTEGER_NEGATIVE:
                            case INTEGER_POSITIVE:
                            case IRI:
                            case IRI_REF:
                            case ISBLANK:
                            case ISIRI:
                            case ISLITERAL:
                            case ISNUMERIC:
                            case ISURI:
                            case LANG:
                            case LANGMATCHES:
                            case LCASE:
                            case MAX:
                            case MD5:
                            case MIN:
                            case MINUTES:
                            case MONTH:
                            case NOT:
                            case NOW:
                            case OPEN_BRACE:
                            case PNAME_LN:
                            case PNAME_NS:
                            case RAND:
                            case REGEX:
                            case REPLACE:
                            case ROUND:
                            case SAMETERM:
                            case SAMPLE:
                            case SECONDS:
                            case SHA1:
                            case SHA224:
                            case SHA256:
                            case SHA384:
                            case SHA512:
                            case STR:
                            case STRAFTER:
                            case STRBEFORE:
                            case STRDT:
                            case STRENDS:
                            case STRING_LITERAL1:
                            case STRING_LITERAL2:
                            case STRING_LITERAL_LONG1:
                            case STRING_LITERAL_LONG2:
                            case STRLANG:
                            case STRLEN:
                            case STRSTARTS:
                            case STRUUID:
                            case SUBSTR:
                            case SUM:
                            case TIMEZONE:
                            case TRUE:
                            case TZ:
                            case UCASE:
                            case URI:
                            case UUID:
                            case YEAR:
                            case 268:
                            case 271:
                            case 272:
                                {
                                alt93=1;
                                }
                                break;
                            case VAR1:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 9, input);

                                    throw nvae;

                                }

                                }
                                break;
                            case VAR2:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 10, input);

                                    throw nvae;

                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 93, 7, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA93_4==AS||(LA93_4 >= DECIMAL_NEGATIVE && LA93_4 <= DECIMAL_POSITIVE)||(LA93_4 >= DOUBLE_NEGATIVE && LA93_4 <= DOUBLE_POSITIVE)||LA93_4==IN||(LA93_4 >= INTEGER_NEGATIVE && LA93_4 <= INTEGER_POSITIVE)||(LA93_4 >= LOGICAL_AND && LA93_4 <= LTE)||LA93_4==NOT||(LA93_4 >= 269 && LA93_4 <= 273)||(LA93_4 >= 275 && LA93_4 <= 277)) ) {
                            alt93=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 4, input);

                            throw nvae;

                        }
                        }
                        break;
                    case PNAME_LN:
                        {
                        int LA93_5 = input.LA(4);

                        if ( (LA93_5==OPEN_BRACE) ) {
                            switch ( input.LA(5) ) {
                            case CLOSE_BRACE:
                                {
                                int LA93_8 = input.LA(6);

                                if ( ((LA93_8 >= DECIMAL_NEGATIVE && LA93_8 <= DECIMAL_POSITIVE)||(LA93_8 >= DOUBLE_NEGATIVE && LA93_8 <= DOUBLE_POSITIVE)||LA93_8==IN||(LA93_8 >= INTEGER_NEGATIVE && LA93_8 <= INTEGER_POSITIVE)||(LA93_8 >= LOGICAL_AND && LA93_8 <= LTE)||LA93_8==NOT||(LA93_8 >= 269 && LA93_8 <= 273)||(LA93_8 >= 275 && LA93_8 <= 277)) ) {
                                    alt93=1;
                                }
                                else if ( (LA93_8==AS) ) {
                                    int LA93_11 = input.LA(7);

                                    if ( (LA93_11==OPEN_BRACE) ) {
                                        alt93=2;
                                    }
                                    else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                        alt93=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 11, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 8, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case ABS:
                            case AVG:
                            case BNODE:
                            case BOUND:
                            case CEIL:
                            case COALESCE:
                            case CONCAT:
                            case CONTAINS:
                            case COUNT:
                            case DATATYPE:
                            case DAY:
                            case DECIMAL:
                            case DECIMAL_NEGATIVE:
                            case DECIMAL_POSITIVE:
                            case DISTINCT:
                            case DOUBLE:
                            case DOUBLE_NEGATIVE:
                            case DOUBLE_POSITIVE:
                            case ENCODE_FOR_URI:
                            case EXISTS:
                            case FALSE:
                            case FLOOR:
                            case GROUP_CONCAT:
                            case HOURS:
                            case IF:
                            case INTEGER:
                            case INTEGER_NEGATIVE:
                            case INTEGER_POSITIVE:
                            case IRI:
                            case IRI_REF:
                            case ISBLANK:
                            case ISIRI:
                            case ISLITERAL:
                            case ISNUMERIC:
                            case ISURI:
                            case LANG:
                            case LANGMATCHES:
                            case LCASE:
                            case MAX:
                            case MD5:
                            case MIN:
                            case MINUTES:
                            case MONTH:
                            case NOT:
                            case NOW:
                            case OPEN_BRACE:
                            case PNAME_LN:
                            case PNAME_NS:
                            case RAND:
                            case REGEX:
                            case REPLACE:
                            case ROUND:
                            case SAMETERM:
                            case SAMPLE:
                            case SECONDS:
                            case SHA1:
                            case SHA224:
                            case SHA256:
                            case SHA384:
                            case SHA512:
                            case STR:
                            case STRAFTER:
                            case STRBEFORE:
                            case STRDT:
                            case STRENDS:
                            case STRING_LITERAL1:
                            case STRING_LITERAL2:
                            case STRING_LITERAL_LONG1:
                            case STRING_LITERAL_LONG2:
                            case STRLANG:
                            case STRLEN:
                            case STRSTARTS:
                            case STRUUID:
                            case SUBSTR:
                            case SUM:
                            case TIMEZONE:
                            case TRUE:
                            case TZ:
                            case UCASE:
                            case URI:
                            case UUID:
                            case YEAR:
                            case 268:
                            case 271:
                            case 272:
                                {
                                alt93=1;
                                }
                                break;
                            case VAR1:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 9, input);

                                    throw nvae;

                                }

                                }
                                break;
                            case VAR2:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 10, input);

                                    throw nvae;

                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 93, 7, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA93_5==AS||(LA93_5 >= DECIMAL_NEGATIVE && LA93_5 <= DECIMAL_POSITIVE)||(LA93_5 >= DOUBLE_NEGATIVE && LA93_5 <= DOUBLE_POSITIVE)||LA93_5==IN||(LA93_5 >= INTEGER_NEGATIVE && LA93_5 <= INTEGER_POSITIVE)||(LA93_5 >= LOGICAL_AND && LA93_5 <= LTE)||LA93_5==NOT||(LA93_5 >= 269 && LA93_5 <= 273)||(LA93_5 >= 275 && LA93_5 <= 277)) ) {
                            alt93=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 5, input);

                            throw nvae;

                        }
                        }
                        break;
                    case PNAME_NS:
                        {
                        int LA93_6 = input.LA(4);

                        if ( (LA93_6==OPEN_BRACE) ) {
                            switch ( input.LA(5) ) {
                            case CLOSE_BRACE:
                                {
                                int LA93_8 = input.LA(6);

                                if ( ((LA93_8 >= DECIMAL_NEGATIVE && LA93_8 <= DECIMAL_POSITIVE)||(LA93_8 >= DOUBLE_NEGATIVE && LA93_8 <= DOUBLE_POSITIVE)||LA93_8==IN||(LA93_8 >= INTEGER_NEGATIVE && LA93_8 <= INTEGER_POSITIVE)||(LA93_8 >= LOGICAL_AND && LA93_8 <= LTE)||LA93_8==NOT||(LA93_8 >= 269 && LA93_8 <= 273)||(LA93_8 >= 275 && LA93_8 <= 277)) ) {
                                    alt93=1;
                                }
                                else if ( (LA93_8==AS) ) {
                                    int LA93_11 = input.LA(7);

                                    if ( (LA93_11==OPEN_BRACE) ) {
                                        alt93=2;
                                    }
                                    else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                        alt93=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 11, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 8, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case ABS:
                            case AVG:
                            case BNODE:
                            case BOUND:
                            case CEIL:
                            case COALESCE:
                            case CONCAT:
                            case CONTAINS:
                            case COUNT:
                            case DATATYPE:
                            case DAY:
                            case DECIMAL:
                            case DECIMAL_NEGATIVE:
                            case DECIMAL_POSITIVE:
                            case DISTINCT:
                            case DOUBLE:
                            case DOUBLE_NEGATIVE:
                            case DOUBLE_POSITIVE:
                            case ENCODE_FOR_URI:
                            case EXISTS:
                            case FALSE:
                            case FLOOR:
                            case GROUP_CONCAT:
                            case HOURS:
                            case IF:
                            case INTEGER:
                            case INTEGER_NEGATIVE:
                            case INTEGER_POSITIVE:
                            case IRI:
                            case IRI_REF:
                            case ISBLANK:
                            case ISIRI:
                            case ISLITERAL:
                            case ISNUMERIC:
                            case ISURI:
                            case LANG:
                            case LANGMATCHES:
                            case LCASE:
                            case MAX:
                            case MD5:
                            case MIN:
                            case MINUTES:
                            case MONTH:
                            case NOT:
                            case NOW:
                            case OPEN_BRACE:
                            case PNAME_LN:
                            case PNAME_NS:
                            case RAND:
                            case REGEX:
                            case REPLACE:
                            case ROUND:
                            case SAMETERM:
                            case SAMPLE:
                            case SECONDS:
                            case SHA1:
                            case SHA224:
                            case SHA256:
                            case SHA384:
                            case SHA512:
                            case STR:
                            case STRAFTER:
                            case STRBEFORE:
                            case STRDT:
                            case STRENDS:
                            case STRING_LITERAL1:
                            case STRING_LITERAL2:
                            case STRING_LITERAL_LONG1:
                            case STRING_LITERAL_LONG2:
                            case STRLANG:
                            case STRLEN:
                            case STRSTARTS:
                            case STRUUID:
                            case SUBSTR:
                            case SUM:
                            case TIMEZONE:
                            case TRUE:
                            case TZ:
                            case UCASE:
                            case URI:
                            case UUID:
                            case YEAR:
                            case 268:
                            case 271:
                            case 272:
                                {
                                alt93=1;
                                }
                                break;
                            case VAR1:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 9, input);

                                    throw nvae;

                                }

                                }
                                break;
                            case VAR2:
                                {
                                switch ( input.LA(6) ) {
                                case COMMA:
                                case DECIMAL_NEGATIVE:
                                case DECIMAL_POSITIVE:
                                case DOUBLE_NEGATIVE:
                                case DOUBLE_POSITIVE:
                                case IN:
                                case INTEGER_NEGATIVE:
                                case INTEGER_POSITIVE:
                                case LOGICAL_AND:
                                case LOGICAL_OR:
                                case LT:
                                case LTE:
                                case NOT:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 275:
                                case 276:
                                case 277:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case CLOSE_BRACE:
                                    {
                                    int LA93_12 = input.LA(7);

                                    if ( ((LA93_12 >= DECIMAL_NEGATIVE && LA93_12 <= DECIMAL_POSITIVE)||(LA93_12 >= DOUBLE_NEGATIVE && LA93_12 <= DOUBLE_POSITIVE)||LA93_12==IN||(LA93_12 >= INTEGER_NEGATIVE && LA93_12 <= INTEGER_POSITIVE)||(LA93_12 >= LOGICAL_AND && LA93_12 <= LTE)||LA93_12==NOT||(LA93_12 >= 269 && LA93_12 <= 273)||(LA93_12 >= 275 && LA93_12 <= 277)) ) {
                                        alt93=1;
                                    }
                                    else if ( (LA93_12==AS) ) {
                                        int LA93_11 = input.LA(8);

                                        if ( (LA93_11==OPEN_BRACE) ) {
                                            alt93=2;
                                        }
                                        else if ( ((LA93_11 >= VAR1 && LA93_11 <= VAR2)) ) {
                                            alt93=1;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 93, 11, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 93, 12, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case VAR1:
                                case VAR2:
                                    {
                                    alt93=2;
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 93, 10, input);

                                    throw nvae;

                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 93, 7, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA93_6==AS||(LA93_6 >= DECIMAL_NEGATIVE && LA93_6 <= DECIMAL_POSITIVE)||(LA93_6 >= DOUBLE_NEGATIVE && LA93_6 <= DOUBLE_POSITIVE)||LA93_6==IN||(LA93_6 >= INTEGER_NEGATIVE && LA93_6 <= INTEGER_POSITIVE)||(LA93_6 >= LOGICAL_AND && LA93_6 <= LTE)||LA93_6==NOT||(LA93_6 >= 269 && LA93_6 <= 273)||(LA93_6 >= 275 && LA93_6 <= 277)) ) {
                            alt93=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 6, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 2, input);

                        throw nvae;

                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:496:4: bind1
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_bind1_in_bind3649);
                    bind1208=bind1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind1208.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:497:4: bind2
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_bind2_in_bind3654);
                    bind2209=bind2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind2209.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bind"


    public static class bind1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bind1"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:501:1: bind1 : BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) ;
    public final IbmSparqlExtParser.bind1_return bind1() throws RecognitionException {
        IbmSparqlExtParser.bind1_return retval = new IbmSparqlExtParser.bind1_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BIND210=null;
        Token OPEN_BRACE211=null;
        Token AS212=null;
        Token CLOSE_BRACE213=null;
        IbmSparqlExtParser.expression_return e =null;

        IbmSparqlExtParser.var_return v =null;


        XTree BIND210_tree=null;
        XTree OPEN_BRACE211_tree=null;
        XTree AS212_tree=null;
        XTree CLOSE_BRACE213_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:502:2: ( BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:502:7: BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            BIND210=(Token)match(input,BIND,FOLLOW_BIND_in_bind13670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND210);


            OPEN_BRACE211=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind13672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE211);


            pushFollow(FOLLOW_expression_in_bind13676);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            AS212=(Token)match(input,AS,FOLLOW_AS_in_bind13678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS212);


            pushFollow(FOLLOW_var_in_bind13682);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            CLOSE_BRACE213=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind13684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE213);


            // AST REWRITE
            // elements: e, v, BIND
            // token labels: 
            // rule labels: e, v, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 504:3: -> ^( BIND $v $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:504:7: ^( BIND $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_BIND.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bind1"


    public static class bind2_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bind2"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:508:1: bind2 : BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE -> ^( BIND $f ( $v)* ) ;
    public final IbmSparqlExtParser.bind2_return bind2() throws RecognitionException {
        IbmSparqlExtParser.bind2_return retval = new IbmSparqlExtParser.bind2_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BIND214=null;
        Token OPEN_BRACE215=null;
        Token AS216=null;
        Token OPEN_BRACE217=null;
        Token CLOSE_BRACE218=null;
        Token CLOSE_BRACE219=null;
        List list_v=null;
        IbmSparqlExtParser.funcCall_return f =null;

        RuleReturnScope v = null;
        XTree BIND214_tree=null;
        XTree OPEN_BRACE215_tree=null;
        XTree AS216_tree=null;
        XTree OPEN_BRACE217_tree=null;
        XTree CLOSE_BRACE218_tree=null;
        XTree CLOSE_BRACE219_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_funcCall=new RewriteRuleSubtreeStream(adaptor,"rule funcCall");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:509:2: ( BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE -> ^( BIND $f ( $v)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:509:7: BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE
            {
            BIND214=(Token)match(input,BIND,FOLLOW_BIND_in_bind23720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND214);


            OPEN_BRACE215=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind23722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE215);


            pushFollow(FOLLOW_funcCall_in_bind23726);
            f=funcCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcCall.add(f.getTree());

            AS216=(Token)match(input,AS,FOLLOW_AS_in_bind23728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS216);


            OPEN_BRACE217=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind23730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE217);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:509:49: (v+= var )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0 >= VAR1 && LA94_0 <= VAR2)) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:509:49: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_bind23734);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);


            CLOSE_BRACE218=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind23737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE218);


            CLOSE_BRACE219=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind23739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE219);


            // AST REWRITE
            // elements: v, f, BIND
            // token labels: 
            // rule labels: f, retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 511:3: -> ^( BIND $f ( $v)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:511:7: ^( BIND $f ( $v)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_BIND.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_f.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:511:21: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bind2"


    public static class funcCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "funcCall"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:514:1: funcCall : fn= iRIref OPEN_BRACE (v+= var )* CLOSE_BRACE -> ^( FUNCCALL $fn ( $v)* ) ;
    public final IbmSparqlExtParser.funcCall_return funcCall() throws RecognitionException {
        IbmSparqlExtParser.funcCall_return retval = new IbmSparqlExtParser.funcCall_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE220=null;
        Token CLOSE_BRACE221=null;
        List list_v=null;
        IbmSparqlExtParser.iRIref_return fn =null;

        RuleReturnScope v = null;
        XTree OPEN_BRACE220_tree=null;
        XTree CLOSE_BRACE221_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:515:2: (fn= iRIref OPEN_BRACE (v+= var )* CLOSE_BRACE -> ^( FUNCCALL $fn ( $v)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:515:7: fn= iRIref OPEN_BRACE (v+= var )* CLOSE_BRACE
            {
            pushFollow(FOLLOW_iRIref_in_funcCall3778);
            fn=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(fn.getTree());

            OPEN_BRACE220=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_funcCall3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE220);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:515:29: (v+= var )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( ((LA95_0 >= VAR1 && LA95_0 <= VAR2)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:515:29: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_funcCall3784);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            CLOSE_BRACE221=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_funcCall3787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE221);


            // AST REWRITE
            // elements: v, fn
            // token labels: 
            // rule labels: fn, retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_fn=new RewriteRuleSubtreeStream(adaptor,"rule fn",fn!=null?fn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 516:3: -> ^( FUNCCALL $fn ( $v)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:516:7: ^( FUNCCALL $fn ( $v)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(FUNCCALL, "FUNCCALL")
                , root_1);

                adaptor.addChild(root_1, stream_fn.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:516:26: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "funcCall"


    public static class groupOrUnionGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupOrUnionGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:519:1: groupOrUnionGraphPattern : g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) ;
    public final IbmSparqlExtParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.groupOrUnionGraphPattern_return retval = new IbmSparqlExtParser.groupOrUnionGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNION222=null;
        List list_g2=null;
        IbmSparqlExtParser.groupGraphPattern_return g1 =null;

        RuleReturnScope g2 = null;
        XTree UNION222_tree=null;
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:2: (g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:7: g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            {
            pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3823);
            g1=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:28: ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==UNION) ) {
                alt97=1;
            }
            else if ( (LA97_0==BIND||LA97_0==BLANK_NODE_LABEL||LA97_0==CLOSE_CURLY_BRACE||(LA97_0 >= DECIMAL && LA97_0 <= DECIMAL_POSITIVE)||(LA97_0 >= DOT && LA97_0 <= DOUBLE_POSITIVE)||(LA97_0 >= FALSE && LA97_0 <= FILTER)||LA97_0==GRAPH||(LA97_0 >= INTEGER && LA97_0 <= INTEGER_POSITIVE)||LA97_0==IRI_REF||LA97_0==MINUS||(LA97_0 >= OPEN_BRACE && LA97_0 <= OPTIONAL)||(LA97_0 >= PNAME_LN && LA97_0 <= PNAME_NS)||LA97_0==SERVICE||(LA97_0 >= STRING_LITERAL1 && LA97_0 <= STRING_LITERAL_LONG2)||LA97_0==TRUE||LA97_0==VALUES||(LA97_0 >= VAR1 && LA97_0 <= VAR2)) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:30: ( UNION g2+= groupGraphPattern )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:30: ( UNION g2+= groupGraphPattern )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==UNION) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:32: UNION g2+= groupGraphPattern
                    	    {
                    	    UNION222=(Token)match(input,UNION,FOLLOW_UNION_in_groupOrUnionGraphPattern3829); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_UNION.add(UNION222);


                    	    pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3833);
                    	    g2=groupGraphPattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_groupGraphPattern.add(g2.getTree());
                    	    if (list_g2==null) list_g2=new ArrayList();
                    	    list_g2.add(g2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    // AST REWRITE
                    // elements: g1, g2, UNION
                    // token labels: 
                    // rule labels: g1, retval
                    // token list labels: 
                    // rule list labels: g2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g2=new RewriteRuleSubtreeStream(adaptor,"token g2",list_g2);
                    root_0 = (XTree)adaptor.nil();
                    // 520:63: -> ^( UNION $g1 ( $g2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:66: ^( UNION $g1 ( $g2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_UNION.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_g1.nextTree());

                        if ( !(stream_g2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_g2.hasNext() ) {
                            adaptor.addChild(root_1, stream_g2.nextTree());

                        }
                        stream_g2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:520:90: 
                    {
                    // AST REWRITE
                    // elements: g1
                    // token labels: 
                    // rule labels: g1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 520:90: -> $g1
                    {
                        adaptor.addChild(root_0, stream_g1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupOrUnionGraphPattern"


    public static class minusGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "minusGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:523:1: minusGraphPattern : MINUS n= groupGraphPattern -> ^( MINUS $n) ;
    public final IbmSparqlExtParser.minusGraphPattern_return minusGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.minusGraphPattern_return retval = new IbmSparqlExtParser.minusGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token MINUS223=null;
        IbmSparqlExtParser.groupGraphPattern_return n =null;


        XTree MINUS223_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:524:5: ( MINUS n= groupGraphPattern -> ^( MINUS $n) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:524:10: MINUS n= groupGraphPattern
            {
            MINUS223=(Token)match(input,MINUS,FOLLOW_MINUS_in_minusGraphPattern3880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS223);


            pushFollow(FOLLOW_groupGraphPattern_in_minusGraphPattern3884);
            n=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(n.getTree());

            // AST REWRITE
            // elements: MINUS, n
            // token labels: 
            // rule labels: n, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 524:36: -> ^( MINUS $n)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:524:39: ^( MINUS $n)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_MINUS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_n.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "minusGraphPattern"


    public static class filter_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:527:1: filter : FILTER c= constraint -> ^( FILTER $c) ;
    public final IbmSparqlExtParser.filter_return filter() throws RecognitionException {
        IbmSparqlExtParser.filter_return retval = new IbmSparqlExtParser.filter_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token FILTER224=null;
        IbmSparqlExtParser.constraint_return c =null;


        XTree FILTER224_tree=null;
        RewriteRuleTokenStream stream_FILTER=new RewriteRuleTokenStream(adaptor,"token FILTER");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:528:2: ( FILTER c= constraint -> ^( FILTER $c) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:528:7: FILTER c= constraint
            {
            FILTER224=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FILTER.add(FILTER224);


            pushFollow(FOLLOW_constraint_in_filter3914);
            c=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constraint.add(c.getTree());

            // AST REWRITE
            // elements: FILTER, c
            // token labels: 
            // rule labels: c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 530:3: -> ^( FILTER $c)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:530:7: ^( FILTER $c)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_FILTER.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_c.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter"


    public static class constraint_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraint"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:533:1: constraint : ( brackettedExpression | builtInCall | functionCall );
    public final IbmSparqlExtParser.constraint_return constraint() throws RecognitionException {
        IbmSparqlExtParser.constraint_return retval = new IbmSparqlExtParser.constraint_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.brackettedExpression_return brackettedExpression225 =null;

        IbmSparqlExtParser.builtInCall_return builtInCall226 =null;

        IbmSparqlExtParser.functionCall_return functionCall227 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:534:2: ( brackettedExpression | builtInCall | functionCall )
            int alt98=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt98=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt98=2;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }

            switch (alt98) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:534:7: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_brackettedExpression_in_constraint3945);
                    brackettedExpression225=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression225.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:534:30: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_constraint3949);
                    builtInCall226=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall226.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:534:44: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_functionCall_in_constraint3953);
                    functionCall227=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall227.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraint"


    public static class functionCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionCall"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:537:1: functionCall : i= iRIref a= argList -> ^( FUNCTION $i $a) ;
    public final IbmSparqlExtParser.functionCall_return functionCall() throws RecognitionException {
        IbmSparqlExtParser.functionCall_return retval = new IbmSparqlExtParser.functionCall_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return i =null;

        IbmSparqlExtParser.argList_return a =null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:538:2: (i= iRIref a= argList -> ^( FUNCTION $i $a) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:538:7: i= iRIref a= argList
            {
            pushFollow(FOLLOW_iRIref_in_functionCall3969);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            pushFollow(FOLLOW_argList_in_functionCall3973);
            a=argList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_argList.add(a.getTree());

            // AST REWRITE
            // elements: i, a
            // token labels: 
            // rule labels: a, i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 540:3: -> ^( FUNCTION $i $a)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:540:7: ^( FUNCTION $i $a)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_1, stream_a.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionCall"


    public static class argList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:543:1: argList : ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* );
    public final IbmSparqlExtParser.argList_return argList() throws RecognitionException {
        IbmSparqlExtParser.argList_return retval = new IbmSparqlExtParser.argList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token d=null;
        Token OPEN_BRACE229=null;
        Token COMMA230=null;
        Token CLOSE_BRACE231=null;
        List list_e2=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.nil_return nil228 =null;

        RuleReturnScope e2 = null;
        XTree d_tree=null;
        XTree OPEN_BRACE229_tree=null;
        XTree COMMA230_tree=null;
        XTree CLOSE_BRACE231_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:544:2: ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==OPEN_BRACE) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==CLOSE_BRACE) ) {
                    alt101=1;
                }
                else if ( (LA101_1==ABS||LA101_1==AVG||LA101_1==BNODE||LA101_1==BOUND||LA101_1==CEIL||LA101_1==COALESCE||LA101_1==CONCAT||LA101_1==CONTAINS||LA101_1==COUNT||(LA101_1 >= DATATYPE && LA101_1 <= DECIMAL_POSITIVE)||LA101_1==DISTINCT||(LA101_1 >= DOUBLE && LA101_1 <= DOUBLE_POSITIVE)||LA101_1==ENCODE_FOR_URI||LA101_1==EXISTS||LA101_1==FALSE||LA101_1==FLOOR||LA101_1==GROUP_CONCAT||LA101_1==HOURS||LA101_1==IF||(LA101_1 >= INTEGER && LA101_1 <= INTEGER_POSITIVE)||LA101_1==IRI||(LA101_1 >= IRI_REF && LA101_1 <= ISURI)||(LA101_1 >= LANG && LA101_1 <= LANGMATCHES)||LA101_1==LCASE||(LA101_1 >= MAX && LA101_1 <= MIN)||LA101_1==MINUTES||LA101_1==MONTH||LA101_1==NOT||LA101_1==NOW||LA101_1==OPEN_BRACE||(LA101_1 >= PNAME_LN && LA101_1 <= PNAME_NS)||LA101_1==RAND||(LA101_1 >= REGEX && LA101_1 <= REPLACE)||LA101_1==ROUND||(LA101_1 >= SAMETERM && LA101_1 <= SECONDS)||(LA101_1 >= SHA1 && LA101_1 <= SHA512)||(LA101_1 >= STR && LA101_1 <= STRENDS)||(LA101_1 >= STRING_LITERAL1 && LA101_1 <= STRUUID)||LA101_1==SUBSTR||LA101_1==SUM||LA101_1==TIMEZONE||LA101_1==TRUE||LA101_1==TZ||LA101_1==UCASE||LA101_1==URI||LA101_1==UUID||(LA101_1 >= VAR1 && LA101_1 <= VAR2)||LA101_1==YEAR||LA101_1==268||(LA101_1 >= 271 && LA101_1 <= 272)) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:544:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_argList4006);
                    nil228=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil228.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 544:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:545:7: OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE229=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_argList4021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE229);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:545:19: (d= DISTINCT )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==DISTINCT) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:545:19: d= DISTINCT
                            {
                            d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_argList4025); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_argList4030);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:545:44: ( COMMA e2+= expression )*
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);

                        if ( (LA100_0==COMMA) ) {
                            alt100=1;
                        }


                        switch (alt100) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:545:46: COMMA e2+= expression
                    	    {
                    	    COMMA230=(Token)match(input,COMMA,FOLLOW_COMMA_in_argList4034); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA230);


                    	    pushFollow(FOLLOW_expression_in_argList4038);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop100;
                        }
                    } while (true);


                    CLOSE_BRACE231=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_argList4043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE231);


                    // AST REWRITE
                    // elements: e1, e2, d
                    // token labels: d
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 546:10: -> ( $d)? $e1 ( $e2)*
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:546:15: ( $d)?
                        if ( stream_d.hasNext() ) {
                            adaptor.addChild(root_0, stream_d.nextNode());

                        }
                        stream_d.reset();

                        adaptor.addChild(root_0, stream_e1.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:546:24: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argList"


    public static class expressionList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:549:1: expressionList : ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* );
    public final IbmSparqlExtParser.expressionList_return expressionList() throws RecognitionException {
        IbmSparqlExtParser.expressionList_return retval = new IbmSparqlExtParser.expressionList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE233=null;
        Token COMMA234=null;
        Token CLOSE_BRACE235=null;
        List list_e2=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.nil_return nil232 =null;

        RuleReturnScope e2 = null;
        XTree OPEN_BRACE233_tree=null;
        XTree COMMA234_tree=null;
        XTree CLOSE_BRACE235_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:550:2: ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==OPEN_BRACE) ) {
                int LA103_1 = input.LA(2);

                if ( (LA103_1==CLOSE_BRACE) ) {
                    alt103=1;
                }
                else if ( (LA103_1==ABS||LA103_1==AVG||LA103_1==BNODE||LA103_1==BOUND||LA103_1==CEIL||LA103_1==COALESCE||LA103_1==CONCAT||LA103_1==CONTAINS||LA103_1==COUNT||(LA103_1 >= DATATYPE && LA103_1 <= DECIMAL_POSITIVE)||(LA103_1 >= DOUBLE && LA103_1 <= DOUBLE_POSITIVE)||LA103_1==ENCODE_FOR_URI||LA103_1==EXISTS||LA103_1==FALSE||LA103_1==FLOOR||LA103_1==GROUP_CONCAT||LA103_1==HOURS||LA103_1==IF||(LA103_1 >= INTEGER && LA103_1 <= INTEGER_POSITIVE)||LA103_1==IRI||(LA103_1 >= IRI_REF && LA103_1 <= ISURI)||(LA103_1 >= LANG && LA103_1 <= LANGMATCHES)||LA103_1==LCASE||(LA103_1 >= MAX && LA103_1 <= MIN)||LA103_1==MINUTES||LA103_1==MONTH||LA103_1==NOT||LA103_1==NOW||LA103_1==OPEN_BRACE||(LA103_1 >= PNAME_LN && LA103_1 <= PNAME_NS)||LA103_1==RAND||(LA103_1 >= REGEX && LA103_1 <= REPLACE)||LA103_1==ROUND||(LA103_1 >= SAMETERM && LA103_1 <= SECONDS)||(LA103_1 >= SHA1 && LA103_1 <= SHA512)||(LA103_1 >= STR && LA103_1 <= STRENDS)||(LA103_1 >= STRING_LITERAL1 && LA103_1 <= STRUUID)||LA103_1==SUBSTR||LA103_1==SUM||LA103_1==TIMEZONE||LA103_1==TRUE||LA103_1==TZ||LA103_1==UCASE||LA103_1==URI||LA103_1==UUID||(LA103_1 >= VAR1 && LA103_1 <= VAR2)||LA103_1==YEAR||LA103_1==268||(LA103_1 >= 271 && LA103_1 <= 272)) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:550:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_expressionList4081);
                    nil232=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil232.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 550:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:551:7: OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE233=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expressionList4096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE233);


                    pushFollow(FOLLOW_expression_in_expressionList4100);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:551:32: ( COMMA e2+= expression )*
                    loop102:
                    do {
                        int alt102=2;
                        int LA102_0 = input.LA(1);

                        if ( (LA102_0==COMMA) ) {
                            alt102=1;
                        }


                        switch (alt102) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:551:34: COMMA e2+= expression
                    	    {
                    	    COMMA234=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList4104); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA234);


                    	    pushFollow(FOLLOW_expression_in_expressionList4108);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop102;
                        }
                    } while (true);


                    CLOSE_BRACE235=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expressionList4113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE235);


                    // AST REWRITE
                    // elements: e2, e1
                    // token labels: 
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 552:13: -> $e1 ( $e2)*
                    {
                        adaptor.addChild(root_0, stream_e1.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:552:23: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expressionList"


    public static class constructTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructTemplate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:555:1: constructTemplate : OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !;
    public final IbmSparqlExtParser.constructTemplate_return constructTemplate() throws RecognitionException {
        IbmSparqlExtParser.constructTemplate_return retval = new IbmSparqlExtParser.constructTemplate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE236=null;
        Token CLOSE_CURLY_BRACE238=null;
        IbmSparqlExtParser.constructTriples_return constructTriples237 =null;


        XTree OPEN_CURLY_BRACE236_tree=null;
        XTree CLOSE_CURLY_BRACE238_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:556:2: ( OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:556:7: OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE236=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate4150); if (state.failed) return retval;

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:556:25: ( constructTriples )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==BLANK_NODE_LABEL||(LA104_0 >= DECIMAL && LA104_0 <= DECIMAL_POSITIVE)||(LA104_0 >= DOUBLE && LA104_0 <= DOUBLE_POSITIVE)||LA104_0==FALSE||(LA104_0 >= INTEGER && LA104_0 <= INTEGER_POSITIVE)||LA104_0==IRI_REF||LA104_0==OPEN_BRACE||LA104_0==OPEN_SQ_BRACKET||(LA104_0 >= PNAME_LN && LA104_0 <= PNAME_NS)||(LA104_0 >= STRING_LITERAL1 && LA104_0 <= STRING_LITERAL_LONG2)||LA104_0==TRUE||(LA104_0 >= VAR1 && LA104_0 <= VAR2)) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:556:25: constructTriples
                    {
                    pushFollow(FOLLOW_constructTriples_in_constructTemplate4153);
                    constructTriples237=constructTriples();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples237.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE238=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate4156); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructTemplate"


    public static class constructTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:559:1: constructTriples : triplesSameSubject ( DOT ! ( constructTriples )? )? ;
    public final IbmSparqlExtParser.constructTriples_return constructTriples() throws RecognitionException {
        IbmSparqlExtParser.constructTriples_return retval = new IbmSparqlExtParser.constructTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT240=null;
        IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject239 =null;

        IbmSparqlExtParser.constructTriples_return constructTriples241 =null;


        XTree DOT240_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:2: ( triplesSameSubject ( DOT ! ( constructTriples )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:7: triplesSameSubject ( DOT ! ( constructTriples )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_triplesSameSubject_in_constructTriples4171);
            triplesSameSubject239=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject239.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:26: ( DOT ! ( constructTriples )? )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==DOT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:28: DOT ! ( constructTriples )?
                    {
                    DOT240=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples4175); if (state.failed) return retval;

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:33: ( constructTriples )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==BLANK_NODE_LABEL||(LA105_0 >= DECIMAL && LA105_0 <= DECIMAL_POSITIVE)||(LA105_0 >= DOUBLE && LA105_0 <= DOUBLE_POSITIVE)||LA105_0==FALSE||(LA105_0 >= INTEGER && LA105_0 <= INTEGER_POSITIVE)||LA105_0==IRI_REF||LA105_0==OPEN_BRACE||LA105_0==OPEN_SQ_BRACKET||(LA105_0 >= PNAME_LN && LA105_0 <= PNAME_NS)||(LA105_0 >= STRING_LITERAL1 && LA105_0 <= STRING_LITERAL_LONG2)||LA105_0==TRUE||(LA105_0 >= VAR1 && LA105_0 <= VAR2)) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:560:33: constructTriples
                            {
                            pushFollow(FOLLOW_constructTriples_in_constructTriples4178);
                            constructTriples241=constructTriples();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples241.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructTriples"


    public static class triplesSameSubject_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesSameSubject"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:563:1: triplesSameSubject : ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject() throws RecognitionException {
        IbmSparqlExtParser.triplesSameSubject_return retval = new IbmSparqlExtParser.triplesSameSubject_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return s1 =null;

        IbmSparqlExtParser.propertyListNotEmpty_return p1 =null;

        IbmSparqlExtParser.triplesNode_return s2 =null;

        IbmSparqlExtParser.propertyList_return p2 =null;


        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyList=new RewriteRuleSubtreeStream(adaptor,"rule propertyList");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:564:2: ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt107=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt107=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA107_2 = input.LA(2);

                if ( (LA107_2==CLOSE_SQ_BRACKET) ) {
                    alt107=1;
                }
                else if ( (LA107_2==IRI_REF||(LA107_2 >= PNAME_LN && LA107_2 <= PNAME_NS)||(LA107_2 >= VAR1 && LA107_2 <= VAR2)||LA107_2==281) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA107_3 = input.LA(2);

                if ( (LA107_3==CLOSE_BRACE) ) {
                    alt107=1;
                }
                else if ( (LA107_3==BLANK_NODE_LABEL||(LA107_3 >= DECIMAL && LA107_3 <= DECIMAL_POSITIVE)||(LA107_3 >= DOUBLE && LA107_3 <= DOUBLE_POSITIVE)||LA107_3==FALSE||(LA107_3 >= INTEGER && LA107_3 <= INTEGER_POSITIVE)||LA107_3==IRI_REF||LA107_3==OPEN_BRACE||LA107_3==OPEN_SQ_BRACKET||(LA107_3 >= PNAME_LN && LA107_3 <= PNAME_NS)||(LA107_3 >= STRING_LITERAL1 && LA107_3 <= STRING_LITERAL_LONG2)||LA107_3==TRUE||(LA107_3 >= VAR1 && LA107_3 <= VAR2)) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:564:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:564:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:564:7: s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubject4198);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());

                    pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject4202);
                    p1=propertyListNotEmpty((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p1.getTree());

                    }


                    // AST REWRITE
                    // elements: propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 564:72: -> propertyListNotEmpty
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmpty.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:7: s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubject4222);
                    s2=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNode.add(s2.getTree());

                    pushFollow(FOLLOW_propertyList_in_triplesSameSubject4226);
                    p2=propertyList((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyList.add(p2.getTree());

                    }


                    // AST REWRITE
                    // elements: p2, s2
                    // token labels: 
                    // rule labels: p2, retval, s2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"rule p2",p2!=null?p2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 565:72: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:76: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(TRIPLE2, "TRIPLE2")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:87: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SUBJECT, "SUBJECT")
                        , root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:565:105: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubject"


    public static class propertyListNotEmpty_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListNotEmpty"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:568:1: propertyListNotEmpty[CommonTree s, int t] : p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ ;
    public final IbmSparqlExtParser.propertyListNotEmpty_return propertyListNotEmpty(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListNotEmpty_return retval = new IbmSparqlExtParser.propertyListNotEmpty_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON243=null;
        IbmSparqlExtParser.verb_return p1 =null;

        IbmSparqlExtParser.verb_return p2 =null;

        IbmSparqlExtParser.objectList_return objectList242 =null;

        IbmSparqlExtParser.objectList_return objectList244 =null;


        XTree SEMICOLON243_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verb=new RewriteRuleSubtreeStream(adaptor,"rule verb");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:569:2: (p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:569:6: p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            {
            pushFollow(FOLLOW_verb_in_propertyListNotEmpty4275);
            p1=verb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verb.add(p1.getTree());

            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty4277);
            objectList242=objectList(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectList.add(objectList242.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:570:3: ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==SEMICOLON) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:570:5: SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    {
            	    SEMICOLON243=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmpty4284); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON243);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:570:15: (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    int alt108=2;
            	    int LA108_0 = input.LA(1);

            	    if ( (LA108_0==IRI_REF||(LA108_0 >= PNAME_LN && LA108_0 <= PNAME_NS)||(LA108_0 >= VAR1 && LA108_0 <= VAR2)||LA108_0==281) ) {
            	        alt108=1;
            	    }
            	    switch (alt108) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:570:16: p2= verb objectList[$s, (CommonTree)$p2.tree, $t]
            	            {
            	            pushFollow(FOLLOW_verb_in_propertyListNotEmpty4289);
            	            p2=verb();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_verb.add(p2.getTree());

            	            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty4291);
            	            objectList244=objectList(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_objectList.add(objectList244.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            // AST REWRITE
            // elements: objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 572:3: -> ( objectList )+
            {
                if ( !(stream_objectList.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmpty"


    public static class propertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:575:1: propertyList[CommonTree s, int t] : ( propertyListNotEmpty[$s, $t] )? ;
    public final IbmSparqlExtParser.propertyList_return propertyList(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyList_return retval = new IbmSparqlExtParser.propertyList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.propertyListNotEmpty_return propertyListNotEmpty245 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:576:2: ( ( propertyListNotEmpty[$s, $t] )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:576:7: ( propertyListNotEmpty[$s, $t] )?
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:576:7: ( propertyListNotEmpty[$s, $t] )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==IRI_REF||(LA110_0 >= PNAME_LN && LA110_0 <= PNAME_NS)||(LA110_0 >= VAR1 && LA110_0 <= VAR2)||LA110_0==281) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:576:7: propertyListNotEmpty[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmpty_in_propertyList4323);
                    propertyListNotEmpty245=propertyListNotEmpty(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyListNotEmpty245.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyList"


    public static class objectList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:579:1: objectList[CommonTree s, CommonTree p, int t] : object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ ;
    public final IbmSparqlExtParser.objectList_return objectList(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlExtParser.objectList_return retval = new IbmSparqlExtParser.objectList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COMMA247=null;
        IbmSparqlExtParser.object_return object246 =null;

        IbmSparqlExtParser.object_return object248 =null;


        XTree COMMA247_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_object=new RewriteRuleSubtreeStream(adaptor,"rule object");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:580:2: ( object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:581:3: object ( COMMA object )*
            {
            pushFollow(FOLLOW_object_in_objectList4343);
            object246=object();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object.add(object246.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:581:10: ( COMMA object )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:581:11: COMMA object
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectList4346); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);


            	    pushFollow(FOLLOW_object_in_objectList4348);
            	    object248=object();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_object.add(object248.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            // AST REWRITE
            // elements: object, object, object
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 583:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+
            if (t==3) {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:583:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:583:35: ^( VALUE object )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_1);

                    adaptor.addChild(root_1, stream_object.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }

            else // 584:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
            if (t==2) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:584:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:584:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREDICATE, "PREDICATE")
                , root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:584:51: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_object.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 585:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+
            {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:585:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLE, "TRIPLE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:585:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(SUBJECT, "SUBJECT")
                    , root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:585:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:585:54: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectList"


    public static class objectListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:588:1: objectListPath[CommonTree s, CommonTree p, int t] : objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ ;
    public final IbmSparqlExtParser.objectListPath_return objectListPath(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlExtParser.objectListPath_return retval = new IbmSparqlExtParser.objectListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COMMA250=null;
        IbmSparqlExtParser.objectPath_return objectPath249 =null;

        IbmSparqlExtParser.objectPath_return objectPath251 =null;


        XTree COMMA250_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_objectPath=new RewriteRuleSubtreeStream(adaptor,"rule objectPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:589:2: ( objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:590:3: objectPath ( COMMA objectPath )*
            {
            pushFollow(FOLLOW_objectPath_in_objectListPath4457);
            objectPath249=objectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectPath.add(objectPath249.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:590:14: ( COMMA objectPath )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:590:15: COMMA objectPath
            	    {
            	    COMMA250=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectListPath4460); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA250);


            	    pushFollow(FOLLOW_objectPath_in_objectListPath4462);
            	    objectPath251=objectPath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_objectPath.add(objectPath251.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            // AST REWRITE
            // elements: objectPath, objectPath, objectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 592:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+
            if (t==3) {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:592:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:592:35: ^( VALUE objectPath )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_1);

                    adaptor.addChild(root_1, stream_objectPath.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }

            else // 593:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
            if (t==2) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:593:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:593:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREDICATE, "PREDICATE")
                , root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:593:51: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_objectPath.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 594:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+
            {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:594:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLE, "TRIPLE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:594:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(SUBJECT, "SUBJECT")
                    , root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:594:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:594:54: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectListPath"


    public static class object_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:597:1: object : graphNode ;
    public final IbmSparqlExtParser.object_return object() throws RecognitionException {
        IbmSparqlExtParser.object_return retval = new IbmSparqlExtParser.object_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.graphNode_return graphNode252 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:598:2: ( graphNode )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:598:7: graphNode
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_graphNode_in_object4567);
            graphNode252=graphNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNode252.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object"


    public static class objectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:601:1: objectPath : graphNodePath ;
    public final IbmSparqlExtParser.objectPath_return objectPath() throws RecognitionException {
        IbmSparqlExtParser.objectPath_return retval = new IbmSparqlExtParser.objectPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.graphNodePath_return graphNodePath253 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:602:2: ( graphNodePath )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:602:7: graphNodePath
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_graphNodePath_in_objectPath4581);
            graphNodePath253=graphNodePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNodePath253.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectPath"


    public static class verb_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verb"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:606:1: verb : (v= varOrIRIref | 'a' );
    public final IbmSparqlExtParser.verb_return verb() throws RecognitionException {
        IbmSparqlExtParser.verb_return retval = new IbmSparqlExtParser.verb_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal254=null;
        IbmSparqlExtParser.varOrIRIref_return v =null;


        XTree char_literal254_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:607:2: (v= varOrIRIref | 'a' )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==IRI_REF||(LA113_0 >= PNAME_LN && LA113_0 <= PNAME_NS)||(LA113_0 >= VAR1 && LA113_0 <= VAR2)) ) {
                alt113=1;
            }
            else if ( (LA113_0==281) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:607:6: v= varOrIRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrIRIref_in_verb4598);
                    v=varOrIRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:608:5: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal254=(Token)match(input,281,FOLLOW_281_in_verb4607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal254_tree = 
                    (XTree)adaptor.create(char_literal254)
                    ;
                    adaptor.addChild(root_0, char_literal254_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verb"


    public static class triplesSameSubjectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesSameSubjectPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:611:1: triplesSameSubjectPath : ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlExtParser.triplesSameSubjectPath_return triplesSameSubjectPath() throws RecognitionException {
        IbmSparqlExtParser.triplesSameSubjectPath_return retval = new IbmSparqlExtParser.triplesSameSubjectPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_p1=null;
        List list_p2=null;
        IbmSparqlExtParser.varOrTerm_return s1 =null;

        IbmSparqlExtParser.triplesNodePath_return s2 =null;

        RuleReturnScope p1 = null;
        RuleReturnScope p2 = null;
        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        RewriteRuleSubtreeStream stream_propertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListPath");
        RewriteRuleSubtreeStream stream_triplesNodePath=new RewriteRuleSubtreeStream(adaptor,"rule triplesNodePath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:612:2: ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt114=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt114=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA114_2 = input.LA(2);

                if ( (LA114_2==CLOSE_SQ_BRACKET) ) {
                    alt114=1;
                }
                else if ( (LA114_2==IRI_REF||LA114_2==OPEN_BRACE||(LA114_2 >= PNAME_LN && LA114_2 <= PNAME_NS)||(LA114_2 >= VAR1 && LA114_2 <= VAR2)||LA114_2==268||LA114_2==279||LA114_2==281) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA114_3 = input.LA(2);

                if ( (LA114_3==CLOSE_BRACE) ) {
                    alt114=1;
                }
                else if ( (LA114_3==BLANK_NODE_LABEL||(LA114_3 >= DECIMAL && LA114_3 <= DECIMAL_POSITIVE)||(LA114_3 >= DOUBLE && LA114_3 <= DOUBLE_POSITIVE)||LA114_3==FALSE||(LA114_3 >= INTEGER && LA114_3 <= INTEGER_POSITIVE)||LA114_3==IRI_REF||LA114_3==OPEN_BRACE||LA114_3==OPEN_SQ_BRACKET||(LA114_3 >= PNAME_LN && LA114_3 <= PNAME_NS)||(LA114_3 >= STRING_LITERAL1 && LA114_3 <= STRING_LITERAL_LONG2)||LA114_3==TRUE||(LA114_3 >= VAR1 && LA114_3 <= VAR2)) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }

            switch (alt114) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:612:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:612:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:612:7: s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubjectPath4625);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());

                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4629);
                    p1=propertyListNotEmptyPath((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p1.getTree());
                    if (list_p1==null) list_p1=new ArrayList();
                    list_p1.add(p1.getTree());


                    }


                    // AST REWRITE
                    // elements: propertyListNotEmptyPath
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 612:78: -> propertyListNotEmptyPath
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:7: s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNodePath_in_triplesSameSubjectPath4649);
                    s2=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNodePath.add(s2.getTree());

                    pushFollow(FOLLOW_propertyListPath_in_triplesSameSubjectPath4653);
                    p2=propertyListPath((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListPath.add(p2.getTree());
                    if (list_p2==null) list_p2=new ArrayList();
                    list_p2.add(p2.getTree());


                    }


                    // AST REWRITE
                    // elements: p2, s2
                    // token labels: 
                    // rule labels: retval, s2
                    // token list labels: 
                    // rule list labels: p2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"token p2",list_p2);
                    root_0 = (XTree)adaptor.nil();
                    // 613:79: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:83: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(TRIPLE2, "TRIPLE2")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:94: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SUBJECT, "SUBJECT")
                        , root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:613:112: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubjectPath"


    public static class propertyListNotEmptyPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListNotEmptyPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:616:1: propertyListNotEmptyPath[CommonTree s, int t] : (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* ;
    public final IbmSparqlExtParser.propertyListNotEmptyPath_return propertyListNotEmptyPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListNotEmptyPath_return retval = new IbmSparqlExtParser.propertyListNotEmptyPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON255=null;
        IbmSparqlExtParser.verbPath_return p1 =null;

        IbmSparqlExtParser.objectListPath_return v1 =null;

        IbmSparqlExtParser.verbSimple_return p2 =null;

        IbmSparqlExtParser.objectListPath_return v2 =null;

        IbmSparqlExtParser.verbPath_return p3 =null;

        IbmSparqlExtParser.objectList_return v3 =null;

        IbmSparqlExtParser.verbSimple_return p4 =null;

        IbmSparqlExtParser.objectList_return v4 =null;


        XTree SEMICOLON255_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_objectListPath=new RewriteRuleSubtreeStream(adaptor,"rule objectListPath");
        RewriteRuleSubtreeStream stream_verbPath=new RewriteRuleSubtreeStream(adaptor,"rule verbPath");
        RewriteRuleSubtreeStream stream_verbSimple=new RewriteRuleSubtreeStream(adaptor,"rule verbSimple");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:617:2: ( (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:617:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:617:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==IRI_REF||LA115_0==OPEN_BRACE||(LA115_0 >= PNAME_LN && LA115_0 <= PNAME_NS)||LA115_0==268||LA115_0==279||LA115_0==281) ) {
                alt115=1;
            }
            else if ( ((LA115_0 >= VAR1 && LA115_0 <= VAR2)) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:617:9: p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t]
                    {
                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4703);
                    p1=verbPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbPath.add(p1.getTree());

                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4707);
                    v1=objectListPath(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v1.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:618:6: p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t]
                    {
                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4726);
                    p2=verbSimple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbSimple.add(p2.getTree());

                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4730);
                    v2=objectListPath(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v2.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:4: ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==SEMICOLON) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:6: SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    {
            	    SEMICOLON255=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4746); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON255);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:16: ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    int alt117=2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0==IRI_REF||LA117_0==OPEN_BRACE||(LA117_0 >= PNAME_LN && LA117_0 <= PNAME_NS)||(LA117_0 >= VAR1 && LA117_0 <= VAR2)||LA117_0==268||LA117_0==279||LA117_0==281) ) {
            	        alt117=1;
            	    }
            	    switch (alt117) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            int alt116=2;
            	            int LA116_0 = input.LA(1);

            	            if ( (LA116_0==IRI_REF||LA116_0==OPEN_BRACE||(LA116_0 >= PNAME_LN && LA116_0 <= PNAME_NS)||LA116_0==268||LA116_0==279||LA116_0==281) ) {
            	                alt116=1;
            	            }
            	            else if ( ((LA116_0 >= VAR1 && LA116_0 <= VAR2)) ) {
            	                alt116=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 116, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt116) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:620:20: p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4754);
            	                    p3=verbPath();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbPath.add(p3.getTree());

            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4758);
            	                    v3=objectList(s, (CommonTree)(p3!=null?((XTree)p3.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v3.getTree());

            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:621:21: p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4786);
            	                    p4=verbSimple();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbSimple.add(p4.getTree());

            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4790);
            	                    v4=objectList(s, (CommonTree)(p4!=null?((XTree)p4.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v4.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            // AST REWRITE
            // elements: objectList, objectListPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 626:4: -> objectListPath ( objectList )*
            {
                adaptor.addChild(root_0, stream_objectListPath.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:626:23: ( objectList )*
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmptyPath"


    public static class propertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:629:1: propertyListPath[CommonTree s, int t] : ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? ;
    public final IbmSparqlExtParser.propertyListPath_return propertyListPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListPath_return retval = new IbmSparqlExtParser.propertyListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.propertyListNotEmptyPath_return propertyListNotEmptyPath256 =null;


        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:630:2: ( ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:630:7: ( propertyListNotEmptyPath[$s, $t] )?
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:630:7: ( propertyListNotEmptyPath[$s, $t] )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==IRI_REF||LA119_0==OPEN_BRACE||(LA119_0 >= PNAME_LN && LA119_0 <= PNAME_NS)||(LA119_0 >= VAR1 && LA119_0 <= VAR2)||LA119_0==268||LA119_0==279||LA119_0==281) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:630:7: propertyListNotEmptyPath[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_propertyListPath4872);
                    propertyListNotEmptyPath256=propertyListNotEmptyPath(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(propertyListNotEmptyPath256.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: propertyListNotEmptyPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 630:43: -> ( propertyListNotEmptyPath )?
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:630:47: ( propertyListNotEmptyPath )?
                if ( stream_propertyListNotEmptyPath.hasNext() ) {
                    adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                }
                stream_propertyListNotEmptyPath.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListPath"


    public static class verbPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verbPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:633:1: verbPath : path ;
    public final IbmSparqlExtParser.verbPath_return verbPath() throws RecognitionException {
        IbmSparqlExtParser.verbPath_return retval = new IbmSparqlExtParser.verbPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.path_return path257 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:634:2: ( path )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:634:7: path
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_path_in_verbPath4896);
            path257=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path257.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verbPath"


    public static class verbSimple_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verbSimple"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:637:1: verbSimple : var ;
    public final IbmSparqlExtParser.verbSimple_return verbSimple() throws RecognitionException {
        IbmSparqlExtParser.verbSimple_return retval = new IbmSparqlExtParser.verbSimple_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.var_return var258 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:638:2: ( var )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:638:7: var
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_var_in_verbSimple4910);
            var258=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, var258.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verbSimple"


    public static class path_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:641:1: path : pathAlternative ;
    public final IbmSparqlExtParser.path_return path() throws RecognitionException {
        IbmSparqlExtParser.path_return retval = new IbmSparqlExtParser.path_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.pathAlternative_return pathAlternative259 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:642:2: ( pathAlternative )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:642:7: pathAlternative
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_pathAlternative_in_path4924);
            pathAlternative259=pathAlternative();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathAlternative259.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path"


    public static class pathAlternative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathAlternative"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:645:1: pathAlternative : s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlExtParser.pathAlternative_return pathAlternative() throws RecognitionException {
        IbmSparqlExtParser.pathAlternative_return retval = new IbmSparqlExtParser.pathAlternative_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal260=null;
        List list_s2=null;
        IbmSparqlExtParser.pathSequence_return s1 =null;

        RuleReturnScope s2 = null;
        XTree char_literal260_tree=null;
        RewriteRuleTokenStream stream_282=new RewriteRuleTokenStream(adaptor,"token 282");
        RewriteRuleSubtreeStream stream_pathSequence=new RewriteRuleSubtreeStream(adaptor,"rule pathSequence");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:646:2: (s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:646:7: s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathSequence_in_pathAlternative4940);
            s1=pathSequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathSequence.add(s1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:647:10: ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==282) ) {
                alt121=1;
            }
            else if ( (LA121_0==BLANK_NODE_LABEL||LA121_0==CLOSE_BRACE||(LA121_0 >= DECIMAL && LA121_0 <= DECIMAL_POSITIVE)||(LA121_0 >= DOUBLE && LA121_0 <= DOUBLE_POSITIVE)||LA121_0==FALSE||(LA121_0 >= INTEGER && LA121_0 <= INTEGER_POSITIVE)||LA121_0==IRI_REF||LA121_0==OPEN_BRACE||LA121_0==OPEN_SQ_BRACKET||(LA121_0 >= PNAME_LN && LA121_0 <= PNAME_NS)||(LA121_0 >= STRING_LITERAL1 && LA121_0 <= STRING_LITERAL_LONG2)||LA121_0==TRUE||(LA121_0 >= VAR1 && LA121_0 <= VAR2)) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:647:12: ( '|' s2+= pathSequence )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:647:12: ( '|' s2+= pathSequence )+
                    int cnt120=0;
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==282) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:647:13: '|' s2+= pathSequence
                    	    {
                    	    char_literal260=(Token)match(input,282,FOLLOW_282_in_pathAlternative4955); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_282.add(char_literal260);


                    	    pushFollow(FOLLOW_pathSequence_in_pathAlternative4959);
                    	    s2=pathSequence();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathSequence.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt120 >= 1 ) break loop120;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(120, input);
                                throw eee;
                        }
                        cnt120++;
                    } while (true);


                    // AST REWRITE
                    // elements: s1, s2
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 647:36: -> ^( ALT $s1 ( $s2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:647:39: ^( ALT $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(ALT, "ALT")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:648:14: 
                    {
                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 648:14: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathAlternative"


    public static class pathSequence_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathSequence"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:651:1: pathSequence : s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlExtParser.pathSequence_return pathSequence() throws RecognitionException {
        IbmSparqlExtParser.pathSequence_return retval = new IbmSparqlExtParser.pathSequence_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal261=null;
        List list_s2=null;
        IbmSparqlExtParser.pathEltOrInverse_return s1 =null;

        RuleReturnScope s2 = null;
        XTree char_literal261_tree=null;
        RewriteRuleTokenStream stream_273=new RewriteRuleTokenStream(adaptor,"token 273");
        RewriteRuleSubtreeStream stream_pathEltOrInverse=new RewriteRuleSubtreeStream(adaptor,"rule pathEltOrInverse");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:652:2: (s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:652:7: s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence5010);
            s1=pathEltOrInverse();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:653:9: ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==273) ) {
                alt123=1;
            }
            else if ( (LA123_0==BLANK_NODE_LABEL||LA123_0==CLOSE_BRACE||(LA123_0 >= DECIMAL && LA123_0 <= DECIMAL_POSITIVE)||(LA123_0 >= DOUBLE && LA123_0 <= DOUBLE_POSITIVE)||LA123_0==FALSE||(LA123_0 >= INTEGER && LA123_0 <= INTEGER_POSITIVE)||LA123_0==IRI_REF||LA123_0==OPEN_BRACE||LA123_0==OPEN_SQ_BRACKET||(LA123_0 >= PNAME_LN && LA123_0 <= PNAME_NS)||(LA123_0 >= STRING_LITERAL1 && LA123_0 <= STRING_LITERAL_LONG2)||LA123_0==TRUE||(LA123_0 >= VAR1 && LA123_0 <= VAR2)||LA123_0==282) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:653:11: ( '/' s2+= pathEltOrInverse )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:653:11: ( '/' s2+= pathEltOrInverse )+
                    int cnt122=0;
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==273) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:653:12: '/' s2+= pathEltOrInverse
                    	    {
                    	    char_literal261=(Token)match(input,273,FOLLOW_273_in_pathSequence5024); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_273.add(char_literal261);


                    	    pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence5028);
                    	    s2=pathEltOrInverse();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt122 >= 1 ) break loop122;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(122, input);
                                throw eee;
                        }
                        cnt122++;
                    } while (true);


                    // AST REWRITE
                    // elements: s1, s2
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 653:39: -> ^( SEQ $s1 ( $s2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:653:42: ^( SEQ $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SEQ, "SEQ")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:654:13: 
                    {
                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 654:13: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathSequence"


    public static class pathElt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathElt"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:657:1: pathElt : pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) ;
    public final IbmSparqlExtParser.pathElt_return pathElt() throws RecognitionException {
        IbmSparqlExtParser.pathElt_return retval = new IbmSparqlExtParser.pathElt_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.pathPrimary_return pathPrimary262 =null;

        IbmSparqlExtParser.pathMod_return pathMod263 =null;


        RewriteRuleSubtreeStream stream_pathPrimary=new RewriteRuleSubtreeStream(adaptor,"rule pathPrimary");
        RewriteRuleSubtreeStream stream_pathMod=new RewriteRuleSubtreeStream(adaptor,"rule pathMod");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:658:2: ( pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:658:6: pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            {
            pushFollow(FOLLOW_pathPrimary_in_pathElt5075);
            pathPrimary262=pathPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathPrimary.add(pathPrimary262.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:659:9: ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( ((LA124_0 >= 270 && LA124_0 <= 271)||LA124_0==278) ) {
                alt124=1;
            }
            else if ( (LA124_0==BLANK_NODE_LABEL||LA124_0==CLOSE_BRACE||(LA124_0 >= DECIMAL && LA124_0 <= DECIMAL_POSITIVE)||(LA124_0 >= DOUBLE && LA124_0 <= DOUBLE_POSITIVE)||LA124_0==FALSE||(LA124_0 >= INTEGER && LA124_0 <= INTEGER_POSITIVE)||LA124_0==IRI_REF||LA124_0==OPEN_BRACE||LA124_0==OPEN_SQ_BRACKET||(LA124_0 >= PNAME_LN && LA124_0 <= PNAME_NS)||(LA124_0 >= STRING_LITERAL1 && LA124_0 <= STRING_LITERAL_LONG2)||LA124_0==TRUE||(LA124_0 >= VAR1 && LA124_0 <= VAR2)||LA124_0==273||LA124_0==282) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:659:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:659:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:659:12: pathMod
                    {
                    pushFollow(FOLLOW_pathMod_in_pathElt5089);
                    pathMod263=pathMod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathMod.add(pathMod263.getTree());

                    // AST REWRITE
                    // elements: pathPrimary, pathMod
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 659:20: -> ^( ELT pathPrimary pathMod )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:659:23: ^( ELT pathPrimary pathMod )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(ELT, "ELT")
                        , root_1);

                        adaptor.addChild(root_1, stream_pathPrimary.nextTree());

                        adaptor.addChild(root_1, stream_pathMod.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:660:10: 
                    {
                    // AST REWRITE
                    // elements: pathPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 660:10: -> pathPrimary
                    {
                        adaptor.addChild(root_0, stream_pathPrimary.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathElt"


    public static class pathEltOrInverse_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathEltOrInverse"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:663:1: pathEltOrInverse : ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) );
    public final IbmSparqlExtParser.pathEltOrInverse_return pathEltOrInverse() throws RecognitionException {
        IbmSparqlExtParser.pathEltOrInverse_return retval = new IbmSparqlExtParser.pathEltOrInverse_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal265=null;
        IbmSparqlExtParser.pathElt_return pathElt264 =null;

        IbmSparqlExtParser.pathElt_return pathElt266 =null;


        XTree char_literal265_tree=null;
        RewriteRuleTokenStream stream_279=new RewriteRuleTokenStream(adaptor,"token 279");
        RewriteRuleSubtreeStream stream_pathElt=new RewriteRuleSubtreeStream(adaptor,"rule pathElt");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:2: ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IRI_REF||LA125_0==OPEN_BRACE||(LA125_0 >= PNAME_LN && LA125_0 <= PNAME_NS)||LA125_0==268||LA125_0==281) ) {
                alt125=1;
            }
            else if ( (LA125_0==279) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:7: pathElt
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse5131);
                    pathElt264=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathElt264.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:17: ( '^' pathElt -> ^( INV pathElt ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:17: ( '^' pathElt -> ^( INV pathElt ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:18: '^' pathElt
                    {
                    char_literal265=(Token)match(input,279,FOLLOW_279_in_pathEltOrInverse5136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_279.add(char_literal265);


                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse5138);
                    pathElt266=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathElt.add(pathElt266.getTree());

                    // AST REWRITE
                    // elements: pathElt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 664:30: -> ^( INV pathElt )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:664:33: ^( INV pathElt )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, stream_pathElt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathEltOrInverse"


    public static class pathMod_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathMod"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:667:1: pathMod : ( '*' | '?' | '+' );
    public final IbmSparqlExtParser.pathMod_return pathMod() throws RecognitionException {
        IbmSparqlExtParser.pathMod_return retval = new IbmSparqlExtParser.pathMod_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token set267=null;

        XTree set267_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:668:2: ( '*' | '?' | '+' )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:
            {
            root_0 = (XTree)adaptor.nil();


            set267=(Token)input.LT(1);

            if ( (input.LA(1) >= 270 && input.LA(1) <= 271)||input.LA(1)==278 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (XTree)adaptor.create(set267)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathMod"


    public static class pathPrimary_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathPrimary"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:671:1: pathPrimary : ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE ! path CLOSE_BRACE !);
    public final IbmSparqlExtParser.pathPrimary_return pathPrimary() throws RecognitionException {
        IbmSparqlExtParser.pathPrimary_return retval = new IbmSparqlExtParser.pathPrimary_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal269=null;
        Token char_literal270=null;
        Token OPEN_BRACE272=null;
        Token CLOSE_BRACE274=null;
        IbmSparqlExtParser.iRIref_return iRIref268 =null;

        IbmSparqlExtParser.pathNegatedPropertySet_return pathNegatedPropertySet271 =null;

        IbmSparqlExtParser.path_return path273 =null;


        XTree char_literal269_tree=null;
        XTree char_literal270_tree=null;
        XTree OPEN_BRACE272_tree=null;
        XTree CLOSE_BRACE274_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:672:2: ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE ! path CLOSE_BRACE !)
            int alt126=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt126=1;
                }
                break;
            case 281:
                {
                alt126=2;
                }
                break;
            case 268:
                {
                alt126=3;
                }
                break;
            case OPEN_BRACE:
                {
                alt126=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }

            switch (alt126) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:672:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_pathPrimary5184);
                    iRIref268=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref268.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:672:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal269=(Token)match(input,281,FOLLOW_281_in_pathPrimary5188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal269_tree = 
                    (XTree)adaptor.create(char_literal269)
                    ;
                    adaptor.addChild(root_0, char_literal269_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:672:22: '!' pathNegatedPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal270=(Token)match(input,268,FOLLOW_268_in_pathPrimary5192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal270_tree = 
                    (XTree)adaptor.create(char_literal270)
                    ;
                    adaptor.addChild(root_0, char_literal270_tree);
                    }

                    pushFollow(FOLLOW_pathNegatedPropertySet_in_pathPrimary5194);
                    pathNegatedPropertySet271=pathNegatedPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathNegatedPropertySet271.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:672:51: OPEN_BRACE ! path CLOSE_BRACE !
                    {
                    root_0 = (XTree)adaptor.nil();


                    OPEN_BRACE272=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathPrimary5198); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_in_pathPrimary5201);
                    path273=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path273.getTree());

                    CLOSE_BRACE274=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathPrimary5203); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathPrimary"


    public static class pathNegatedPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathNegatedPropertySet"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:675:1: pathNegatedPropertySet : ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE );
    public final IbmSparqlExtParser.pathNegatedPropertySet_return pathNegatedPropertySet() throws RecognitionException {
        IbmSparqlExtParser.pathNegatedPropertySet_return retval = new IbmSparqlExtParser.pathNegatedPropertySet_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE276=null;
        Token char_literal278=null;
        Token CLOSE_BRACE280=null;
        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet275 =null;

        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet277 =null;

        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet279 =null;


        XTree OPEN_BRACE276_tree=null;
        XTree char_literal278_tree=null;
        XTree CLOSE_BRACE280_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:2: ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==IRI_REF||(LA129_0 >= PNAME_LN && LA129_0 <= PNAME_NS)||LA129_0==279||LA129_0==281) ) {
                alt129=1;
            }
            else if ( (LA129_0==OPEN_BRACE) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }
            switch (alt129) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:7: pathOneInPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5218);
                    pathOneInPropertySet275=pathOneInPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet275.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:30: OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();


                    OPEN_BRACE276=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet5222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPEN_BRACE276_tree = 
                    (XTree)adaptor.create(OPEN_BRACE276)
                    ;
                    adaptor.addChild(root_0, OPEN_BRACE276_tree);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:41: ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==IRI_REF||(LA128_0 >= PNAME_LN && LA128_0 <= PNAME_NS)||LA128_0==279||LA128_0==281) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:43: pathOneInPropertySet ( '|' pathOneInPropertySet )*
                            {
                            pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5226);
                            pathOneInPropertySet277=pathOneInPropertySet();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet277.getTree());

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:64: ( '|' pathOneInPropertySet )*
                            loop127:
                            do {
                                int alt127=2;
                                int LA127_0 = input.LA(1);

                                if ( (LA127_0==282) ) {
                                    alt127=1;
                                }


                                switch (alt127) {
                            	case 1 :
                            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:676:66: '|' pathOneInPropertySet
                            	    {
                            	    char_literal278=(Token)match(input,282,FOLLOW_282_in_pathNegatedPropertySet5230); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal278_tree = 
                            	    (XTree)adaptor.create(char_literal278)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal278_tree);
                            	    }

                            	    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5232);
                            	    pathOneInPropertySet279=pathOneInPropertySet();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet279.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop127;
                                }
                            } while (true);


                            }
                            break;

                    }


                    CLOSE_BRACE280=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet5240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLOSE_BRACE280_tree = 
                    (XTree)adaptor.create(CLOSE_BRACE280)
                    ;
                    adaptor.addChild(root_0, CLOSE_BRACE280_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathNegatedPropertySet"


    public static class pathOneInPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathOneInPropertySet"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:679:1: pathOneInPropertySet : ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) );
    public final IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet() throws RecognitionException {
        IbmSparqlExtParser.pathOneInPropertySet_return retval = new IbmSparqlExtParser.pathOneInPropertySet_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal282=null;
        Token char_literal283=null;
        Token char_literal285=null;
        Token char_literal286=null;
        IbmSparqlExtParser.iRIref_return iRIref281 =null;

        IbmSparqlExtParser.iRIref_return iRIref284 =null;


        XTree char_literal282_tree=null;
        XTree char_literal283_tree=null;
        XTree char_literal285_tree=null;
        XTree char_literal286_tree=null;
        RewriteRuleTokenStream stream_279=new RewriteRuleTokenStream(adaptor,"token 279");
        RewriteRuleTokenStream stream_281=new RewriteRuleTokenStream(adaptor,"token 281");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:2: ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) )
            int alt130=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt130=1;
                }
                break;
            case 281:
                {
                alt130=2;
                }
                break;
            case 279:
                {
                int LA130_3 = input.LA(2);

                if ( (LA130_3==281) ) {
                    alt130=4;
                }
                else if ( (LA130_3==IRI_REF||(LA130_3 >= PNAME_LN && LA130_3 <= PNAME_NS)) ) {
                    alt130=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }

            switch (alt130) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet5254);
                    iRIref281=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref281.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal282=(Token)match(input,281,FOLLOW_281_in_pathOneInPropertySet5258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal282_tree = 
                    (XTree)adaptor.create(char_literal282)
                    ;
                    adaptor.addChild(root_0, char_literal282_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:22: ( '^' iRIref -> ^( INV iRIref ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:22: ( '^' iRIref -> ^( INV iRIref ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:23: '^' iRIref
                    {
                    char_literal283=(Token)match(input,279,FOLLOW_279_in_pathOneInPropertySet5263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_279.add(char_literal283);


                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet5265);
                    iRIref284=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iRIref.add(iRIref284.getTree());

                    // AST REWRITE
                    // elements: iRIref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 680:34: -> ^( INV iRIref )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:37: ^( INV iRIref )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, stream_iRIref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:55: ( '^' 'a' -> ^( INV 'a' ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:55: ( '^' 'a' -> ^( INV 'a' ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:56: '^' 'a'
                    {
                    char_literal285=(Token)match(input,279,FOLLOW_279_in_pathOneInPropertySet5280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_279.add(char_literal285);


                    char_literal286=(Token)match(input,281,FOLLOW_281_in_pathOneInPropertySet5282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_281.add(char_literal286);


                    // AST REWRITE
                    // elements: 281
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 680:64: -> ^( INV 'a' )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:680:67: ^( INV 'a' )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_281.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathOneInPropertySet"


    public static class integer_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:683:1: integer : INTEGER ;
    public final IbmSparqlExtParser.integer_return integer() throws RecognitionException {
        IbmSparqlExtParser.integer_return retval = new IbmSparqlExtParser.integer_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER287=null;

        XTree INTEGER287_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:684:2: ( INTEGER )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:684:7: INTEGER
            {
            root_0 = (XTree)adaptor.nil();


            INTEGER287=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_integer5305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER287_tree = 
            (XTree)adaptor.create(INTEGER287)
            ;
            adaptor.addChild(root_0, INTEGER287_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "integer"


    public static class triplesNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:687:1: triplesNode : (c= collection |p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlExtParser.triplesNode_return triplesNode() throws RecognitionException {
        IbmSparqlExtParser.triplesNode_return retval = new IbmSparqlExtParser.triplesNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.collection_return c =null;

        IbmSparqlExtParser.blankNodePropertyList_return p =null;


        RewriteRuleSubtreeStream stream_blankNodePropertyList=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyList");
        RewriteRuleSubtreeStream stream_collection=new RewriteRuleSubtreeStream(adaptor,"rule collection");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:688:2: ( (c= collection |p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:688:7: (c= collection |p= blankNodePropertyList )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:688:7: (c= collection |p= blankNodePropertyList )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==OPEN_BRACE) ) {
                alt131=1;
            }
            else if ( (LA131_0==OPEN_SQ_BRACKET) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:688:9: c= collection
                    {
                    pushFollow(FOLLOW_collection_in_triplesNode5323);
                    c=collection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collection.add(c.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:689:6: p= blankNodePropertyList
                    {
                    pushFollow(FOLLOW_blankNodePropertyList_in_triplesNode5332);
                    p=blankNodePropertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyList.add(p.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: c, p
            // token labels: 
            // rule labels: p, c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 691:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:691:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:691:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:691:27: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesNode"


    public static class triplesNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesNodePath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:694:1: triplesNodePath : (c= collectionPath |p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlExtParser.triplesNodePath_return triplesNodePath() throws RecognitionException {
        IbmSparqlExtParser.triplesNodePath_return retval = new IbmSparqlExtParser.triplesNodePath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.collectionPath_return c =null;

        IbmSparqlExtParser.blankNodePropertyListPath_return p =null;


        RewriteRuleSubtreeStream stream_collectionPath=new RewriteRuleSubtreeStream(adaptor,"rule collectionPath");
        RewriteRuleSubtreeStream stream_blankNodePropertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyListPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:695:2: ( (c= collectionPath |p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:695:7: (c= collectionPath |p= blankNodePropertyListPath )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:695:7: (c= collectionPath |p= blankNodePropertyListPath )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==OPEN_BRACE) ) {
                alt132=1;
            }
            else if ( (LA132_0==OPEN_SQ_BRACKET) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:695:9: c= collectionPath
                    {
                    pushFollow(FOLLOW_collectionPath_in_triplesNodePath5372);
                    c=collectionPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collectionPath.add(c.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:696:6: p= blankNodePropertyListPath
                    {
                    pushFollow(FOLLOW_blankNodePropertyListPath_in_triplesNodePath5384);
                    p=blankNodePropertyListPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyListPath.add(p.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: c, p
            // token labels: 
            // rule labels: p, c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 698:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:698:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:698:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:698:27: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesNodePath"


    public static class blankNodePropertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNodePropertyList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:701:1: blankNodePropertyList : OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlExtParser.blankNodePropertyList_return blankNodePropertyList() throws RecognitionException {
        IbmSparqlExtParser.blankNodePropertyList_return retval = new IbmSparqlExtParser.blankNodePropertyList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET288=null;
        Token CLOSE_SQ_BRACKET289=null;
        IbmSparqlExtParser.propertyListNotEmpty_return p =null;


        XTree OPEN_SQ_BRACKET288_tree=null;
        XTree CLOSE_SQ_BRACKET289_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:702:2: ( OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:702:7: OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET288=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList5421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET288);


            pushFollow(FOLLOW_propertyListNotEmpty_in_blankNodePropertyList5425);
            p=propertyListNotEmpty(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p.getTree());

            CLOSE_SQ_BRACKET289=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList5428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET289);


            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: p, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 704:3: -> ^( PROPERTY_LIST $p)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:704:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyList"


    public static class blankNodePropertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNodePropertyListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:707:1: blankNodePropertyListPath : OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlExtParser.blankNodePropertyListPath_return blankNodePropertyListPath() throws RecognitionException {
        IbmSparqlExtParser.blankNodePropertyListPath_return retval = new IbmSparqlExtParser.blankNodePropertyListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET290=null;
        Token CLOSE_SQ_BRACKET291=null;
        IbmSparqlExtParser.propertyListNotEmptyPath_return p =null;


        XTree OPEN_SQ_BRACKET290_tree=null;
        XTree CLOSE_SQ_BRACKET291_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:708:2: ( OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:708:7: OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET290=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath5457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET290);


            pushFollow(FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath5461);
            p=propertyListNotEmptyPath(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p.getTree());

            CLOSE_SQ_BRACKET291=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath5464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET291);


            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: p, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 710:3: -> ^( PROPERTY_LIST $p)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:710:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyListPath"


    public static class collection_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collection"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:713:1: collection : ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlExtParser.collection_return collection() throws RecognitionException {
        IbmSparqlExtParser.collection_return retval = new IbmSparqlExtParser.collection_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE292=null;
        Token CLOSE_BRACE293=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE292_tree=null;
        XTree CLOSE_BRACE293_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:2: ( ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:7: OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE
            {
            OPEN_BRACE292=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection5493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE292);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:19: (g+= graphNode )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==BLANK_NODE_LABEL||(LA133_0 >= DECIMAL && LA133_0 <= DECIMAL_POSITIVE)||(LA133_0 >= DOUBLE && LA133_0 <= DOUBLE_POSITIVE)||LA133_0==FALSE||(LA133_0 >= INTEGER && LA133_0 <= INTEGER_POSITIVE)||LA133_0==IRI_REF||LA133_0==OPEN_BRACE||LA133_0==OPEN_SQ_BRACKET||(LA133_0 >= PNAME_LN && LA133_0 <= PNAME_NS)||(LA133_0 >= STRING_LITERAL1 && LA133_0 <= STRING_LITERAL_LONG2)||LA133_0==TRUE||(LA133_0 >= VAR1 && LA133_0 <= VAR2)) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:714:19: g+= graphNode
            	    {
            	    pushFollow(FOLLOW_graphNode_in_collection5497);
            	    g=graphNode();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNode.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);


            CLOSE_BRACE293=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection5500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE293);


            }


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 716:3: -> ^( COLLECTION ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:716:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(COLLECTION, "COLLECTION")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collection"


    public static class collectionPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collectionPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:719:1: collectionPath : ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlExtParser.collectionPath_return collectionPath() throws RecognitionException {
        IbmSparqlExtParser.collectionPath_return retval = new IbmSparqlExtParser.collectionPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE294=null;
        Token CLOSE_BRACE295=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE294_tree=null;
        XTree CLOSE_BRACE295_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_graphNodePath=new RewriteRuleSubtreeStream(adaptor,"rule graphNodePath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:2: ( ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:7: OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE
            {
            OPEN_BRACE294=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collectionPath5532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE294);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:19: (g+= graphNodePath )+
            int cnt134=0;
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==BLANK_NODE_LABEL||(LA134_0 >= DECIMAL && LA134_0 <= DECIMAL_POSITIVE)||(LA134_0 >= DOUBLE && LA134_0 <= DOUBLE_POSITIVE)||LA134_0==FALSE||(LA134_0 >= INTEGER && LA134_0 <= INTEGER_POSITIVE)||LA134_0==IRI_REF||LA134_0==OPEN_BRACE||LA134_0==OPEN_SQ_BRACKET||(LA134_0 >= PNAME_LN && LA134_0 <= PNAME_NS)||(LA134_0 >= STRING_LITERAL1 && LA134_0 <= STRING_LITERAL_LONG2)||LA134_0==TRUE||(LA134_0 >= VAR1 && LA134_0 <= VAR2)) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:720:19: g+= graphNodePath
            	    {
            	    pushFollow(FOLLOW_graphNodePath_in_collectionPath5536);
            	    g=graphNodePath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNodePath.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt134 >= 1 ) break loop134;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(134, input);
                        throw eee;
                }
                cnt134++;
            } while (true);


            CLOSE_BRACE295=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collectionPath5539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE295);


            }


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 722:3: -> ^( COLLECTION ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:722:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(COLLECTION, "COLLECTION")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collectionPath"


    public static class graphNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:725:1: graphNode : ( varOrTerm | triplesNode );
    public final IbmSparqlExtParser.graphNode_return graphNode() throws RecognitionException {
        IbmSparqlExtParser.graphNode_return retval = new IbmSparqlExtParser.graphNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return varOrTerm296 =null;

        IbmSparqlExtParser.triplesNode_return triplesNode297 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:726:2: ( varOrTerm | triplesNode )
            int alt135=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt135=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA135_2 = input.LA(2);

                if ( (LA135_2==CLOSE_SQ_BRACKET) ) {
                    alt135=1;
                }
                else if ( (LA135_2==IRI_REF||(LA135_2 >= PNAME_LN && LA135_2 <= PNAME_NS)||(LA135_2 >= VAR1 && LA135_2 <= VAR2)||LA135_2==281) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA135_3 = input.LA(2);

                if ( (LA135_3==CLOSE_BRACE) ) {
                    alt135=1;
                }
                else if ( (LA135_3==BLANK_NODE_LABEL||(LA135_3 >= DECIMAL && LA135_3 <= DECIMAL_POSITIVE)||(LA135_3 >= DOUBLE && LA135_3 <= DOUBLE_POSITIVE)||LA135_3==FALSE||(LA135_3 >= INTEGER && LA135_3 <= INTEGER_POSITIVE)||LA135_3==IRI_REF||LA135_3==OPEN_BRACE||LA135_3==OPEN_SQ_BRACKET||(LA135_3 >= PNAME_LN && LA135_3 <= PNAME_NS)||(LA135_3 >= STRING_LITERAL1 && LA135_3 <= STRING_LITERAL_LONG2)||LA135_3==TRUE||(LA135_3 >= VAR1 && LA135_3 <= VAR2)) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:726:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrTerm_in_graphNode5571);
                    varOrTerm296=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm296.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:726:19: triplesNode
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_triplesNode_in_graphNode5575);
                    triplesNode297=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNode297.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphNode"


    public static class graphNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphNodePath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:729:1: graphNodePath : ( varOrTerm | triplesNodePath );
    public final IbmSparqlExtParser.graphNodePath_return graphNodePath() throws RecognitionException {
        IbmSparqlExtParser.graphNodePath_return retval = new IbmSparqlExtParser.graphNodePath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return varOrTerm298 =null;

        IbmSparqlExtParser.triplesNodePath_return triplesNodePath299 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:730:2: ( varOrTerm | triplesNodePath )
            int alt136=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt136=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA136_2 = input.LA(2);

                if ( (LA136_2==CLOSE_SQ_BRACKET) ) {
                    alt136=1;
                }
                else if ( (LA136_2==IRI_REF||LA136_2==OPEN_BRACE||(LA136_2 >= PNAME_LN && LA136_2 <= PNAME_NS)||(LA136_2 >= VAR1 && LA136_2 <= VAR2)||LA136_2==268||LA136_2==279||LA136_2==281) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA136_3 = input.LA(2);

                if ( (LA136_3==CLOSE_BRACE) ) {
                    alt136=1;
                }
                else if ( (LA136_3==BLANK_NODE_LABEL||(LA136_3 >= DECIMAL && LA136_3 <= DECIMAL_POSITIVE)||(LA136_3 >= DOUBLE && LA136_3 <= DOUBLE_POSITIVE)||LA136_3==FALSE||(LA136_3 >= INTEGER && LA136_3 <= INTEGER_POSITIVE)||LA136_3==IRI_REF||LA136_3==OPEN_BRACE||LA136_3==OPEN_SQ_BRACKET||(LA136_3 >= PNAME_LN && LA136_3 <= PNAME_NS)||(LA136_3 >= STRING_LITERAL1 && LA136_3 <= STRING_LITERAL_LONG2)||LA136_3==TRUE||(LA136_3 >= VAR1 && LA136_3 <= VAR2)) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }

            switch (alt136) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:730:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrTerm_in_graphNodePath5589);
                    varOrTerm298=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm298.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:730:19: triplesNodePath
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_triplesNodePath_in_graphNodePath5593);
                    triplesNodePath299=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNodePath299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphNodePath"


    public static class varOrTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrTerm"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:734:1: varOrTerm : ( var | graphTerm );
    public final IbmSparqlExtParser.varOrTerm_return varOrTerm() throws RecognitionException {
        IbmSparqlExtParser.varOrTerm_return retval = new IbmSparqlExtParser.varOrTerm_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.var_return var300 =null;

        IbmSparqlExtParser.graphTerm_return graphTerm301 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:735:2: ( var | graphTerm )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( ((LA137_0 >= VAR1 && LA137_0 <= VAR2)) ) {
                alt137=1;
            }
            else if ( (LA137_0==BLANK_NODE_LABEL||(LA137_0 >= DECIMAL && LA137_0 <= DECIMAL_POSITIVE)||(LA137_0 >= DOUBLE && LA137_0 <= DOUBLE_POSITIVE)||LA137_0==FALSE||(LA137_0 >= INTEGER && LA137_0 <= INTEGER_POSITIVE)||LA137_0==IRI_REF||LA137_0==OPEN_BRACE||LA137_0==OPEN_SQ_BRACKET||(LA137_0 >= PNAME_LN && LA137_0 <= PNAME_NS)||(LA137_0 >= STRING_LITERAL1 && LA137_0 <= STRING_LITERAL_LONG2)||LA137_0==TRUE) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:735:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_varOrTerm5608);
                    var300=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var300.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:735:13: graphTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphTerm_in_varOrTerm5612);
                    graphTerm301=graphTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphTerm301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varOrTerm"


    public static class varOrIRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrIRIref"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:738:1: varOrIRIref : ( var | iRIref );
    public final IbmSparqlExtParser.varOrIRIref_return varOrIRIref() throws RecognitionException {
        IbmSparqlExtParser.varOrIRIref_return retval = new IbmSparqlExtParser.varOrIRIref_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.var_return var302 =null;

        IbmSparqlExtParser.iRIref_return iRIref303 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:739:2: ( var | iRIref )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( ((LA138_0 >= VAR1 && LA138_0 <= VAR2)) ) {
                alt138=1;
            }
            else if ( (LA138_0==IRI_REF||(LA138_0 >= PNAME_LN && LA138_0 <= PNAME_NS)) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:739:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_varOrIRIref5626);
                    var302=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var302.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:739:13: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_varOrIRIref5630);
                    iRIref303=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref303.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varOrIRIref"


    public static class var_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:742:1: var : (v1= VAR1 -> ^( VAR $v1) |v2= VAR2 -> ^( VAR $v2) );
    public final IbmSparqlExtParser.var_return var() throws RecognitionException {
        IbmSparqlExtParser.var_return retval = new IbmSparqlExtParser.var_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token v1=null;
        Token v2=null;

        XTree v1_tree=null;
        XTree v2_tree=null;
        RewriteRuleTokenStream stream_VAR1=new RewriteRuleTokenStream(adaptor,"token VAR1");
        RewriteRuleTokenStream stream_VAR2=new RewriteRuleTokenStream(adaptor,"token VAR2");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:743:2: (v1= VAR1 -> ^( VAR $v1) |v2= VAR2 -> ^( VAR $v2) )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==VAR1) ) {
                alt139=1;
            }
            else if ( (LA139_0==VAR2) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:743:7: v1= VAR1
                    {
                    v1=(Token)match(input,VAR1,FOLLOW_VAR1_in_var5646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR1.add(v1);


                    // AST REWRITE
                    // elements: v1
                    // token labels: v1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v1=new RewriteRuleTokenStream(adaptor,"token v1",v1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 743:18: -> ^( VAR $v1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:743:22: ^( VAR $v1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(VAR, "VAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_v1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:744:7: v2= VAR2
                    {
                    v2=(Token)match(input,VAR2,FOLLOW_VAR2_in_var5669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR2.add(v2);


                    // AST REWRITE
                    // elements: v2
                    // token labels: v2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v2=new RewriteRuleTokenStream(adaptor,"token v2",v2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 744:18: -> ^( VAR $v2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:744:22: ^( VAR $v2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(VAR, "VAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_v2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var"


    public static class graphTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphTerm"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:747:1: graphTerm : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil );
    public final IbmSparqlExtParser.graphTerm_return graphTerm() throws RecognitionException {
        IbmSparqlExtParser.graphTerm_return retval = new IbmSparqlExtParser.graphTerm_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return iRIref304 =null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral305 =null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral306 =null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral307 =null;

        IbmSparqlExtParser.blankNode_return blankNode308 =null;

        IbmSparqlExtParser.nil_return nil309 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil )
            int alt140=6;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt140=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt140=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt140=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt140=4;
                }
                break;
            case BLANK_NODE_LABEL:
            case OPEN_SQ_BRACKET:
                {
                alt140=5;
                }
                break;
            case OPEN_BRACE:
                {
                alt140=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }

            switch (alt140) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_graphTerm5696);
                    iRIref304=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref304.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_graphTerm5700);
                    rDFLiteral305=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral305.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_graphTerm5704);
                    numericLiteral306=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral306.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_graphTerm5708);
                    booleanLiteral307=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral307.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:63: blankNode
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_blankNode_in_graphTerm5712);
                    blankNode308=blankNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blankNode308.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:748:75: nil
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_nil_in_graphTerm5716);
                    nil309=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nil309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphTerm"


    public static class expression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:751:1: expression : conditionalOrExpression ;
    public final IbmSparqlExtParser.expression_return expression() throws RecognitionException {
        IbmSparqlExtParser.expression_return retval = new IbmSparqlExtParser.expression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.conditionalOrExpression_return conditionalOrExpression310 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:752:2: ( conditionalOrExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:752:7: conditionalOrExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_conditionalOrExpression_in_expression5730);
            conditionalOrExpression310=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression310.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalOrExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:755:1: conditionalOrExpression : c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1;
    public final IbmSparqlExtParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        IbmSparqlExtParser.conditionalOrExpression_return retval = new IbmSparqlExtParser.conditionalOrExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOGICAL_OR311=null;
        List list_c2=null;
        IbmSparqlExtParser.conditionalAndExpression_return c1 =null;

        RuleReturnScope c2 = null;
        XTree LOGICAL_OR311_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_OR=new RewriteRuleTokenStream(adaptor,"token LOGICAL_OR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        boolean isOR=false;
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:757:2: (c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:757:7: c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5752);
            c1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:757:35: ( LOGICAL_OR c2+= conditionalAndExpression )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==LOGICAL_OR) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:757:37: LOGICAL_OR c2+= conditionalAndExpression
            	    {
            	    LOGICAL_OR311=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_conditionalOrExpression5756); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_OR.add(LOGICAL_OR311);


            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5760);
            	    c2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c2.getTree());
            	    if (list_c2==null) list_c2=new ArrayList();
            	    list_c2.add(c2.getTree());


            	    if ( state.backtracking==0 ) {isOR=true;}

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            // AST REWRITE
            // elements: c2, c1, c1, LOGICAL_OR
            // token labels: 
            // rule labels: c1, retval
            // token list labels: 
            // rule list labels: c2
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"token c2",list_c2);
            root_0 = (XTree)adaptor.nil();
            // 759:3: -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ )
            if (isOR==true) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:759:22: ^( LOGICAL_OR $c1 ( $c2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LOGICAL_OR.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_c1.nextTree());

                if ( !(stream_c2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_c2.hasNext() ) {
                    adaptor.addChild(root_1, stream_c2.nextTree());

                }
                stream_c2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 760:3: -> $c1
            {
                adaptor.addChild(root_0, stream_c1.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"


    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalAndExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:763:1: conditionalAndExpression : v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1;
    public final IbmSparqlExtParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        IbmSparqlExtParser.conditionalAndExpression_return retval = new IbmSparqlExtParser.conditionalAndExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOGICAL_AND312=null;
        List list_v2=null;
        IbmSparqlExtParser.valueLogical_return v1 =null;

        RuleReturnScope v2 = null;
        XTree LOGICAL_AND312_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_AND=new RewriteRuleTokenStream(adaptor,"token LOGICAL_AND");
        RewriteRuleSubtreeStream stream_valueLogical=new RewriteRuleSubtreeStream(adaptor,"rule valueLogical");
        boolean isAnd=false;
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:765:2: (v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:765:7: v1= valueLogical ( LOGICAL_AND v2+= valueLogical )*
            {
            pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5820);
            v1=valueLogical();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_valueLogical.add(v1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:765:23: ( LOGICAL_AND v2+= valueLogical )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==LOGICAL_AND) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:765:25: LOGICAL_AND v2+= valueLogical
            	    {
            	    LOGICAL_AND312=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_conditionalAndExpression5824); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_AND.add(LOGICAL_AND312);


            	    pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5828);
            	    v2=valueLogical();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_valueLogical.add(v2.getTree());
            	    if (list_v2==null) list_v2=new ArrayList();
            	    list_v2.add(v2.getTree());


            	    if ( state.backtracking==0 ) {isAnd=true;}

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            // AST REWRITE
            // elements: LOGICAL_AND, v1, v1, v2
            // token labels: 
            // rule labels: v1, retval
            // token list labels: 
            // rule list labels: v2
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"rule v1",v1!=null?v1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v2=new RewriteRuleSubtreeStream(adaptor,"token v2",list_v2);
            root_0 = (XTree)adaptor.nil();
            // 767:3: -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ )
            if (isAnd==true) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:767:23: ^( LOGICAL_AND $v1 ( $v2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LOGICAL_AND.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v1.nextTree());

                if ( !(stream_v2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_v2.hasNext() ) {
                    adaptor.addChild(root_1, stream_v2.nextTree());

                }
                stream_v2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 768:3: -> $v1
            {
                adaptor.addChild(root_0, stream_v1.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"


    public static class valueLogical_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "valueLogical"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:771:1: valueLogical : relationalExpression ;
    public final IbmSparqlExtParser.valueLogical_return valueLogical() throws RecognitionException {
        IbmSparqlExtParser.valueLogical_return retval = new IbmSparqlExtParser.valueLogical_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.relationalExpression_return relationalExpression313 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:772:2: ( relationalExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:772:7: relationalExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_relationalExpression_in_valueLogical5879);
            relationalExpression313=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression313.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "valueLogical"


    public static class relationalExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:775:1: relationalExpression : n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )? ;
    public final IbmSparqlExtParser.relationalExpression_return relationalExpression() throws RecognitionException {
        IbmSparqlExtParser.relationalExpression_return retval = new IbmSparqlExtParser.relationalExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal314=null;
        Token string_literal315=null;
        Token LT316=null;
        Token char_literal317=null;
        Token LTE318=null;
        Token string_literal319=null;
        Token IN320=null;
        Token NOT321=null;
        Token IN322=null;
        IbmSparqlExtParser.numericExpression_return n1 =null;

        IbmSparqlExtParser.numericExpression_return n2 =null;

        IbmSparqlExtParser.numericExpression_return n3 =null;

        IbmSparqlExtParser.numericExpression_return n4 =null;

        IbmSparqlExtParser.numericExpression_return n5 =null;

        IbmSparqlExtParser.numericExpression_return n6 =null;

        IbmSparqlExtParser.numericExpression_return n7 =null;

        IbmSparqlExtParser.expressionList_return e1 =null;

        IbmSparqlExtParser.expressionList_return e2 =null;


        XTree char_literal314_tree=null;
        XTree string_literal315_tree=null;
        XTree LT316_tree=null;
        XTree char_literal317_tree=null;
        XTree LTE318_tree=null;
        XTree string_literal319_tree=null;
        XTree IN320_tree=null;
        XTree NOT321_tree=null;
        XTree IN322_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:776:2: (n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:776:7: n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_numericExpression_in_relationalExpression5895);
            n1=numericExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:776:28: ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )?
            int alt143=9;
            switch ( input.LA(1) ) {
                case 275:
                    {
                    alt143=1;
                    }
                    break;
                case 269:
                    {
                    alt143=2;
                    }
                    break;
                case LT:
                    {
                    alt143=3;
                    }
                    break;
                case 276:
                    {
                    alt143=4;
                    }
                    break;
                case LTE:
                    {
                    alt143=5;
                    }
                    break;
                case 277:
                    {
                    alt143=6;
                    }
                    break;
                case IN:
                    {
                    alt143=7;
                    }
                    break;
                case NOT:
                    {
                    alt143=8;
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:776:30: '=' ^n2= numericExpression
                    {
                    char_literal314=(Token)match(input,275,FOLLOW_275_in_relationalExpression5899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal314_tree = 
                    (XTree)adaptor.create(char_literal314)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal314_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5906);
                    n2=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n2.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:777:15: '!=' ^n3= numericExpression
                    {
                    string_literal315=(Token)match(input,269,FOLLOW_269_in_relationalExpression5922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal315_tree = 
                    (XTree)adaptor.create(string_literal315)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(string_literal315_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5928);
                    n3=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n3.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:778:15: LT ^n4= numericExpression
                    {
                    LT316=(Token)match(input,LT,FOLLOW_LT_in_relationalExpression5947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT316_tree = 
                    (XTree)adaptor.create(LT316)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(LT316_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5954);
                    n4=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n4.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:779:15: '>' ^n5= numericExpression
                    {
                    char_literal317=(Token)match(input,276,FOLLOW_276_in_relationalExpression5973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal317_tree = 
                    (XTree)adaptor.create(char_literal317)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal317_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5980);
                    n5=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n5.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:780:15: LTE ^n6= numericExpression
                    {
                    LTE318=(Token)match(input,LTE,FOLLOW_LTE_in_relationalExpression5999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LTE318_tree = 
                    (XTree)adaptor.create(LTE318)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(LTE318_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression6005);
                    n6=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n6.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:781:15: '>=' ^n7= numericExpression
                    {
                    string_literal319=(Token)match(input,277,FOLLOW_277_in_relationalExpression6024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal319_tree = 
                    (XTree)adaptor.create(string_literal319)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(string_literal319_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression6030);
                    n7=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n7.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:782:15: IN ^e1= expressionList
                    {
                    IN320=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression6049); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN320_tree = 
                    (XTree)adaptor.create(IN320)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(IN320_tree, root_0);
                    }

                    pushFollow(FOLLOW_expressionList_in_relationalExpression6055);
                    e1=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:783:15: NOT ^ IN !e2= expressionList
                    {
                    NOT321=(Token)match(input,NOT,FOLLOW_NOT_in_relationalExpression6079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT321_tree = 
                    (XTree)adaptor.create(NOT321)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(NOT321_tree, root_0);
                    }

                    IN322=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression6082); if (state.failed) return retval;

                    pushFollow(FOLLOW_expressionList_in_relationalExpression6088);
                    e2=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"


    public static class numericExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:787:1: numericExpression : additiveExpression ;
    public final IbmSparqlExtParser.numericExpression_return numericExpression() throws RecognitionException {
        IbmSparqlExtParser.numericExpression_return retval = new IbmSparqlExtParser.numericExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.additiveExpression_return additiveExpression323 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:788:2: ( additiveExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:788:6: additiveExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_additiveExpression_in_numericExpression6154);
            additiveExpression323=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression323.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericExpression"


    public static class additiveExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "additiveExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:791:1: additiveExpression : (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* ;
    public final IbmSparqlExtParser.additiveExpression_return additiveExpression() throws RecognitionException {
        IbmSparqlExtParser.additiveExpression_return retval = new IbmSparqlExtParser.additiveExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token op1=null;
        Token op2=null;
        Token char_literal324=null;
        Token char_literal325=null;
        Token char_literal326=null;
        Token char_literal327=null;
        Token char_literal328=null;
        Token char_literal329=null;
        IbmSparqlExtParser.multiplicativeExpression_return lhs =null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs1 =null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs2 =null;

        IbmSparqlExtParser.numericLiteralPositive_return litp =null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs3 =null;

        IbmSparqlExtParser.numericLiteralNegative_return litn =null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs4 =null;


        XTree op1_tree=null;
        XTree op2_tree=null;
        XTree char_literal324_tree=null;
        XTree char_literal325_tree=null;
        XTree char_literal326_tree=null;
        XTree char_literal327_tree=null;
        XTree char_literal328_tree=null;
        XTree char_literal329_tree=null;
        RewriteRuleTokenStream stream_270=new RewriteRuleTokenStream(adaptor,"token 270");
        RewriteRuleTokenStream stream_271=new RewriteRuleTokenStream(adaptor,"token 271");
        RewriteRuleTokenStream stream_272=new RewriteRuleTokenStream(adaptor,"token 272");
        RewriteRuleTokenStream stream_273=new RewriteRuleTokenStream(adaptor,"token 273");
        RewriteRuleSubtreeStream stream_numericLiteralNegative=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralNegative");
        RewriteRuleSubtreeStream stream_numericLiteralPositive=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralPositive");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:792:2: ( (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:792:6: (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:792:6: (lhs= multiplicativeExpression -> $lhs)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:792:7: lhs= multiplicativeExpression
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6174);
            lhs=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(lhs.getTree());

            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: lhs, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 792:36: -> $lhs
            {
                adaptor.addChild(root_0, stream_lhs.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:793:10: ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            loop148:
            do {
                int alt148=5;
                switch ( input.LA(1) ) {
                case 271:
                    {
                    alt148=1;
                    }
                    break;
                case 272:
                    {
                    alt148=2;
                    }
                    break;
                case DECIMAL_POSITIVE:
                case DOUBLE_POSITIVE:
                case INTEGER_POSITIVE:
                    {
                    alt148=3;
                    }
                    break;
                case DECIMAL_NEGATIVE:
                case DOUBLE_NEGATIVE:
                case INTEGER_NEGATIVE:
                    {
                    alt148=4;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:793:12: '+' rhs1= multiplicativeExpression
            	    {
            	    char_literal324=(Token)match(input,271,FOLLOW_271_in_additiveExpression6193); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_271.add(char_literal324);


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6197);
            	    rhs1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs1.getTree());

            	    // AST REWRITE
            	    // elements: additiveExpression, 271, rhs1
            	    // token labels: 
            	    // rule labels: rhs1, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_rhs1=new RewriteRuleSubtreeStream(adaptor,"rule rhs1",rhs1!=null?rhs1.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 793:46: -> ^( '+' $additiveExpression $rhs1)
            	    {
            	        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:793:49: ^( '+' $additiveExpression $rhs1)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(
            	        stream_271.nextNode()
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_rhs1.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:794:12: '-' rhs2= multiplicativeExpression
            	    {
            	    char_literal325=(Token)match(input,272,FOLLOW_272_in_additiveExpression6222); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_272.add(char_literal325);


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6226);
            	    rhs2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs2.getTree());

            	    // AST REWRITE
            	    // elements: rhs2, 272, additiveExpression
            	    // token labels: 
            	    // rule labels: rhs2, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 794:46: -> ^( '-' $additiveExpression $rhs2)
            	    {
            	        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:794:49: ^( '-' $additiveExpression $rhs2)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(
            	        stream_272.nextNode()
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_rhs2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:795:12: litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralPositive_in_additiveExpression6253);
            	    litp=numericLiteralPositive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralPositive.add(litp.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:796:13: (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    int alt145=2;
            	    int LA145_0 = input.LA(1);

            	    if ( (LA145_0==270||LA145_0==273) ) {
            	        alt145=1;
            	    }
            	    else if ( (LA145_0==AS||LA145_0==CLOSE_BRACE||LA145_0==CLOSE_SQ_BRACKET||LA145_0==COMMA||(LA145_0 >= DECIMAL_NEGATIVE && LA145_0 <= DECIMAL_POSITIVE)||(LA145_0 >= DOUBLE_NEGATIVE && LA145_0 <= DOUBLE_POSITIVE)||LA145_0==IN||(LA145_0 >= INTEGER_NEGATIVE && LA145_0 <= INTEGER_POSITIVE)||(LA145_0 >= LOGICAL_AND && LA145_0 <= LTE)||LA145_0==NOT||LA145_0==OPEN_SQ_BRACKET||LA145_0==SEMICOLON||(LA145_0 >= STRING_LITERAL1 && LA145_0 <= STRING_LITERAL_LONG2)||LA145_0==269||(LA145_0 >= 271 && LA145_0 <= 272)||(LA145_0 >= 275 && LA145_0 <= 277)) ) {
            	        alt145=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 145, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt145) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:796:15: op1= ( '*' | '/' ) rhs3= multiplicativeExpression
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:796:19: ( '*' | '/' )
            	            int alt144=2;
            	            int LA144_0 = input.LA(1);

            	            if ( (LA144_0==270) ) {
            	                alt144=1;
            	            }
            	            else if ( (LA144_0==273) ) {
            	                alt144=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 144, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt144) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:796:20: '*'
            	                    {
            	                    char_literal326=(Token)match(input,270,FOLLOW_270_in_additiveExpression6273); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_270.add(char_literal326);


            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:796:24: '/'
            	                    {
            	                    char_literal327=(Token)match(input,273,FOLLOW_273_in_additiveExpression6275); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_273.add(char_literal327);


            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6280);
            	            rhs3=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs3.getTree());

            	            // AST REWRITE
            	            // elements: litp, op1, rhs3, additiveExpression
            	            // token labels: op1
            	            // rule labels: rhs3, litp, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op1=new RewriteRuleTokenStream(adaptor,"token op1",op1);
            	            RewriteRuleSubtreeStream stream_rhs3=new RewriteRuleSubtreeStream(adaptor,"rule rhs3",rhs3!=null?rhs3.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 797:15: -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:797:18: ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:797:52: ^( $op1 $litp $rhs3)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op1.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litp.nextTree());

            	                adaptor.addChild(root_2, stream_rhs3.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:799:15: 
            	            {
            	            // AST REWRITE
            	            // elements: litp, additiveExpression
            	            // token labels: 
            	            // rule labels: litp, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 799:15: -> ^( BROKEN_PLUS $additiveExpression $litp)
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:799:18: ^( BROKEN_PLUS $additiveExpression $litp)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, stream_litp.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:801:12: litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralNegative_in_additiveExpression6383);
            	    litn=numericLiteralNegative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralNegative.add(litn.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:802:13: (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==270||LA147_0==273) ) {
            	        alt147=1;
            	    }
            	    else if ( (LA147_0==AS||LA147_0==CLOSE_BRACE||LA147_0==CLOSE_SQ_BRACKET||LA147_0==COMMA||(LA147_0 >= DECIMAL_NEGATIVE && LA147_0 <= DECIMAL_POSITIVE)||(LA147_0 >= DOUBLE_NEGATIVE && LA147_0 <= DOUBLE_POSITIVE)||LA147_0==IN||(LA147_0 >= INTEGER_NEGATIVE && LA147_0 <= INTEGER_POSITIVE)||(LA147_0 >= LOGICAL_AND && LA147_0 <= LTE)||LA147_0==NOT||LA147_0==OPEN_SQ_BRACKET||LA147_0==SEMICOLON||(LA147_0 >= STRING_LITERAL1 && LA147_0 <= STRING_LITERAL_LONG2)||LA147_0==269||(LA147_0 >= 271 && LA147_0 <= 272)||(LA147_0 >= 275 && LA147_0 <= 277)) ) {
            	        alt147=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 147, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:802:15: op2= ( '*' | '/' ) rhs4= multiplicativeExpression
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:802:19: ( '*' | '/' )
            	            int alt146=2;
            	            int LA146_0 = input.LA(1);

            	            if ( (LA146_0==270) ) {
            	                alt146=1;
            	            }
            	            else if ( (LA146_0==273) ) {
            	                alt146=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 146, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt146) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:802:20: '*'
            	                    {
            	                    char_literal328=(Token)match(input,270,FOLLOW_270_in_additiveExpression6403); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_270.add(char_literal328);


            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:802:24: '/'
            	                    {
            	                    char_literal329=(Token)match(input,273,FOLLOW_273_in_additiveExpression6405); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_273.add(char_literal329);


            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6410);
            	            rhs4=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs4.getTree());

            	            // AST REWRITE
            	            // elements: litn, rhs4, additiveExpression, op2
            	            // token labels: op2
            	            // rule labels: rhs4, litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op2=new RewriteRuleTokenStream(adaptor,"token op2",op2);
            	            RewriteRuleSubtreeStream stream_rhs4=new RewriteRuleSubtreeStream(adaptor,"rule rhs4",rhs4!=null?rhs4.tree:null);
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 803:15: -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:803:18: ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:803:53: ^( $op2 $litn $rhs4)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op2.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litn.nextTree());

            	                adaptor.addChild(root_2, stream_rhs4.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:805:15: 
            	            {
            	            // AST REWRITE
            	            // elements: additiveExpression, litn
            	            // token labels: 
            	            // rule labels: litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 805:15: -> ^( BROKEN_MINUS $additiveExpression $litn)
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:805:18: ^( BROKEN_MINUS $additiveExpression $litn)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, stream_litn.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"


    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiplicativeExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:810:1: multiplicativeExpression : unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )* ;
    public final IbmSparqlExtParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        IbmSparqlExtParser.multiplicativeExpression_return retval = new IbmSparqlExtParser.multiplicativeExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal331=null;
        Token char_literal333=null;
        IbmSparqlExtParser.unaryExpression_return unaryExpression330 =null;

        IbmSparqlExtParser.unaryExpression_return unaryExpression332 =null;

        IbmSparqlExtParser.unaryExpression_return unaryExpression334 =null;


        XTree char_literal331_tree=null;
        XTree char_literal333_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:811:2: ( unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:811:6: unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )*
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6527);
            unaryExpression330=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression330.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:811:23: ( '*' ^ unaryExpression | '/' ^ unaryExpression )*
            loop149:
            do {
                int alt149=3;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==270) ) {
                    alt149=1;
                }
                else if ( (LA149_0==273) ) {
                    alt149=2;
                }


                switch (alt149) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:811:25: '*' ^ unaryExpression
            	    {
            	    char_literal331=(Token)match(input,270,FOLLOW_270_in_multiplicativeExpression6532); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal331_tree = 
            	    (XTree)adaptor.create(char_literal331)
            	    ;
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal331_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6535);
            	    unaryExpression332=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression332.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:812:10: '/' ^ unaryExpression
            	    {
            	    char_literal333=(Token)match(input,273,FOLLOW_273_in_multiplicativeExpression6547); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal333_tree = 
            	    (XTree)adaptor.create(char_literal333)
            	    ;
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal333_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6550);
            	    unaryExpression334=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression334.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"


    public static class unaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unaryExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:816:1: unaryExpression : ( '!' ^ primaryExpression | '+' ^ primaryExpression | '-' ^ primaryExpression | primaryExpression );
    public final IbmSparqlExtParser.unaryExpression_return unaryExpression() throws RecognitionException {
        IbmSparqlExtParser.unaryExpression_return retval = new IbmSparqlExtParser.unaryExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal335=null;
        Token char_literal337=null;
        Token char_literal339=null;
        IbmSparqlExtParser.primaryExpression_return primaryExpression336 =null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression338 =null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression340 =null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression341 =null;


        XTree char_literal335_tree=null;
        XTree char_literal337_tree=null;
        XTree char_literal339_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:817:2: ( '!' ^ primaryExpression | '+' ^ primaryExpression | '-' ^ primaryExpression | primaryExpression )
            int alt150=4;
            switch ( input.LA(1) ) {
            case 268:
                {
                alt150=1;
                }
                break;
            case 271:
                {
                alt150=2;
                }
                break;
            case 272:
                {
                alt150=3;
                }
                break;
            case ABS:
            case AVG:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case COUNT:
            case DATATYPE:
            case DAY:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FALSE:
            case FLOOR:
            case GROUP_CONCAT:
            case HOURS:
            case IF:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI:
            case IRI_REF:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MAX:
            case MD5:
            case MIN:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case OPEN_BRACE:
            case PNAME_LN:
            case PNAME_NS:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SAMPLE:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case SUM:
            case TIMEZONE:
            case TRUE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case VAR1:
            case VAR2:
            case YEAR:
                {
                alt150=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }

            switch (alt150) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:817:4: '!' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal335=(Token)match(input,268,FOLLOW_268_in_unaryExpression6576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal335_tree = 
                    (XTree)adaptor.create(char_literal335)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal335_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6579);
                    primaryExpression336=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression336.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:818:5: '+' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal337=(Token)match(input,271,FOLLOW_271_in_unaryExpression6585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal337_tree = 
                    (XTree)adaptor.create(char_literal337)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal337_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6588);
                    primaryExpression338=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression338.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:819:5: '-' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal339=(Token)match(input,272,FOLLOW_272_in_unaryExpression6594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal339_tree = 
                    (XTree)adaptor.create(char_literal339)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal339_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6597);
                    primaryExpression340=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression340.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:820:5: primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6603);
                    primaryExpression341=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression341.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"


    public static class primaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primaryExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:823:1: primaryExpression : ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate );
    public final IbmSparqlExtParser.primaryExpression_return primaryExpression() throws RecognitionException {
        IbmSparqlExtParser.primaryExpression_return retval = new IbmSparqlExtParser.primaryExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.brackettedExpression_return brackettedExpression342 =null;

        IbmSparqlExtParser.builtInCall_return builtInCall343 =null;

        IbmSparqlExtParser.iRIrefOrFunction_return iRIrefOrFunction344 =null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral345 =null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral346 =null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral347 =null;

        IbmSparqlExtParser.var_return var348 =null;

        IbmSparqlExtParser.aggregate_return aggregate349 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:824:2: ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate )
            int alt151=8;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt151=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt151=2;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt151=3;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt151=4;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt151=5;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt151=6;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt151=7;
                }
                break;
            case AVG:
            case COUNT:
            case GROUP_CONCAT:
            case MAX:
            case MIN:
            case SAMPLE:
            case SUM:
                {
                alt151=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }

            switch (alt151) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:824:6: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_brackettedExpression_in_primaryExpression6620);
                    brackettedExpression342=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression342.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:825:5: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_primaryExpression6627);
                    builtInCall343=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall343.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:826:5: iRIrefOrFunction
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIrefOrFunction_in_primaryExpression6634);
                    iRIrefOrFunction344=iRIrefOrFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIrefOrFunction344.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:827:5: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_primaryExpression6641);
                    rDFLiteral345=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral345.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:828:5: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_primaryExpression6648);
                    numericLiteral346=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral346.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:829:5: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_primaryExpression6655);
                    booleanLiteral347=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral347.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:830:5: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_primaryExpression6662);
                    var348=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var348.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:831:5: aggregate
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_aggregate_in_primaryExpression6669);
                    aggregate349=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregate349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"


    public static class brackettedExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brackettedExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:834:1: brackettedExpression : ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) ;
    public final IbmSparqlExtParser.brackettedExpression_return brackettedExpression() throws RecognitionException {
        IbmSparqlExtParser.brackettedExpression_return retval = new IbmSparqlExtParser.brackettedExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE350=null;
        Token CLOSE_BRACE351=null;
        IbmSparqlExtParser.expression_return e =null;


        XTree OPEN_BRACE350_tree=null;
        XTree CLOSE_BRACE351_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:835:2: ( ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:835:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:835:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:835:36: OPEN_BRACE e= expression CLOSE_BRACE
            {
            OPEN_BRACE350=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_brackettedExpression6699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE350);


            pushFollow(FOLLOW_expression_in_brackettedExpression6703);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            CLOSE_BRACE351=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_brackettedExpression6705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE351);


            }


            // AST REWRITE
            // elements: e
            // token labels: 
            // rule labels: e, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 837:3: -> ^( EXPRESSION $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:837:7: ^( EXPRESSION $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(EXPRESSION, "EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "brackettedExpression"


    public static class builtInCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtInCall"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:840:1: builtInCall : ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) |s= substringExpression -> $s| STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc );
    public final IbmSparqlExtParser.builtInCall_return builtInCall() throws RecognitionException {
        IbmSparqlExtParser.builtInCall_return retval = new IbmSparqlExtParser.builtInCall_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token STR352=null;
        Token OPEN_BRACE353=null;
        Token CLOSE_BRACE354=null;
        Token LANG355=null;
        Token OPEN_BRACE356=null;
        Token CLOSE_BRACE357=null;
        Token LANGMATCHES358=null;
        Token OPEN_BRACE359=null;
        Token COMMA360=null;
        Token CLOSE_BRACE361=null;
        Token DATATYPE362=null;
        Token OPEN_BRACE363=null;
        Token CLOSE_BRACE364=null;
        Token BOUND365=null;
        Token OPEN_BRACE366=null;
        Token CLOSE_BRACE367=null;
        Token IRI368=null;
        Token OPEN_BRACE369=null;
        Token CLOSE_BRACE370=null;
        Token URI371=null;
        Token OPEN_BRACE372=null;
        Token CLOSE_BRACE373=null;
        Token BNODE374=null;
        Token OPEN_BRACE375=null;
        Token CLOSE_BRACE376=null;
        Token RAND378=null;
        Token ABS380=null;
        Token OPEN_BRACE381=null;
        Token CLOSE_BRACE382=null;
        Token CEIL383=null;
        Token OPEN_BRACE384=null;
        Token CLOSE_BRACE385=null;
        Token FLOOR386=null;
        Token OPEN_BRACE387=null;
        Token CLOSE_BRACE388=null;
        Token ROUND389=null;
        Token OPEN_BRACE390=null;
        Token CLOSE_BRACE391=null;
        Token CONCAT392=null;
        Token STRLEN393=null;
        Token OPEN_BRACE394=null;
        Token CLOSE_BRACE395=null;
        Token UCASE397=null;
        Token OPEN_BRACE398=null;
        Token CLOSE_BRACE399=null;
        Token LCASE400=null;
        Token OPEN_BRACE401=null;
        Token CLOSE_BRACE402=null;
        Token ENCODE_FOR_URI403=null;
        Token OPEN_BRACE404=null;
        Token CLOSE_BRACE405=null;
        Token CONTAINS406=null;
        Token OPEN_BRACE407=null;
        Token COMMA408=null;
        Token CLOSE_BRACE409=null;
        Token STRSTARTS410=null;
        Token OPEN_BRACE411=null;
        Token COMMA412=null;
        Token CLOSE_BRACE413=null;
        Token STRENDS414=null;
        Token OPEN_BRACE415=null;
        Token COMMA416=null;
        Token CLOSE_BRACE417=null;
        Token STRBEFORE418=null;
        Token OPEN_BRACE419=null;
        Token COMMA420=null;
        Token CLOSE_BRACE421=null;
        Token STRAFTER422=null;
        Token OPEN_BRACE423=null;
        Token COMMA424=null;
        Token CLOSE_BRACE425=null;
        Token YEAR426=null;
        Token OPEN_BRACE427=null;
        Token CLOSE_BRACE428=null;
        Token MONTH429=null;
        Token OPEN_BRACE430=null;
        Token CLOSE_BRACE431=null;
        Token DAY432=null;
        Token OPEN_BRACE433=null;
        Token CLOSE_BRACE434=null;
        Token HOURS435=null;
        Token OPEN_BRACE436=null;
        Token CLOSE_BRACE437=null;
        Token MINUTES438=null;
        Token OPEN_BRACE439=null;
        Token CLOSE_BRACE440=null;
        Token SECONDS441=null;
        Token OPEN_BRACE442=null;
        Token CLOSE_BRACE443=null;
        Token TIMEZONE444=null;
        Token OPEN_BRACE445=null;
        Token CLOSE_BRACE446=null;
        Token TZ447=null;
        Token OPEN_BRACE448=null;
        Token CLOSE_BRACE449=null;
        Token NOW450=null;
        Token UUID452=null;
        Token STRUUID454=null;
        Token MD5456=null;
        Token OPEN_BRACE457=null;
        Token CLOSE_BRACE458=null;
        Token SHA1459=null;
        Token OPEN_BRACE460=null;
        Token CLOSE_BRACE461=null;
        Token SHA224462=null;
        Token OPEN_BRACE463=null;
        Token CLOSE_BRACE464=null;
        Token SHA256465=null;
        Token OPEN_BRACE466=null;
        Token CLOSE_BRACE467=null;
        Token SHA384468=null;
        Token OPEN_BRACE469=null;
        Token CLOSE_BRACE470=null;
        Token SHA512471=null;
        Token OPEN_BRACE472=null;
        Token CLOSE_BRACE473=null;
        Token COALESCE474=null;
        Token IF475=null;
        Token OPEN_BRACE476=null;
        Token COMMA477=null;
        Token COMMA478=null;
        Token CLOSE_BRACE479=null;
        Token STRLANG480=null;
        Token OPEN_BRACE481=null;
        Token COMMA482=null;
        Token CLOSE_BRACE483=null;
        Token STRDT484=null;
        Token OPEN_BRACE485=null;
        Token COMMA486=null;
        Token CLOSE_BRACE487=null;
        Token SAMETERM488=null;
        Token OPEN_BRACE489=null;
        Token COMMA490=null;
        Token CLOSE_BRACE491=null;
        Token ISIRI492=null;
        Token OPEN_BRACE493=null;
        Token CLOSE_BRACE494=null;
        Token ISURI495=null;
        Token OPEN_BRACE496=null;
        Token CLOSE_BRACE497=null;
        Token ISBLANK498=null;
        Token OPEN_BRACE499=null;
        Token CLOSE_BRACE500=null;
        Token ISLITERAL501=null;
        Token OPEN_BRACE502=null;
        Token CLOSE_BRACE503=null;
        Token ISNUMERIC504=null;
        Token OPEN_BRACE505=null;
        Token CLOSE_BRACE506=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.expression_return e2 =null;

        IbmSparqlExtParser.expression_return e3 =null;

        IbmSparqlExtParser.expression_return e4 =null;

        IbmSparqlExtParser.expression_return e5 =null;

        IbmSparqlExtParser.var_return v =null;

        IbmSparqlExtParser.expression_return e51 =null;

        IbmSparqlExtParser.expression_return e6 =null;

        IbmSparqlExtParser.expression_return e7 =null;

        IbmSparqlExtParser.expression_return e8 =null;

        IbmSparqlExtParser.expression_return e9 =null;

        IbmSparqlExtParser.expression_return e10 =null;

        IbmSparqlExtParser.expression_return e11 =null;

        IbmSparqlExtParser.expressionList_return e12 =null;

        IbmSparqlExtParser.substringExpression_return s =null;

        IbmSparqlExtParser.expression_return e13 =null;

        IbmSparqlExtParser.expression_return e14 =null;

        IbmSparqlExtParser.expression_return e15 =null;

        IbmSparqlExtParser.expression_return e16 =null;

        IbmSparqlExtParser.expression_return e17 =null;

        IbmSparqlExtParser.expression_return e18 =null;

        IbmSparqlExtParser.expression_return e19 =null;

        IbmSparqlExtParser.expression_return e20 =null;

        IbmSparqlExtParser.expression_return e21 =null;

        IbmSparqlExtParser.expression_return e22 =null;

        IbmSparqlExtParser.expression_return e23 =null;

        IbmSparqlExtParser.expression_return e24 =null;

        IbmSparqlExtParser.expression_return e25 =null;

        IbmSparqlExtParser.expression_return e26 =null;

        IbmSparqlExtParser.expression_return e27 =null;

        IbmSparqlExtParser.expression_return e28 =null;

        IbmSparqlExtParser.expression_return e29 =null;

        IbmSparqlExtParser.expression_return e30 =null;

        IbmSparqlExtParser.expression_return e31 =null;

        IbmSparqlExtParser.expression_return e32 =null;

        IbmSparqlExtParser.expression_return e33 =null;

        IbmSparqlExtParser.expression_return e34 =null;

        IbmSparqlExtParser.expression_return e35 =null;

        IbmSparqlExtParser.expression_return e36 =null;

        IbmSparqlExtParser.expressionList_return e37 =null;

        IbmSparqlExtParser.expression_return e38 =null;

        IbmSparqlExtParser.expression_return e39 =null;

        IbmSparqlExtParser.expression_return e40 =null;

        IbmSparqlExtParser.expression_return e41 =null;

        IbmSparqlExtParser.expression_return e42 =null;

        IbmSparqlExtParser.expression_return e43 =null;

        IbmSparqlExtParser.expression_return e44 =null;

        IbmSparqlExtParser.expression_return e45 =null;

        IbmSparqlExtParser.expression_return e46 =null;

        IbmSparqlExtParser.expression_return e47 =null;

        IbmSparqlExtParser.expression_return e48 =null;

        IbmSparqlExtParser.expression_return e52 =null;

        IbmSparqlExtParser.expression_return e49 =null;

        IbmSparqlExtParser.expression_return e50 =null;

        IbmSparqlExtParser.nil_return nil377 =null;

        IbmSparqlExtParser.nil_return nil379 =null;

        IbmSparqlExtParser.strReplaceExpression_return strReplaceExpression396 =null;

        IbmSparqlExtParser.nil_return nil451 =null;

        IbmSparqlExtParser.nil_return nil453 =null;

        IbmSparqlExtParser.nil_return nil455 =null;

        IbmSparqlExtParser.regexExpression_return regexExpression507 =null;

        IbmSparqlExtParser.existsFunc_return existsFunc508 =null;

        IbmSparqlExtParser.notExistsFunc_return notExistsFunc509 =null;


        XTree STR352_tree=null;
        XTree OPEN_BRACE353_tree=null;
        XTree CLOSE_BRACE354_tree=null;
        XTree LANG355_tree=null;
        XTree OPEN_BRACE356_tree=null;
        XTree CLOSE_BRACE357_tree=null;
        XTree LANGMATCHES358_tree=null;
        XTree OPEN_BRACE359_tree=null;
        XTree COMMA360_tree=null;
        XTree CLOSE_BRACE361_tree=null;
        XTree DATATYPE362_tree=null;
        XTree OPEN_BRACE363_tree=null;
        XTree CLOSE_BRACE364_tree=null;
        XTree BOUND365_tree=null;
        XTree OPEN_BRACE366_tree=null;
        XTree CLOSE_BRACE367_tree=null;
        XTree IRI368_tree=null;
        XTree OPEN_BRACE369_tree=null;
        XTree CLOSE_BRACE370_tree=null;
        XTree URI371_tree=null;
        XTree OPEN_BRACE372_tree=null;
        XTree CLOSE_BRACE373_tree=null;
        XTree BNODE374_tree=null;
        XTree OPEN_BRACE375_tree=null;
        XTree CLOSE_BRACE376_tree=null;
        XTree RAND378_tree=null;
        XTree ABS380_tree=null;
        XTree OPEN_BRACE381_tree=null;
        XTree CLOSE_BRACE382_tree=null;
        XTree CEIL383_tree=null;
        XTree OPEN_BRACE384_tree=null;
        XTree CLOSE_BRACE385_tree=null;
        XTree FLOOR386_tree=null;
        XTree OPEN_BRACE387_tree=null;
        XTree CLOSE_BRACE388_tree=null;
        XTree ROUND389_tree=null;
        XTree OPEN_BRACE390_tree=null;
        XTree CLOSE_BRACE391_tree=null;
        XTree CONCAT392_tree=null;
        XTree STRLEN393_tree=null;
        XTree OPEN_BRACE394_tree=null;
        XTree CLOSE_BRACE395_tree=null;
        XTree UCASE397_tree=null;
        XTree OPEN_BRACE398_tree=null;
        XTree CLOSE_BRACE399_tree=null;
        XTree LCASE400_tree=null;
        XTree OPEN_BRACE401_tree=null;
        XTree CLOSE_BRACE402_tree=null;
        XTree ENCODE_FOR_URI403_tree=null;
        XTree OPEN_BRACE404_tree=null;
        XTree CLOSE_BRACE405_tree=null;
        XTree CONTAINS406_tree=null;
        XTree OPEN_BRACE407_tree=null;
        XTree COMMA408_tree=null;
        XTree CLOSE_BRACE409_tree=null;
        XTree STRSTARTS410_tree=null;
        XTree OPEN_BRACE411_tree=null;
        XTree COMMA412_tree=null;
        XTree CLOSE_BRACE413_tree=null;
        XTree STRENDS414_tree=null;
        XTree OPEN_BRACE415_tree=null;
        XTree COMMA416_tree=null;
        XTree CLOSE_BRACE417_tree=null;
        XTree STRBEFORE418_tree=null;
        XTree OPEN_BRACE419_tree=null;
        XTree COMMA420_tree=null;
        XTree CLOSE_BRACE421_tree=null;
        XTree STRAFTER422_tree=null;
        XTree OPEN_BRACE423_tree=null;
        XTree COMMA424_tree=null;
        XTree CLOSE_BRACE425_tree=null;
        XTree YEAR426_tree=null;
        XTree OPEN_BRACE427_tree=null;
        XTree CLOSE_BRACE428_tree=null;
        XTree MONTH429_tree=null;
        XTree OPEN_BRACE430_tree=null;
        XTree CLOSE_BRACE431_tree=null;
        XTree DAY432_tree=null;
        XTree OPEN_BRACE433_tree=null;
        XTree CLOSE_BRACE434_tree=null;
        XTree HOURS435_tree=null;
        XTree OPEN_BRACE436_tree=null;
        XTree CLOSE_BRACE437_tree=null;
        XTree MINUTES438_tree=null;
        XTree OPEN_BRACE439_tree=null;
        XTree CLOSE_BRACE440_tree=null;
        XTree SECONDS441_tree=null;
        XTree OPEN_BRACE442_tree=null;
        XTree CLOSE_BRACE443_tree=null;
        XTree TIMEZONE444_tree=null;
        XTree OPEN_BRACE445_tree=null;
        XTree CLOSE_BRACE446_tree=null;
        XTree TZ447_tree=null;
        XTree OPEN_BRACE448_tree=null;
        XTree CLOSE_BRACE449_tree=null;
        XTree NOW450_tree=null;
        XTree UUID452_tree=null;
        XTree STRUUID454_tree=null;
        XTree MD5456_tree=null;
        XTree OPEN_BRACE457_tree=null;
        XTree CLOSE_BRACE458_tree=null;
        XTree SHA1459_tree=null;
        XTree OPEN_BRACE460_tree=null;
        XTree CLOSE_BRACE461_tree=null;
        XTree SHA224462_tree=null;
        XTree OPEN_BRACE463_tree=null;
        XTree CLOSE_BRACE464_tree=null;
        XTree SHA256465_tree=null;
        XTree OPEN_BRACE466_tree=null;
        XTree CLOSE_BRACE467_tree=null;
        XTree SHA384468_tree=null;
        XTree OPEN_BRACE469_tree=null;
        XTree CLOSE_BRACE470_tree=null;
        XTree SHA512471_tree=null;
        XTree OPEN_BRACE472_tree=null;
        XTree CLOSE_BRACE473_tree=null;
        XTree COALESCE474_tree=null;
        XTree IF475_tree=null;
        XTree OPEN_BRACE476_tree=null;
        XTree COMMA477_tree=null;
        XTree COMMA478_tree=null;
        XTree CLOSE_BRACE479_tree=null;
        XTree STRLANG480_tree=null;
        XTree OPEN_BRACE481_tree=null;
        XTree COMMA482_tree=null;
        XTree CLOSE_BRACE483_tree=null;
        XTree STRDT484_tree=null;
        XTree OPEN_BRACE485_tree=null;
        XTree COMMA486_tree=null;
        XTree CLOSE_BRACE487_tree=null;
        XTree SAMETERM488_tree=null;
        XTree OPEN_BRACE489_tree=null;
        XTree COMMA490_tree=null;
        XTree CLOSE_BRACE491_tree=null;
        XTree ISIRI492_tree=null;
        XTree OPEN_BRACE493_tree=null;
        XTree CLOSE_BRACE494_tree=null;
        XTree ISURI495_tree=null;
        XTree OPEN_BRACE496_tree=null;
        XTree CLOSE_BRACE497_tree=null;
        XTree ISBLANK498_tree=null;
        XTree OPEN_BRACE499_tree=null;
        XTree CLOSE_BRACE500_tree=null;
        XTree ISLITERAL501_tree=null;
        XTree OPEN_BRACE502_tree=null;
        XTree CLOSE_BRACE503_tree=null;
        XTree ISNUMERIC504_tree=null;
        XTree OPEN_BRACE505_tree=null;
        XTree CLOSE_BRACE506_tree=null;
        RewriteRuleTokenStream stream_BNODE=new RewriteRuleTokenStream(adaptor,"token BNODE");
        RewriteRuleTokenStream stream_MONTH=new RewriteRuleTokenStream(adaptor,"token MONTH");
        RewriteRuleTokenStream stream_RAND=new RewriteRuleTokenStream(adaptor,"token RAND");
        RewriteRuleTokenStream stream_SHA1=new RewriteRuleTokenStream(adaptor,"token SHA1");
        RewriteRuleTokenStream stream_TZ=new RewriteRuleTokenStream(adaptor,"token TZ");
        RewriteRuleTokenStream stream_STRBEFORE=new RewriteRuleTokenStream(adaptor,"token STRBEFORE");
        RewriteRuleTokenStream stream_STR=new RewriteRuleTokenStream(adaptor,"token STR");
        RewriteRuleTokenStream stream_STRSTARTS=new RewriteRuleTokenStream(adaptor,"token STRSTARTS");
        RewriteRuleTokenStream stream_FLOOR=new RewriteRuleTokenStream(adaptor,"token FLOOR");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_YEAR=new RewriteRuleTokenStream(adaptor,"token YEAR");
        RewriteRuleTokenStream stream_ISLITERAL=new RewriteRuleTokenStream(adaptor,"token ISLITERAL");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_ISNUMERIC=new RewriteRuleTokenStream(adaptor,"token ISNUMERIC");
        RewriteRuleTokenStream stream_BOUND=new RewriteRuleTokenStream(adaptor,"token BOUND");
        RewriteRuleTokenStream stream_CEIL=new RewriteRuleTokenStream(adaptor,"token CEIL");
        RewriteRuleTokenStream stream_TIMEZONE=new RewriteRuleTokenStream(adaptor,"token TIMEZONE");
        RewriteRuleTokenStream stream_UUID=new RewriteRuleTokenStream(adaptor,"token UUID");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_SAMETERM=new RewriteRuleTokenStream(adaptor,"token SAMETERM");
        RewriteRuleTokenStream stream_LANGMATCHES=new RewriteRuleTokenStream(adaptor,"token LANGMATCHES");
        RewriteRuleTokenStream stream_STRENDS=new RewriteRuleTokenStream(adaptor,"token STRENDS");
        RewriteRuleTokenStream stream_STRLEN=new RewriteRuleTokenStream(adaptor,"token STRLEN");
        RewriteRuleTokenStream stream_LCASE=new RewriteRuleTokenStream(adaptor,"token LCASE");
        RewriteRuleTokenStream stream_DATATYPE=new RewriteRuleTokenStream(adaptor,"token DATATYPE");
        RewriteRuleTokenStream stream_ENCODE_FOR_URI=new RewriteRuleTokenStream(adaptor,"token ENCODE_FOR_URI");
        RewriteRuleTokenStream stream_NOW=new RewriteRuleTokenStream(adaptor,"token NOW");
        RewriteRuleTokenStream stream_SHA512=new RewriteRuleTokenStream(adaptor,"token SHA512");
        RewriteRuleTokenStream stream_IRI=new RewriteRuleTokenStream(adaptor,"token IRI");
        RewriteRuleTokenStream stream_ISBLANK=new RewriteRuleTokenStream(adaptor,"token ISBLANK");
        RewriteRuleTokenStream stream_ROUND=new RewriteRuleTokenStream(adaptor,"token ROUND");
        RewriteRuleTokenStream stream_CONCAT=new RewriteRuleTokenStream(adaptor,"token CONCAT");
        RewriteRuleTokenStream stream_UCASE=new RewriteRuleTokenStream(adaptor,"token UCASE");
        RewriteRuleTokenStream stream_ISURI=new RewriteRuleTokenStream(adaptor,"token ISURI");
        RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,"token CONTAINS");
        RewriteRuleTokenStream stream_LANG=new RewriteRuleTokenStream(adaptor,"token LANG");
        RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_SHA384=new RewriteRuleTokenStream(adaptor,"token SHA384");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_STRDT=new RewriteRuleTokenStream(adaptor,"token STRDT");
        RewriteRuleTokenStream stream_STRLANG=new RewriteRuleTokenStream(adaptor,"token STRLANG");
        RewriteRuleTokenStream stream_SHA224=new RewriteRuleTokenStream(adaptor,"token SHA224");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRAFTER=new RewriteRuleTokenStream(adaptor,"token STRAFTER");
        RewriteRuleTokenStream stream_SECONDS=new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_STRUUID=new RewriteRuleTokenStream(adaptor,"token STRUUID");
        RewriteRuleTokenStream stream_SHA256=new RewriteRuleTokenStream(adaptor,"token SHA256");
        RewriteRuleTokenStream stream_HOURS=new RewriteRuleTokenStream(adaptor,"token HOURS");
        RewriteRuleTokenStream stream_MINUTES=new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_DAY=new RewriteRuleTokenStream(adaptor,"token DAY");
        RewriteRuleTokenStream stream_ISIRI=new RewriteRuleTokenStream(adaptor,"token ISIRI");
        RewriteRuleTokenStream stream_MD5=new RewriteRuleTokenStream(adaptor,"token MD5");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_substringExpression=new RewriteRuleSubtreeStream(adaptor,"rule substringExpression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:841:2: ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) |s= substringExpression -> $s| STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc )
            int alt153=55;
            switch ( input.LA(1) ) {
            case STR:
                {
                alt153=1;
                }
                break;
            case LANG:
                {
                alt153=2;
                }
                break;
            case LANGMATCHES:
                {
                alt153=3;
                }
                break;
            case DATATYPE:
                {
                alt153=4;
                }
                break;
            case BOUND:
                {
                alt153=5;
                }
                break;
            case IRI:
                {
                alt153=6;
                }
                break;
            case URI:
                {
                alt153=7;
                }
                break;
            case BNODE:
                {
                alt153=8;
                }
                break;
            case RAND:
                {
                alt153=9;
                }
                break;
            case ABS:
                {
                alt153=10;
                }
                break;
            case CEIL:
                {
                alt153=11;
                }
                break;
            case FLOOR:
                {
                alt153=12;
                }
                break;
            case ROUND:
                {
                alt153=13;
                }
                break;
            case CONCAT:
                {
                alt153=14;
                }
                break;
            case SUBSTR:
                {
                alt153=15;
                }
                break;
            case STRLEN:
                {
                alt153=16;
                }
                break;
            case REPLACE:
                {
                alt153=17;
                }
                break;
            case UCASE:
                {
                alt153=18;
                }
                break;
            case LCASE:
                {
                alt153=19;
                }
                break;
            case ENCODE_FOR_URI:
                {
                alt153=20;
                }
                break;
            case CONTAINS:
                {
                alt153=21;
                }
                break;
            case STRSTARTS:
                {
                alt153=22;
                }
                break;
            case STRENDS:
                {
                alt153=23;
                }
                break;
            case STRBEFORE:
                {
                alt153=24;
                }
                break;
            case STRAFTER:
                {
                alt153=25;
                }
                break;
            case YEAR:
                {
                alt153=26;
                }
                break;
            case MONTH:
                {
                alt153=27;
                }
                break;
            case DAY:
                {
                alt153=28;
                }
                break;
            case HOURS:
                {
                alt153=29;
                }
                break;
            case MINUTES:
                {
                alt153=30;
                }
                break;
            case SECONDS:
                {
                alt153=31;
                }
                break;
            case TIMEZONE:
                {
                alt153=32;
                }
                break;
            case TZ:
                {
                alt153=33;
                }
                break;
            case NOW:
                {
                alt153=34;
                }
                break;
            case UUID:
                {
                alt153=35;
                }
                break;
            case STRUUID:
                {
                alt153=36;
                }
                break;
            case MD5:
                {
                alt153=37;
                }
                break;
            case SHA1:
                {
                alt153=38;
                }
                break;
            case SHA224:
                {
                alt153=39;
                }
                break;
            case SHA256:
                {
                alt153=40;
                }
                break;
            case SHA384:
                {
                alt153=41;
                }
                break;
            case SHA512:
                {
                alt153=42;
                }
                break;
            case COALESCE:
                {
                alt153=43;
                }
                break;
            case IF:
                {
                alt153=44;
                }
                break;
            case STRLANG:
                {
                alt153=45;
                }
                break;
            case STRDT:
                {
                alt153=46;
                }
                break;
            case SAMETERM:
                {
                alt153=47;
                }
                break;
            case ISIRI:
                {
                alt153=48;
                }
                break;
            case ISURI:
                {
                alt153=49;
                }
                break;
            case ISBLANK:
                {
                alt153=50;
                }
                break;
            case ISLITERAL:
                {
                alt153=51;
                }
                break;
            case ISNUMERIC:
                {
                alt153=52;
                }
                break;
            case REGEX:
                {
                alt153=53;
                }
                break;
            case EXISTS:
                {
                alt153=54;
                }
                break;
            case NOT:
                {
                alt153=55;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }

            switch (alt153) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:841:4: STR OPEN_BRACE e1= expression CLOSE_BRACE
                    {
                    STR352=(Token)match(input,STR,FOLLOW_STR_in_builtInCall6740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STR.add(STR352);


                    OPEN_BRACE353=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE353);


                    pushFollow(FOLLOW_expression_in_builtInCall6746);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    CLOSE_BRACE354=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE354);


                    // AST REWRITE
                    // elements: STR, e1
                    // token labels: 
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 841:60: -> ^( STR $e1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:841:64: ^( STR $e1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:842:4: LANG OPEN_BRACE e2= expression CLOSE_BRACE
                    {
                    LANG355=(Token)match(input,LANG,FOLLOW_LANG_in_builtInCall6780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANG.add(LANG355);


                    OPEN_BRACE356=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE356);


                    pushFollow(FOLLOW_expression_in_builtInCall6786);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    CLOSE_BRACE357=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE357);


                    // AST REWRITE
                    // elements: LANG, e2
                    // token labels: 
                    // rule labels: e2, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 842:60: -> ^( LANG $e2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:842:64: ^( LANG $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LANG.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:843:4: LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE
                    {
                    LANGMATCHES358=(Token)match(input,LANGMATCHES,FOLLOW_LANGMATCHES_in_builtInCall6819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANGMATCHES.add(LANGMATCHES358);


                    OPEN_BRACE359=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE359);


                    pushFollow(FOLLOW_expression_in_builtInCall6825);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    COMMA360=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA360);


                    pushFollow(FOLLOW_expression_in_builtInCall6831);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    CLOSE_BRACE361=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE361);


                    // AST REWRITE
                    // elements: LANGMATCHES, e3, e4
                    // token labels: 
                    // rule labels: e3, retval, e4
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 843:78: -> ^( LANGMATCHES $e3 $e4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:843:82: ^( LANGMATCHES $e3 $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LANGMATCHES.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:844:4: DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE
                    {
                    DATATYPE362=(Token)match(input,DATATYPE,FOLLOW_DATATYPE_in_builtInCall6858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATATYPE.add(DATATYPE362);


                    OPEN_BRACE363=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE363);


                    pushFollow(FOLLOW_expression_in_builtInCall6864);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());

                    CLOSE_BRACE364=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE364);


                    // AST REWRITE
                    // elements: e5, DATATYPE
                    // token labels: 
                    // rule labels: e5, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 844:60: -> ^( DATATYPE $e5)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:844:64: ^( DATATYPE $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DATATYPE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:845:4: BOUND OPEN_BRACE v= var CLOSE_BRACE
                    {
                    BOUND365=(Token)match(input,BOUND,FOLLOW_BOUND_in_builtInCall6893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOUND.add(BOUND365);


                    OPEN_BRACE366=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE366);


                    pushFollow(FOLLOW_var_in_builtInCall6899);
                    v=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_var.add(v.getTree());

                    CLOSE_BRACE367=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE367);


                    // AST REWRITE
                    // elements: BOUND, v
                    // token labels: 
                    // rule labels: v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 845:60: -> ^( BOUND $v)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:845:64: ^( BOUND $v)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BOUND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_v.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:846:4: IRI OPEN_BRACE e51= expression CLOSE_BRACE
                    {
                    IRI368=(Token)match(input,IRI,FOLLOW_IRI_in_builtInCall6939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI.add(IRI368);


                    OPEN_BRACE369=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE369);


                    pushFollow(FOLLOW_expression_in_builtInCall6945);
                    e51=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e51.getTree());

                    CLOSE_BRACE370=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE370);


                    // AST REWRITE
                    // elements: IRI, e51
                    // token labels: 
                    // rule labels: e51, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e51=new RewriteRuleSubtreeStream(adaptor,"rule e51",e51!=null?e51.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 846:60: -> ^( IRI $e51)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:846:64: ^( IRI $e51)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_IRI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e51.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:847:4: URI OPEN_BRACE e6= expression CLOSE_BRACE
                    {
                    URI371=(Token)match(input,URI,FOLLOW_URI_in_builtInCall6978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_URI.add(URI371);


                    OPEN_BRACE372=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE372);


                    pushFollow(FOLLOW_expression_in_builtInCall6984);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());

                    CLOSE_BRACE373=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE373);


                    // AST REWRITE
                    // elements: e6, URI
                    // token labels: 
                    // rule labels: e6, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 847:60: -> ^( URI $e6)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:847:64: ^( URI $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_URI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:4: BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    {
                    BNODE374=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall7018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BNODE.add(BNODE374);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:10: ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==OPEN_BRACE) ) {
                        int LA152_1 = input.LA(2);

                        if ( (LA152_1==CLOSE_BRACE) ) {
                            alt152=2;
                        }
                        else if ( (LA152_1==ABS||LA152_1==AVG||LA152_1==BNODE||LA152_1==BOUND||LA152_1==CEIL||LA152_1==COALESCE||LA152_1==CONCAT||LA152_1==CONTAINS||LA152_1==COUNT||(LA152_1 >= DATATYPE && LA152_1 <= DECIMAL_POSITIVE)||(LA152_1 >= DOUBLE && LA152_1 <= DOUBLE_POSITIVE)||LA152_1==ENCODE_FOR_URI||LA152_1==EXISTS||LA152_1==FALSE||LA152_1==FLOOR||LA152_1==GROUP_CONCAT||LA152_1==HOURS||LA152_1==IF||(LA152_1 >= INTEGER && LA152_1 <= INTEGER_POSITIVE)||LA152_1==IRI||(LA152_1 >= IRI_REF && LA152_1 <= ISURI)||(LA152_1 >= LANG && LA152_1 <= LANGMATCHES)||LA152_1==LCASE||(LA152_1 >= MAX && LA152_1 <= MIN)||LA152_1==MINUTES||LA152_1==MONTH||LA152_1==NOT||LA152_1==NOW||LA152_1==OPEN_BRACE||(LA152_1 >= PNAME_LN && LA152_1 <= PNAME_NS)||LA152_1==RAND||(LA152_1 >= REGEX && LA152_1 <= REPLACE)||LA152_1==ROUND||(LA152_1 >= SAMETERM && LA152_1 <= SECONDS)||(LA152_1 >= SHA1 && LA152_1 <= SHA512)||(LA152_1 >= STR && LA152_1 <= STRENDS)||(LA152_1 >= STRING_LITERAL1 && LA152_1 <= STRUUID)||LA152_1==SUBSTR||LA152_1==SUM||LA152_1==TIMEZONE||LA152_1==TRUE||LA152_1==TZ||LA152_1==UCASE||LA152_1==URI||LA152_1==UUID||(LA152_1 >= VAR1 && LA152_1 <= VAR2)||LA152_1==YEAR||LA152_1==268||(LA152_1 >= 271 && LA152_1 <= 272)) ) {
                            alt152=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 152, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 152, 0, input);

                        throw nvae;

                    }
                    switch (alt152) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:12: OPEN_BRACE e7= expression CLOSE_BRACE
                            {
                            OPEN_BRACE375=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7022); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE375);


                            pushFollow(FOLLOW_expression_in_builtInCall7026);
                            e7=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e7.getTree());

                            CLOSE_BRACE376=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7028); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE376);


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:51: nil
                            {
                            pushFollow(FOLLOW_nil_in_builtInCall7032);
                            nil377=nil();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nil.add(nil377.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: e7, BNODE
                    // token labels: 
                    // rule labels: e7, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 848:60: -> ^( BNODE ( $e7)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:64: ^( BNODE ( $e7)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BNODE.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:848:74: ( $e7)?
                        if ( stream_e7.hasNext() ) {
                            adaptor.addChild(root_1, stream_e7.nextTree());

                        }
                        stream_e7.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:849:4: RAND nil
                    {
                    RAND378=(Token)match(input,RAND,FOLLOW_RAND_in_builtInCall7055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAND.add(RAND378);


                    pushFollow(FOLLOW_nil_in_builtInCall7057);
                    nil379=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil379.getTree());

                    // AST REWRITE
                    // elements: RAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 849:60: -> ^( RAND NIL )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:849:64: ^( RAND NIL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_RAND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:850:4: ABS OPEN_BRACE e8= expression CLOSE_BRACE
                    {
                    ABS380=(Token)match(input,ABS,FOLLOW_ABS_in_builtInCall7120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABS.add(ABS380);


                    OPEN_BRACE381=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE381);


                    pushFollow(FOLLOW_expression_in_builtInCall7126);
                    e8=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e8.getTree());

                    CLOSE_BRACE382=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE382);


                    // AST REWRITE
                    // elements: e8, ABS
                    // token labels: 
                    // rule labels: e8, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e8=new RewriteRuleSubtreeStream(adaptor,"rule e8",e8!=null?e8.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 850:60: -> ^( ABS $e8)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:850:64: ^( ABS $e8)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ABS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e8.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:851:4: CEIL OPEN_BRACE e9= expression CLOSE_BRACE
                    {
                    CEIL383=(Token)match(input,CEIL,FOLLOW_CEIL_in_builtInCall7160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CEIL.add(CEIL383);


                    OPEN_BRACE384=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE384);


                    pushFollow(FOLLOW_expression_in_builtInCall7166);
                    e9=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e9.getTree());

                    CLOSE_BRACE385=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE385);


                    // AST REWRITE
                    // elements: e9, CEIL
                    // token labels: 
                    // rule labels: e9, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e9=new RewriteRuleSubtreeStream(adaptor,"rule e9",e9!=null?e9.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 851:60: -> ^( CEIL $e9)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:851:64: ^( CEIL $e9)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CEIL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e9.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 12 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:852:4: FLOOR OPEN_BRACE e10= expression CLOSE_BRACE
                    {
                    FLOOR386=(Token)match(input,FLOOR,FOLLOW_FLOOR_in_builtInCall7199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FLOOR.add(FLOOR386);


                    OPEN_BRACE387=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE387);


                    pushFollow(FOLLOW_expression_in_builtInCall7205);
                    e10=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e10.getTree());

                    CLOSE_BRACE388=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE388);


                    // AST REWRITE
                    // elements: FLOOR, e10
                    // token labels: 
                    // rule labels: e10, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e10=new RewriteRuleSubtreeStream(adaptor,"rule e10",e10!=null?e10.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 852:60: -> ^( FLOOR $e10)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:852:64: ^( FLOOR $e10)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_FLOOR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e10.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 13 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:853:4: ROUND OPEN_BRACE e11= expression CLOSE_BRACE
                    {
                    ROUND389=(Token)match(input,ROUND,FOLLOW_ROUND_in_builtInCall7236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND.add(ROUND389);


                    OPEN_BRACE390=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE390);


                    pushFollow(FOLLOW_expression_in_builtInCall7242);
                    e11=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e11.getTree());

                    CLOSE_BRACE391=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE391);


                    // AST REWRITE
                    // elements: e11, ROUND
                    // token labels: 
                    // rule labels: e11, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e11=new RewriteRuleSubtreeStream(adaptor,"rule e11",e11!=null?e11.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 853:60: -> ^( ROUND $e11)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:853:64: ^( ROUND $e11)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ROUND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e11.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 14 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:854:4: CONCAT e12= expressionList
                    {
                    CONCAT392=(Token)match(input,CONCAT,FOLLOW_CONCAT_in_builtInCall7273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONCAT.add(CONCAT392);


                    pushFollow(FOLLOW_expressionList_in_builtInCall7277);
                    e12=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e12.getTree());

                    // AST REWRITE
                    // elements: e12, CONCAT
                    // token labels: 
                    // rule labels: e12, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e12=new RewriteRuleSubtreeStream(adaptor,"rule e12",e12!=null?e12.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 854:60: -> ^( CONCAT $e12)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:854:64: ^( CONCAT $e12)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONCAT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e12.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:855:4: s= substringExpression
                    {
                    pushFollow(FOLLOW_substringExpression_in_builtInCall7326);
                    s=substringExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substringExpression.add(s.getTree());

                    // AST REWRITE
                    // elements: s
                    // token labels: 
                    // rule labels: s, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 855:60: -> $s
                    {
                        adaptor.addChild(root_0, stream_s.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 16 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:856:4: STRLEN OPEN_BRACE e13= expression CLOSE_BRACE
                    {
                    STRLEN393=(Token)match(input,STRLEN,FOLLOW_STRLEN_in_builtInCall7371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLEN.add(STRLEN393);


                    OPEN_BRACE394=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE394);


                    pushFollow(FOLLOW_expression_in_builtInCall7377);
                    e13=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e13.getTree());

                    CLOSE_BRACE395=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE395);


                    // AST REWRITE
                    // elements: e13, STRLEN
                    // token labels: 
                    // rule labels: e13, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e13=new RewriteRuleSubtreeStream(adaptor,"rule e13",e13!=null?e13.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 856:60: -> ^( STRLEN $e13)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:856:64: ^( STRLEN $e13)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRLEN.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e13.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 17 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:857:7: strReplaceExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_strReplaceExpression_in_builtInCall7410);
                    strReplaceExpression396=strReplaceExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strReplaceExpression396.getTree());

                    }
                    break;
                case 18 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:858:4: UCASE OPEN_BRACE e14= expression CLOSE_BRACE
                    {
                    UCASE397=(Token)match(input,UCASE,FOLLOW_UCASE_in_builtInCall7415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UCASE.add(UCASE397);


                    OPEN_BRACE398=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE398);


                    pushFollow(FOLLOW_expression_in_builtInCall7421);
                    e14=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e14.getTree());

                    CLOSE_BRACE399=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE399);


                    // AST REWRITE
                    // elements: e14, UCASE
                    // token labels: 
                    // rule labels: e14, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e14=new RewriteRuleSubtreeStream(adaptor,"rule e14",e14!=null?e14.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 858:60: -> ^( UCASE $e14)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:858:64: ^( UCASE $e14)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_UCASE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e14.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 19 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:859:4: LCASE OPEN_BRACE e15= expression CLOSE_BRACE
                    {
                    LCASE400=(Token)match(input,LCASE,FOLLOW_LCASE_in_builtInCall7452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCASE.add(LCASE400);


                    OPEN_BRACE401=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE401);


                    pushFollow(FOLLOW_expression_in_builtInCall7458);
                    e15=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e15.getTree());

                    CLOSE_BRACE402=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE402);


                    // AST REWRITE
                    // elements: LCASE, e15
                    // token labels: 
                    // rule labels: e15, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e15=new RewriteRuleSubtreeStream(adaptor,"rule e15",e15!=null?e15.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 859:60: -> ^( LCASE $e15)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:859:64: ^( LCASE $e15)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LCASE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e15.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 20 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:860:4: ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE
                    {
                    ENCODE_FOR_URI403=(Token)match(input,ENCODE_FOR_URI,FOLLOW_ENCODE_FOR_URI_in_builtInCall7489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODE_FOR_URI.add(ENCODE_FOR_URI403);


                    OPEN_BRACE404=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE404);


                    pushFollow(FOLLOW_expression_in_builtInCall7495);
                    e16=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e16.getTree());

                    CLOSE_BRACE405=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE405);


                    // AST REWRITE
                    // elements: ENCODE_FOR_URI, e16
                    // token labels: 
                    // rule labels: e16, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e16=new RewriteRuleSubtreeStream(adaptor,"rule e16",e16!=null?e16.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 860:60: -> ^( ENCODE_FOR_URI $e16)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:860:64: ^( ENCODE_FOR_URI $e16)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ENCODE_FOR_URI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e16.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 21 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:861:4: CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE
                    {
                    CONTAINS406=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_builtInCall7517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTAINS.add(CONTAINS406);


                    OPEN_BRACE407=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE407);


                    pushFollow(FOLLOW_expression_in_builtInCall7523);
                    e17=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e17.getTree());

                    COMMA408=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA408);


                    pushFollow(FOLLOW_expression_in_builtInCall7529);
                    e18=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e18.getTree());

                    CLOSE_BRACE409=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE409);


                    // AST REWRITE
                    // elements: e17, e18, CONTAINS
                    // token labels: 
                    // rule labels: e17, e18, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e17=new RewriteRuleSubtreeStream(adaptor,"rule e17",e17!=null?e17.tree:null);
                    RewriteRuleSubtreeStream stream_e18=new RewriteRuleSubtreeStream(adaptor,"rule e18",e18!=null?e18.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 861:78: -> ^( CONTAINS $e17 $e18)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:861:82: ^( CONTAINS $e17 $e18)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONTAINS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e17.nextTree());

                        adaptor.addChild(root_1, stream_e18.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 22 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:862:4: STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE
                    {
                    STRSTARTS410=(Token)match(input,STRSTARTS,FOLLOW_STRSTARTS_in_builtInCall7557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRSTARTS.add(STRSTARTS410);


                    OPEN_BRACE411=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE411);


                    pushFollow(FOLLOW_expression_in_builtInCall7563);
                    e19=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e19.getTree());

                    COMMA412=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA412);


                    pushFollow(FOLLOW_expression_in_builtInCall7569);
                    e20=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e20.getTree());

                    CLOSE_BRACE413=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE413);


                    // AST REWRITE
                    // elements: e19, e20, STRSTARTS
                    // token labels: 
                    // rule labels: e20, e19, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e20=new RewriteRuleSubtreeStream(adaptor,"rule e20",e20!=null?e20.tree:null);
                    RewriteRuleSubtreeStream stream_e19=new RewriteRuleSubtreeStream(adaptor,"rule e19",e19!=null?e19.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 862:78: -> ^( STRSTARTS $e19 $e20)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:862:82: ^( STRSTARTS $e19 $e20)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRSTARTS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e19.nextTree());

                        adaptor.addChild(root_1, stream_e20.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 23 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:863:4: STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRENDS414=(Token)match(input,STRENDS,FOLLOW_STRENDS_in_builtInCall7596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRENDS.add(STRENDS414);


                    OPEN_BRACE415=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE415);


                    pushFollow(FOLLOW_expression_in_builtInCall7602);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA416=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA416);


                    pushFollow(FOLLOW_expression_in_builtInCall7608);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE417=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE417);


                    // AST REWRITE
                    // elements: e22, STRENDS, e21
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 863:78: -> ^( STRENDS $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:863:82: ^( STRENDS $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRENDS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 24 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:864:4: STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRBEFORE418=(Token)match(input,STRBEFORE,FOLLOW_STRBEFORE_in_builtInCall7637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRBEFORE.add(STRBEFORE418);


                    OPEN_BRACE419=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE419);


                    pushFollow(FOLLOW_expression_in_builtInCall7643);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA420=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA420);


                    pushFollow(FOLLOW_expression_in_builtInCall7649);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE421=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE421);


                    // AST REWRITE
                    // elements: e21, e22, STRBEFORE
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 864:80: -> ^( STRBEFORE $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:864:84: ^( STRBEFORE $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRBEFORE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 25 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:865:4: STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRAFTER422=(Token)match(input,STRAFTER,FOLLOW_STRAFTER_in_builtInCall7678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRAFTER.add(STRAFTER422);


                    OPEN_BRACE423=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE423);


                    pushFollow(FOLLOW_expression_in_builtInCall7684);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA424=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA424);


                    pushFollow(FOLLOW_expression_in_builtInCall7690);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE425=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE425);


                    // AST REWRITE
                    // elements: e21, STRAFTER, e22
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 865:79: -> ^( STRAFTER $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:865:83: ^( STRAFTER $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRAFTER.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 26 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:866:4: YEAR OPEN_BRACE e23= expression CLOSE_BRACE
                    {
                    YEAR426=(Token)match(input,YEAR,FOLLOW_YEAR_in_builtInCall7719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_YEAR.add(YEAR426);


                    OPEN_BRACE427=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE427);


                    pushFollow(FOLLOW_expression_in_builtInCall7725);
                    e23=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e23.getTree());

                    CLOSE_BRACE428=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE428);


                    // AST REWRITE
                    // elements: YEAR, e23
                    // token labels: 
                    // rule labels: e23, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e23=new RewriteRuleSubtreeStream(adaptor,"rule e23",e23!=null?e23.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 866:60: -> ^( YEAR $e23)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:866:64: ^( YEAR $e23)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_YEAR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e23.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 27 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:867:4: MONTH OPEN_BRACE e24= expression CLOSE_BRACE
                    {
                    MONTH429=(Token)match(input,MONTH,FOLLOW_MONTH_in_builtInCall7757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MONTH.add(MONTH429);


                    OPEN_BRACE430=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE430);


                    pushFollow(FOLLOW_expression_in_builtInCall7763);
                    e24=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e24.getTree());

                    CLOSE_BRACE431=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE431);


                    // AST REWRITE
                    // elements: MONTH, e24
                    // token labels: 
                    // rule labels: e24, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e24=new RewriteRuleSubtreeStream(adaptor,"rule e24",e24!=null?e24.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 867:60: -> ^( MONTH $e24)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:867:64: ^( MONTH $e24)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MONTH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e24.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 28 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:868:4: DAY OPEN_BRACE e25= expression CLOSE_BRACE
                    {
                    DAY432=(Token)match(input,DAY,FOLLOW_DAY_in_builtInCall7794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DAY.add(DAY432);


                    OPEN_BRACE433=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE433);


                    pushFollow(FOLLOW_expression_in_builtInCall7800);
                    e25=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e25.getTree());

                    CLOSE_BRACE434=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE434);


                    // AST REWRITE
                    // elements: e25, DAY
                    // token labels: 
                    // rule labels: e25, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e25=new RewriteRuleSubtreeStream(adaptor,"rule e25",e25!=null?e25.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 868:60: -> ^( DAY $e25)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:868:64: ^( DAY $e25)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DAY.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e25.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 29 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:869:4: HOURS OPEN_BRACE e26= expression CLOSE_BRACE
                    {
                    HOURS435=(Token)match(input,HOURS,FOLLOW_HOURS_in_builtInCall7833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HOURS.add(HOURS435);


                    OPEN_BRACE436=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE436);


                    pushFollow(FOLLOW_expression_in_builtInCall7839);
                    e26=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e26.getTree());

                    CLOSE_BRACE437=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE437);


                    // AST REWRITE
                    // elements: e26, HOURS
                    // token labels: 
                    // rule labels: e26, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e26=new RewriteRuleSubtreeStream(adaptor,"rule e26",e26!=null?e26.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 869:60: -> ^( HOURS $e26)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:869:64: ^( HOURS $e26)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_HOURS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e26.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 30 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:870:4: MINUTES OPEN_BRACE e27= expression CLOSE_BRACE
                    {
                    MINUTES438=(Token)match(input,MINUTES,FOLLOW_MINUTES_in_builtInCall7870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUTES.add(MINUTES438);


                    OPEN_BRACE439=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE439);


                    pushFollow(FOLLOW_expression_in_builtInCall7876);
                    e27=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e27.getTree());

                    CLOSE_BRACE440=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE440);


                    // AST REWRITE
                    // elements: MINUTES, e27
                    // token labels: 
                    // rule labels: e27, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e27=new RewriteRuleSubtreeStream(adaptor,"rule e27",e27!=null?e27.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 870:60: -> ^( MINUTES $e27)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:870:64: ^( MINUTES $e27)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MINUTES.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e27.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 31 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:871:4: SECONDS OPEN_BRACE e28= expression CLOSE_BRACE
                    {
                    SECONDS441=(Token)match(input,SECONDS,FOLLOW_SECONDS_in_builtInCall7905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SECONDS.add(SECONDS441);


                    OPEN_BRACE442=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE442);


                    pushFollow(FOLLOW_expression_in_builtInCall7911);
                    e28=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e28.getTree());

                    CLOSE_BRACE443=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE443);


                    // AST REWRITE
                    // elements: SECONDS, e28
                    // token labels: 
                    // rule labels: e28, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e28=new RewriteRuleSubtreeStream(adaptor,"rule e28",e28!=null?e28.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 871:60: -> ^( SECONDS $e28)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:871:64: ^( SECONDS $e28)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SECONDS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e28.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 32 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:872:4: TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE
                    {
                    TIMEZONE444=(Token)match(input,TIMEZONE,FOLLOW_TIMEZONE_in_builtInCall7940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEZONE.add(TIMEZONE444);


                    OPEN_BRACE445=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE445);


                    pushFollow(FOLLOW_expression_in_builtInCall7946);
                    e29=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e29.getTree());

                    CLOSE_BRACE446=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE446);


                    // AST REWRITE
                    // elements: TIMEZONE, e29
                    // token labels: 
                    // rule labels: e29, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e29=new RewriteRuleSubtreeStream(adaptor,"rule e29",e29!=null?e29.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 872:60: -> ^( TIMEZONE $e29)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:872:64: ^( TIMEZONE $e29)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_TIMEZONE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e29.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 33 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:873:4: TZ OPEN_BRACE e30= expression CLOSE_BRACE
                    {
                    TZ447=(Token)match(input,TZ,FOLLOW_TZ_in_builtInCall7974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TZ.add(TZ447);


                    OPEN_BRACE448=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE448);


                    pushFollow(FOLLOW_expression_in_builtInCall7980);
                    e30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e30.getTree());

                    CLOSE_BRACE449=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE449);


                    // AST REWRITE
                    // elements: e30, TZ
                    // token labels: 
                    // rule labels: e30, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e30=new RewriteRuleSubtreeStream(adaptor,"rule e30",e30!=null?e30.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 873:60: -> ^( TZ $e30)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:873:64: ^( TZ $e30)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_TZ.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e30.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 34 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:874:4: NOW nil
                    {
                    NOW450=(Token)match(input,NOW,FOLLOW_NOW_in_builtInCall8014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOW.add(NOW450);


                    pushFollow(FOLLOW_nil_in_builtInCall8016);
                    nil451=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil451.getTree());

                    // AST REWRITE
                    // elements: NOW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 874:12: -> NOW
                    {
                        adaptor.addChild(root_0, 
                        stream_NOW.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 35 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:875:4: UUID nil
                    {
                    UUID452=(Token)match(input,UUID,FOLLOW_UUID_in_builtInCall8025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UUID.add(UUID452);


                    pushFollow(FOLLOW_nil_in_builtInCall8027);
                    nil453=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil453.getTree());

                    // AST REWRITE
                    // elements: UUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 875:13: -> UUID
                    {
                        adaptor.addChild(root_0, 
                        stream_UUID.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 36 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:876:4: STRUUID nil
                    {
                    STRUUID454=(Token)match(input,STRUUID,FOLLOW_STRUUID_in_builtInCall8036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRUUID.add(STRUUID454);


                    pushFollow(FOLLOW_nil_in_builtInCall8038);
                    nil455=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil455.getTree());

                    // AST REWRITE
                    // elements: STRUUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 876:16: -> STRUUID
                    {
                        adaptor.addChild(root_0, 
                        stream_STRUUID.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 37 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:877:4: MD5 OPEN_BRACE e31= expression CLOSE_BRACE
                    {
                    MD5456=(Token)match(input,MD5,FOLLOW_MD5_in_builtInCall8047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MD5.add(MD5456);


                    OPEN_BRACE457=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE457);


                    pushFollow(FOLLOW_expression_in_builtInCall8053);
                    e31=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e31.getTree());

                    CLOSE_BRACE458=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE458);


                    // AST REWRITE
                    // elements: MD5, e31
                    // token labels: 
                    // rule labels: e31, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e31=new RewriteRuleSubtreeStream(adaptor,"rule e31",e31!=null?e31.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 877:60: -> ^( MD5 $e31)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:877:64: ^( MD5 $e31)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MD5.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e31.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 38 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:878:4: SHA1 OPEN_BRACE e32= expression CLOSE_BRACE
                    {
                    SHA1459=(Token)match(input,SHA1,FOLLOW_SHA1_in_builtInCall8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA1.add(SHA1459);


                    OPEN_BRACE460=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE460);


                    pushFollow(FOLLOW_expression_in_builtInCall8092);
                    e32=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e32.getTree());

                    CLOSE_BRACE461=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE461);


                    // AST REWRITE
                    // elements: SHA1, e32
                    // token labels: 
                    // rule labels: e32, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e32=new RewriteRuleSubtreeStream(adaptor,"rule e32",e32!=null?e32.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 878:60: -> ^( SHA1 $e32)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:878:64: ^( SHA1 $e32)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA1.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e32.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 39 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:879:4: SHA224 OPEN_BRACE e33= expression CLOSE_BRACE
                    {
                    SHA224462=(Token)match(input,SHA224,FOLLOW_SHA224_in_builtInCall8124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA224.add(SHA224462);


                    OPEN_BRACE463=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE463);


                    pushFollow(FOLLOW_expression_in_builtInCall8130);
                    e33=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e33.getTree());

                    CLOSE_BRACE464=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE464);


                    // AST REWRITE
                    // elements: e33, SHA224
                    // token labels: 
                    // rule labels: e33, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e33=new RewriteRuleSubtreeStream(adaptor,"rule e33",e33!=null?e33.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 879:60: -> ^( SHA224 $e33)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:879:64: ^( SHA224 $e33)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA224.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e33.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 40 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:880:4: SHA256 OPEN_BRACE e34= expression CLOSE_BRACE
                    {
                    SHA256465=(Token)match(input,SHA256,FOLLOW_SHA256_in_builtInCall8160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA256.add(SHA256465);


                    OPEN_BRACE466=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE466);


                    pushFollow(FOLLOW_expression_in_builtInCall8166);
                    e34=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e34.getTree());

                    CLOSE_BRACE467=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE467);


                    // AST REWRITE
                    // elements: e34, SHA256
                    // token labels: 
                    // rule labels: e34, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e34=new RewriteRuleSubtreeStream(adaptor,"rule e34",e34!=null?e34.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 880:60: -> ^( SHA256 $e34)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:880:64: ^( SHA256 $e34)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA256.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e34.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 41 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:881:4: SHA384 OPEN_BRACE e35= expression CLOSE_BRACE
                    {
                    SHA384468=(Token)match(input,SHA384,FOLLOW_SHA384_in_builtInCall8196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA384.add(SHA384468);


                    OPEN_BRACE469=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE469);


                    pushFollow(FOLLOW_expression_in_builtInCall8202);
                    e35=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e35.getTree());

                    CLOSE_BRACE470=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE470);


                    // AST REWRITE
                    // elements: SHA384, e35
                    // token labels: 
                    // rule labels: e35, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e35=new RewriteRuleSubtreeStream(adaptor,"rule e35",e35!=null?e35.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 881:60: -> ^( SHA384 $e35)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:881:64: ^( SHA384 $e35)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA384.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e35.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 42 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:882:4: SHA512 OPEN_BRACE e36= expression CLOSE_BRACE
                    {
                    SHA512471=(Token)match(input,SHA512,FOLLOW_SHA512_in_builtInCall8232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA512.add(SHA512471);


                    OPEN_BRACE472=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE472);


                    pushFollow(FOLLOW_expression_in_builtInCall8238);
                    e36=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e36.getTree());

                    CLOSE_BRACE473=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE473);


                    // AST REWRITE
                    // elements: e36, SHA512
                    // token labels: 
                    // rule labels: e36, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e36=new RewriteRuleSubtreeStream(adaptor,"rule e36",e36!=null?e36.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 882:60: -> ^( SHA512 $e36)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:882:64: ^( SHA512 $e36)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA512.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e36.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 43 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:883:4: COALESCE e37= expressionList
                    {
                    COALESCE474=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtInCall8268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE474);


                    pushFollow(FOLLOW_expressionList_in_builtInCall8272);
                    e37=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e37.getTree());

                    // AST REWRITE
                    // elements: e37, COALESCE
                    // token labels: 
                    // rule labels: e37, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e37=new RewriteRuleSubtreeStream(adaptor,"rule e37",e37!=null?e37.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 883:60: -> ^( COALESCE $e37)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:883:64: ^( COALESCE $e37)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_COALESCE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e37.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 44 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:884:4: IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE
                    {
                    IF475=(Token)match(input,IF,FOLLOW_IF_in_builtInCall8317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF475);


                    OPEN_BRACE476=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE476);


                    pushFollow(FOLLOW_expression_in_builtInCall8323);
                    e38=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e38.getTree());

                    COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA477);


                    pushFollow(FOLLOW_expression_in_builtInCall8329);
                    e39=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e39.getTree());

                    COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA478);


                    pushFollow(FOLLOW_expression_in_builtInCall8335);
                    e40=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e40.getTree());

                    CLOSE_BRACE479=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE479);


                    // AST REWRITE
                    // elements: e38, IF, e40, e39
                    // token labels: 
                    // rule labels: e40, e39, e38, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e40=new RewriteRuleSubtreeStream(adaptor,"rule e40",e40!=null?e40.tree:null);
                    RewriteRuleSubtreeStream stream_e39=new RewriteRuleSubtreeStream(adaptor,"rule e39",e39!=null?e39.tree:null);
                    RewriteRuleSubtreeStream stream_e38=new RewriteRuleSubtreeStream(adaptor,"rule e38",e38!=null?e38.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 884:90: -> ^( IF $e38 $e39 $e40)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:884:94: ^( IF $e38 $e39 $e40)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_IF.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e38.nextTree());

                        adaptor.addChild(root_1, stream_e39.nextTree());

                        adaptor.addChild(root_1, stream_e40.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 45 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:885:4: STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE
                    {
                    STRLANG480=(Token)match(input,STRLANG,FOLLOW_STRLANG_in_builtInCall8363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLANG.add(STRLANG480);


                    OPEN_BRACE481=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE481);


                    pushFollow(FOLLOW_expression_in_builtInCall8369);
                    e41=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e41.getTree());

                    COMMA482=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA482);


                    pushFollow(FOLLOW_expression_in_builtInCall8375);
                    e42=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e42.getTree());

                    CLOSE_BRACE483=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE483);


                    // AST REWRITE
                    // elements: STRLANG, e42, e41
                    // token labels: 
                    // rule labels: e42, e41, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e42=new RewriteRuleSubtreeStream(adaptor,"rule e42",e42!=null?e42.tree:null);
                    RewriteRuleSubtreeStream stream_e41=new RewriteRuleSubtreeStream(adaptor,"rule e41",e41!=null?e41.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 885:90: -> ^( STRLANG $e41 $e42)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:885:94: ^( STRLANG $e41 $e42)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRLANG.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e41.nextTree());

                        adaptor.addChild(root_1, stream_e42.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 46 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:886:4: STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE
                    {
                    STRDT484=(Token)match(input,STRDT,FOLLOW_STRDT_in_builtInCall8416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRDT.add(STRDT484);


                    OPEN_BRACE485=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE485);


                    pushFollow(FOLLOW_expression_in_builtInCall8422);
                    e43=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e43.getTree());

                    COMMA486=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA486);


                    pushFollow(FOLLOW_expression_in_builtInCall8428);
                    e44=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e44.getTree());

                    CLOSE_BRACE487=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE487);


                    // AST REWRITE
                    // elements: e44, STRDT, e43
                    // token labels: 
                    // rule labels: e44, e43, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e44=new RewriteRuleSubtreeStream(adaptor,"rule e44",e44!=null?e44.tree:null);
                    RewriteRuleSubtreeStream stream_e43=new RewriteRuleSubtreeStream(adaptor,"rule e43",e43!=null?e43.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 886:90: -> ^( STRDT $e43 $e44)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:886:94: ^( STRDT $e43 $e44)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRDT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e43.nextTree());

                        adaptor.addChild(root_1, stream_e44.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 47 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:887:4: SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE
                    {
                    SAMETERM488=(Token)match(input,SAMETERM,FOLLOW_SAMETERM_in_builtInCall8471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMETERM.add(SAMETERM488);


                    OPEN_BRACE489=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE489);


                    pushFollow(FOLLOW_expression_in_builtInCall8477);
                    e45=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e45.getTree());

                    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA490);


                    pushFollow(FOLLOW_expression_in_builtInCall8483);
                    e46=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e46.getTree());

                    CLOSE_BRACE491=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE491);


                    // AST REWRITE
                    // elements: e45, e46, SAMETERM
                    // token labels: 
                    // rule labels: e46, e45, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e46=new RewriteRuleSubtreeStream(adaptor,"rule e46",e46!=null?e46.tree:null);
                    RewriteRuleSubtreeStream stream_e45=new RewriteRuleSubtreeStream(adaptor,"rule e45",e45!=null?e45.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 887:90: -> ^( SAMETERM $e45 $e46)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:887:94: ^( SAMETERM $e45 $e46)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SAMETERM.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e45.nextTree());

                        adaptor.addChild(root_1, stream_e46.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 48 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:888:4: ISIRI OPEN_BRACE e47= expression CLOSE_BRACE
                    {
                    ISIRI492=(Token)match(input,ISIRI,FOLLOW_ISIRI_in_builtInCall8523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISIRI.add(ISIRI492);


                    OPEN_BRACE493=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE493);


                    pushFollow(FOLLOW_expression_in_builtInCall8529);
                    e47=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e47.getTree());

                    CLOSE_BRACE494=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE494);


                    // AST REWRITE
                    // elements: ISIRI, e47
                    // token labels: 
                    // rule labels: e47, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e47=new RewriteRuleSubtreeStream(adaptor,"rule e47",e47!=null?e47.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 888:60: -> ^( ISIRI $e47)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:888:64: ^( ISIRI $e47)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISIRI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e47.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 49 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:889:4: ISURI OPEN_BRACE e48= expression CLOSE_BRACE
                    {
                    ISURI495=(Token)match(input,ISURI,FOLLOW_ISURI_in_builtInCall8560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISURI.add(ISURI495);


                    OPEN_BRACE496=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE496);


                    pushFollow(FOLLOW_expression_in_builtInCall8566);
                    e48=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e48.getTree());

                    CLOSE_BRACE497=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE497);


                    // AST REWRITE
                    // elements: e48, ISURI
                    // token labels: 
                    // rule labels: e48, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e48=new RewriteRuleSubtreeStream(adaptor,"rule e48",e48!=null?e48.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 889:60: -> ^( ISURI $e48)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:889:64: ^( ISURI $e48)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISURI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e48.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 50 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:890:4: ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE
                    {
                    ISBLANK498=(Token)match(input,ISBLANK,FOLLOW_ISBLANK_in_builtInCall8597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISBLANK.add(ISBLANK498);


                    OPEN_BRACE499=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE499);


                    pushFollow(FOLLOW_expression_in_builtInCall8603);
                    e52=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e52.getTree());

                    CLOSE_BRACE500=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE500);


                    // AST REWRITE
                    // elements: e52, ISBLANK
                    // token labels: 
                    // rule labels: e52, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e52=new RewriteRuleSubtreeStream(adaptor,"rule e52",e52!=null?e52.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 890:60: -> ^( ISBLANK $e52)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:890:64: ^( ISBLANK $e52)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISBLANK.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e52.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 51 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:891:4: ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE
                    {
                    ISLITERAL501=(Token)match(input,ISLITERAL,FOLLOW_ISLITERAL_in_builtInCall8632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISLITERAL.add(ISLITERAL501);


                    OPEN_BRACE502=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE502);


                    pushFollow(FOLLOW_expression_in_builtInCall8638);
                    e49=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e49.getTree());

                    CLOSE_BRACE503=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE503);


                    // AST REWRITE
                    // elements: e49, ISLITERAL
                    // token labels: 
                    // rule labels: e49, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e49=new RewriteRuleSubtreeStream(adaptor,"rule e49",e49!=null?e49.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 891:60: -> ^( ISLITERAL $e49)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:891:64: ^( ISLITERAL $e49)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISLITERAL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e49.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 52 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:892:4: ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE
                    {
                    ISNUMERIC504=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_builtInCall8665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISNUMERIC.add(ISNUMERIC504);


                    OPEN_BRACE505=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE505);


                    pushFollow(FOLLOW_expression_in_builtInCall8671);
                    e50=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e50.getTree());

                    CLOSE_BRACE506=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE506);


                    // AST REWRITE
                    // elements: ISNUMERIC, e50
                    // token labels: 
                    // rule labels: e50, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e50=new RewriteRuleSubtreeStream(adaptor,"rule e50",e50!=null?e50.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 892:60: -> ^( ISNUMERIC $e50)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:892:64: ^( ISNUMERIC $e50)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISNUMERIC.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e50.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 53 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:893:4: regexExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_regexExpression_in_builtInCall8698);
                    regexExpression507=regexExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regexExpression507.getTree());

                    }
                    break;
                case 54 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:894:4: existsFunc
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_existsFunc_in_builtInCall8703);
                    existsFunc508=existsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsFunc508.getTree());

                    }
                    break;
                case 55 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:895:4: notExistsFunc
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_notExistsFunc_in_builtInCall8708);
                    notExistsFunc509=notExistsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notExistsFunc509.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "builtInCall"


    public static class regexExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "regexExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:898:1: regexExpression : REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlExtParser.regexExpression_return regexExpression() throws RecognitionException {
        IbmSparqlExtParser.regexExpression_return retval = new IbmSparqlExtParser.regexExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token REGEX510=null;
        Token OPEN_BRACE511=null;
        Token COMMA512=null;
        Token COMMA513=null;
        Token CLOSE_BRACE514=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.expression_return e2 =null;

        IbmSparqlExtParser.expression_return e3 =null;


        XTree REGEX510_tree=null;
        XTree OPEN_BRACE511_tree=null;
        XTree COMMA512_tree=null;
        XTree COMMA513_tree=null;
        XTree CLOSE_BRACE514_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_REGEX=new RewriteRuleTokenStream(adaptor,"token REGEX");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:899:2: ( REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:899:4: REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            REGEX510=(Token)match(input,REGEX,FOLLOW_REGEX_in_regexExpression8725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGEX.add(REGEX510);


            OPEN_BRACE511=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_regexExpression8727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE511);


            pushFollow(FOLLOW_expression_in_regexExpression8731);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA512=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA512);


            pushFollow(FOLLOW_expression_in_regexExpression8737);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:899:55: ( COMMA e3= expression )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==COMMA) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:899:57: COMMA e3= expression
                    {
                    COMMA513=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA513);


                    pushFollow(FOLLOW_expression_in_regexExpression8745);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }


            CLOSE_BRACE514=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_regexExpression8750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE514);


            // AST REWRITE
            // elements: REGEX, e3, e1, e2
            // token labels: 
            // rule labels: e1, e2, e3, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 901:3: -> ^( REGEX $e1 $e2 ( $e3)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:901:7: ^( REGEX $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_REGEX.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:901:28: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "regexExpression"


    public static class substringExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "substringExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:904:1: substringExpression : SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlExtParser.substringExpression_return substringExpression() throws RecognitionException {
        IbmSparqlExtParser.substringExpression_return retval = new IbmSparqlExtParser.substringExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SUBSTR515=null;
        Token OPEN_BRACE516=null;
        Token COMMA517=null;
        Token COMMA518=null;
        Token CLOSE_BRACE519=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.expression_return e2 =null;

        IbmSparqlExtParser.expression_return e3 =null;


        XTree SUBSTR515_tree=null;
        XTree OPEN_BRACE516_tree=null;
        XTree COMMA517_tree=null;
        XTree COMMA518_tree=null;
        XTree CLOSE_BRACE519_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SUBSTR=new RewriteRuleTokenStream(adaptor,"token SUBSTR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:905:2: ( SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:905:6: SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            SUBSTR515=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_substringExpression8793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SUBSTR.add(SUBSTR515);


            OPEN_BRACE516=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_substringExpression8795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE516);


            pushFollow(FOLLOW_expression_in_substringExpression8799);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA517=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA517);


            pushFollow(FOLLOW_expression_in_substringExpression8805);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:905:58: ( COMMA e3= expression )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==COMMA) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:905:60: COMMA e3= expression
                    {
                    COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA518);


                    pushFollow(FOLLOW_expression_in_substringExpression8813);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }


            CLOSE_BRACE519=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_substringExpression8818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE519);


            // AST REWRITE
            // elements: e2, e1, SUBSTR, e3
            // token labels: 
            // rule labels: e1, e2, e3, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 907:3: -> ^( SUBSTR $e1 $e2 ( $e3)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:907:7: ^( SUBSTR $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_SUBSTR.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:907:29: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "substringExpression"


    public static class strReplaceExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "strReplaceExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:910:1: strReplaceExpression : REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) ;
    public final IbmSparqlExtParser.strReplaceExpression_return strReplaceExpression() throws RecognitionException {
        IbmSparqlExtParser.strReplaceExpression_return retval = new IbmSparqlExtParser.strReplaceExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token REPLACE520=null;
        Token OPEN_BRACE521=null;
        Token COMMA522=null;
        Token COMMA523=null;
        Token COMMA524=null;
        Token CLOSE_BRACE525=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.expression_return e2 =null;

        IbmSparqlExtParser.expression_return e3 =null;

        IbmSparqlExtParser.expression_return e4 =null;


        XTree REPLACE520_tree=null;
        XTree OPEN_BRACE521_tree=null;
        XTree COMMA522_tree=null;
        XTree COMMA523_tree=null;
        XTree COMMA524_tree=null;
        XTree CLOSE_BRACE525_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:911:5: ( REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:911:9: REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE
            {
            REPLACE520=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_strReplaceExpression8860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REPLACE.add(REPLACE520);


            OPEN_BRACE521=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_strReplaceExpression8862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE521);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8866);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA522);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8872);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA523);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8878);
            e3=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:911:82: ( COMMA e4= expression )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==COMMA) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:911:83: COMMA e4= expression
                    {
                    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA524);


                    pushFollow(FOLLOW_expression_in_strReplaceExpression8885);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    }
                    break;

            }


            CLOSE_BRACE525=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_strReplaceExpression8889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE525);


            // AST REWRITE
            // elements: e2, e4, e1, e3, REPLACE
            // token labels: 
            // rule labels: e1, e2, e3, retval, e4
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 912:9: -> ^( REPLACE $e1 $e2 $e3 ( $e4)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:912:12: ^( REPLACE $e1 $e2 $e3 ( $e4)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_REPLACE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                adaptor.addChild(root_1, stream_e3.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:912:37: ( $e4)?
                if ( stream_e4.hasNext() ) {
                    adaptor.addChild(root_1, stream_e4.nextTree());

                }
                stream_e4.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "strReplaceExpression"


    public static class existsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "existsFunc"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:915:1: existsFunc : EXISTS g= groupGraphPattern -> ^( EXISTS $g) ;
    public final IbmSparqlExtParser.existsFunc_return existsFunc() throws RecognitionException {
        IbmSparqlExtParser.existsFunc_return retval = new IbmSparqlExtParser.existsFunc_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token EXISTS526=null;
        IbmSparqlExtParser.groupGraphPattern_return g =null;


        XTree EXISTS526_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:916:2: ( EXISTS g= groupGraphPattern -> ^( EXISTS $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:916:6: EXISTS g= groupGraphPattern
            {
            EXISTS526=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsFunc8938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS526);


            pushFollow(FOLLOW_groupGraphPattern_in_existsFunc8942);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: EXISTS, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 918:3: -> ^( EXISTS $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:918:7: ^( EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_EXISTS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "existsFunc"


    public static class notExistsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "notExistsFunc"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:921:1: notExistsFunc : NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) ;
    public final IbmSparqlExtParser.notExistsFunc_return notExistsFunc() throws RecognitionException {
        IbmSparqlExtParser.notExistsFunc_return retval = new IbmSparqlExtParser.notExistsFunc_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token NOT527=null;
        Token EXISTS528=null;
        IbmSparqlExtParser.groupGraphPattern_return g =null;


        XTree NOT527_tree=null;
        XTree EXISTS528_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:922:2: ( NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:922:6: NOT EXISTS g= groupGraphPattern
            {
            NOT527=(Token)match(input,NOT,FOLLOW_NOT_in_notExistsFunc8976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT.add(NOT527);


            EXISTS528=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_notExistsFunc8978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS528);


            pushFollow(FOLLOW_groupGraphPattern_in_notExistsFunc8982);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 924:3: -> ^( NOT_EXISTS $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:924:7: ^( NOT_EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(NOT_EXISTS, "NOT_EXISTS")
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "notExistsFunc"


    public static class aggregate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "aggregate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:927:1: aggregate : ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) );
    public final IbmSparqlExtParser.aggregate_return aggregate() throws RecognitionException {
        IbmSparqlExtParser.aggregate_return retval = new IbmSparqlExtParser.aggregate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token d1=null;
        Token d2=null;
        Token d3=null;
        Token d4=null;
        Token d5=null;
        Token d6=null;
        Token d7=null;
        Token COUNT529=null;
        Token OPEN_BRACE530=null;
        Token char_literal531=null;
        Token CLOSE_BRACE532=null;
        Token SUM533=null;
        Token OPEN_BRACE534=null;
        Token CLOSE_BRACE535=null;
        Token MIN536=null;
        Token OPEN_BRACE537=null;
        Token CLOSE_BRACE538=null;
        Token MAX539=null;
        Token OPEN_BRACE540=null;
        Token CLOSE_BRACE541=null;
        Token AVG542=null;
        Token OPEN_BRACE543=null;
        Token CLOSE_BRACE544=null;
        Token SAMPLE545=null;
        Token OPEN_BRACE546=null;
        Token CLOSE_BRACE547=null;
        Token GROUP_CONCAT548=null;
        Token OPEN_BRACE549=null;
        Token SEMICOLON550=null;
        Token SEPARATOR551=null;
        Token char_literal552=null;
        Token CLOSE_BRACE553=null;
        IbmSparqlExtParser.expression_return e1 =null;

        IbmSparqlExtParser.expression_return e2 =null;

        IbmSparqlExtParser.expression_return e3 =null;

        IbmSparqlExtParser.expression_return e4 =null;

        IbmSparqlExtParser.expression_return e5 =null;

        IbmSparqlExtParser.expression_return e6 =null;

        IbmSparqlExtParser.expression_return e7 =null;

        IbmSparqlExtParser.string_return s =null;


        XTree d1_tree=null;
        XTree d2_tree=null;
        XTree d3_tree=null;
        XTree d4_tree=null;
        XTree d5_tree=null;
        XTree d6_tree=null;
        XTree d7_tree=null;
        XTree COUNT529_tree=null;
        XTree OPEN_BRACE530_tree=null;
        XTree char_literal531_tree=null;
        XTree CLOSE_BRACE532_tree=null;
        XTree SUM533_tree=null;
        XTree OPEN_BRACE534_tree=null;
        XTree CLOSE_BRACE535_tree=null;
        XTree MIN536_tree=null;
        XTree OPEN_BRACE537_tree=null;
        XTree CLOSE_BRACE538_tree=null;
        XTree MAX539_tree=null;
        XTree OPEN_BRACE540_tree=null;
        XTree CLOSE_BRACE541_tree=null;
        XTree AVG542_tree=null;
        XTree OPEN_BRACE543_tree=null;
        XTree CLOSE_BRACE544_tree=null;
        XTree SAMPLE545_tree=null;
        XTree OPEN_BRACE546_tree=null;
        XTree CLOSE_BRACE547_tree=null;
        XTree GROUP_CONCAT548_tree=null;
        XTree OPEN_BRACE549_tree=null;
        XTree SEMICOLON550_tree=null;
        XTree SEPARATOR551_tree=null;
        XTree char_literal552_tree=null;
        XTree CLOSE_BRACE553_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_SUM=new RewriteRuleTokenStream(adaptor,"token SUM");
        RewriteRuleTokenStream stream_270=new RewriteRuleTokenStream(adaptor,"token 270");
        RewriteRuleTokenStream stream_SAMPLE=new RewriteRuleTokenStream(adaptor,"token SAMPLE");
        RewriteRuleTokenStream stream_275=new RewriteRuleTokenStream(adaptor,"token 275");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_GROUP_CONCAT=new RewriteRuleTokenStream(adaptor,"token GROUP_CONCAT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:2: ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) )
            int alt166=7;
            switch ( input.LA(1) ) {
            case COUNT:
                {
                alt166=1;
                }
                break;
            case SUM:
                {
                alt166=2;
                }
                break;
            case MIN:
                {
                alt166=3;
                }
                break;
            case MAX:
                {
                alt166=4;
                }
                break;
            case AVG:
                {
                alt166=5;
                }
                break;
            case SAMPLE:
                {
                alt166=6;
                }
                break;
            case GROUP_CONCAT:
                {
                alt166=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }

            switch (alt166) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:4: COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE
                    {
                    COUNT529=(Token)match(input,COUNT,FOLLOW_COUNT_in_aggregate9014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COUNT.add(COUNT529);


                    OPEN_BRACE530=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE530);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:23: (d1= DISTINCT )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==DISTINCT) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:23: d1= DISTINCT
                            {
                            d1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d1);


                            }
                            break;

                    }


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:34: ( '*' |e1= expression )
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==270) ) {
                        alt158=1;
                    }
                    else if ( (LA158_0==ABS||LA158_0==AVG||LA158_0==BNODE||LA158_0==BOUND||LA158_0==CEIL||LA158_0==COALESCE||LA158_0==CONCAT||LA158_0==CONTAINS||LA158_0==COUNT||(LA158_0 >= DATATYPE && LA158_0 <= DECIMAL_POSITIVE)||(LA158_0 >= DOUBLE && LA158_0 <= DOUBLE_POSITIVE)||LA158_0==ENCODE_FOR_URI||LA158_0==EXISTS||LA158_0==FALSE||LA158_0==FLOOR||LA158_0==GROUP_CONCAT||LA158_0==HOURS||LA158_0==IF||(LA158_0 >= INTEGER && LA158_0 <= INTEGER_POSITIVE)||LA158_0==IRI||(LA158_0 >= IRI_REF && LA158_0 <= ISURI)||(LA158_0 >= LANG && LA158_0 <= LANGMATCHES)||LA158_0==LCASE||(LA158_0 >= MAX && LA158_0 <= MIN)||LA158_0==MINUTES||LA158_0==MONTH||LA158_0==NOT||LA158_0==NOW||LA158_0==OPEN_BRACE||(LA158_0 >= PNAME_LN && LA158_0 <= PNAME_NS)||LA158_0==RAND||(LA158_0 >= REGEX && LA158_0 <= REPLACE)||LA158_0==ROUND||(LA158_0 >= SAMETERM && LA158_0 <= SECONDS)||(LA158_0 >= SHA1 && LA158_0 <= SHA512)||(LA158_0 >= STR && LA158_0 <= STRENDS)||(LA158_0 >= STRING_LITERAL1 && LA158_0 <= STRUUID)||LA158_0==SUBSTR||LA158_0==SUM||LA158_0==TIMEZONE||LA158_0==TRUE||LA158_0==TZ||LA158_0==UCASE||LA158_0==URI||LA158_0==UUID||(LA158_0 >= VAR1 && LA158_0 <= VAR2)||LA158_0==YEAR||LA158_0==268||(LA158_0 >= 271 && LA158_0 <= 272)) ) {
                        alt158=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;

                    }
                    switch (alt158) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:36: '*'
                            {
                            char_literal531=(Token)match(input,270,FOLLOW_270_in_aggregate9025); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_270.add(char_literal531);


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:42: e1= expression
                            {
                            pushFollow(FOLLOW_expression_in_aggregate9031);
                            e1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE532=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE532);


                    // AST REWRITE
                    // elements: e1, 270, COUNT, d1
                    // token labels: d1
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d1=new RewriteRuleTokenStream(adaptor,"token d1",d1);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 928:74: -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:78: ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_COUNT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:89: ( $d1)?
                        if ( stream_d1.hasNext() ) {
                            adaptor.addChild(root_1, stream_d1.nextNode());

                        }
                        stream_d1.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:94: ( '*' )?
                        if ( stream_270.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_270.nextNode()
                            );

                        }
                        stream_270.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:928:101: ( $e1)?
                        if ( stream_e1.hasNext() ) {
                            adaptor.addChild(root_1, stream_e1.nextTree());

                        }
                        stream_e1.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:929:4: SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE
                    {
                    SUM533=(Token)match(input,SUM,FOLLOW_SUM_in_aggregate9067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUM.add(SUM533);


                    OPEN_BRACE534=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE534);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:929:21: (d2= DISTINCT )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==DISTINCT) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:929:21: d2= DISTINCT
                            {
                            d2=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9073); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d2);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9078);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    CLOSE_BRACE535=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE535);


                    // AST REWRITE
                    // elements: SUM, e2, d2
                    // token labels: d2
                    // rule labels: e2, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d2=new RewriteRuleTokenStream(adaptor,"token d2",d2);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 929:61: -> ^( SUM ( $d2)? $e2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:929:65: ^( SUM ( $d2)? $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SUM.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:929:73: ( $d2)?
                        if ( stream_d2.hasNext() ) {
                            adaptor.addChild(root_1, stream_d2.nextNode());

                        }
                        stream_d2.reset();

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:930:4: MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE
                    {
                    MIN536=(Token)match(input,MIN,FOLLOW_MIN_in_aggregate9104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN536);


                    OPEN_BRACE537=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE537);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:930:21: (d3= DISTINCT )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==DISTINCT) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:930:21: d3= DISTINCT
                            {
                            d3=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9110); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d3);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9115);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    CLOSE_BRACE538=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE538);


                    // AST REWRITE
                    // elements: d3, e3, MIN
                    // token labels: d3
                    // rule labels: e3, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d3=new RewriteRuleTokenStream(adaptor,"token d3",d3);
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 930:61: -> ^( MIN ( $d3)? $e3)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:930:65: ^( MIN ( $d3)? $e3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MIN.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:930:73: ( $d3)?
                        if ( stream_d3.hasNext() ) {
                            adaptor.addChild(root_1, stream_d3.nextNode());

                        }
                        stream_d3.reset();

                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:931:4: MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE
                    {
                    MAX539=(Token)match(input,MAX,FOLLOW_MAX_in_aggregate9141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(MAX539);


                    OPEN_BRACE540=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE540);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:931:21: (d4= DISTINCT )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==DISTINCT) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:931:21: d4= DISTINCT
                            {
                            d4=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9147); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d4);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9152);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    CLOSE_BRACE541=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE541);


                    // AST REWRITE
                    // elements: MAX, d4, e4
                    // token labels: d4
                    // rule labels: retval, e4
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d4=new RewriteRuleTokenStream(adaptor,"token d4",d4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 931:61: -> ^( MAX ( $d4)? $e4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:931:65: ^( MAX ( $d4)? $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MAX.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:931:73: ( $d4)?
                        if ( stream_d4.hasNext() ) {
                            adaptor.addChild(root_1, stream_d4.nextNode());

                        }
                        stream_d4.reset();

                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:932:4: AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE
                    {
                    AVG542=(Token)match(input,AVG,FOLLOW_AVG_in_aggregate9178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVG.add(AVG542);


                    OPEN_BRACE543=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE543);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:932:21: (d5= DISTINCT )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==DISTINCT) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:932:21: d5= DISTINCT
                            {
                            d5=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9184); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d5);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9189);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());

                    CLOSE_BRACE544=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE544);


                    // AST REWRITE
                    // elements: e5, d5, AVG
                    // token labels: d5
                    // rule labels: e5, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d5=new RewriteRuleTokenStream(adaptor,"token d5",d5);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 932:61: -> ^( AVG ( $d5)? $e5)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:932:65: ^( AVG ( $d5)? $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_AVG.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:932:73: ( $d5)?
                        if ( stream_d5.hasNext() ) {
                            adaptor.addChild(root_1, stream_d5.nextNode());

                        }
                        stream_d5.reset();

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:933:4: SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE
                    {
                    SAMPLE545=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_aggregate9215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMPLE.add(SAMPLE545);


                    OPEN_BRACE546=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE546);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:933:24: (d6= DISTINCT )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==DISTINCT) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:933:24: d6= DISTINCT
                            {
                            d6=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9221); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d6);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9226);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());

                    CLOSE_BRACE547=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE547);


                    // AST REWRITE
                    // elements: SAMPLE, d6, e6
                    // token labels: d6
                    // rule labels: e6, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d6=new RewriteRuleTokenStream(adaptor,"token d6",d6);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 933:61: -> ^( SAMPLE ( $d6)? $e6)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:933:65: ^( SAMPLE ( $d6)? $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SAMPLE.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:933:76: ( $d6)?
                        if ( stream_d6.hasNext() ) {
                            adaptor.addChild(root_1, stream_d6.nextNode());

                        }
                        stream_d6.reset();

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:934:4: GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE
                    {
                    GROUP_CONCAT548=(Token)match(input,GROUP_CONCAT,FOLLOW_GROUP_CONCAT_in_aggregate9249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP_CONCAT.add(GROUP_CONCAT548);


                    OPEN_BRACE549=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate9251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE549);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:934:30: (d7= DISTINCT )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==DISTINCT) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:934:30: d7= DISTINCT
                            {
                            d7=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate9255); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d7);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate9260);
                    e7=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e7.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:934:55: ( SEMICOLON SEPARATOR '=' s= string )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==SEMICOLON) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:934:57: SEMICOLON SEPARATOR '=' s= string
                            {
                            SEMICOLON550=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aggregate9264); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON550);


                            SEPARATOR551=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_aggregate9266); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR551);


                            char_literal552=(Token)match(input,275,FOLLOW_275_in_aggregate9268); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_275.add(char_literal552);


                            pushFollow(FOLLOW_string_in_aggregate9272);
                            s=string();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_string.add(s.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE553=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate9277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE553);


                    // AST REWRITE
                    // elements: e7, d7, GROUP_CONCAT, SEPARATOR, s
                    // token labels: d7
                    // rule labels: e7, s, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d7=new RewriteRuleTokenStream(adaptor,"token d7",d7);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 935:3: -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:935:7: ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_GROUP_CONCAT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:935:24: ( $d7)?
                        if ( stream_d7.hasNext() ) {
                            adaptor.addChild(root_1, stream_d7.nextNode());

                        }
                        stream_d7.reset();

                        adaptor.addChild(root_1, stream_e7.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:935:33: ( ^( SEPARATOR $s) )?
                        if ( stream_SEPARATOR.hasNext()||stream_s.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:935:33: ^( SEPARATOR $s)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            stream_SEPARATOR.nextNode()
                            , root_2);

                            adaptor.addChild(root_2, stream_s.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_SEPARATOR.reset();
                        stream_s.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "aggregate"


    public static class iRIrefOrFunction_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iRIrefOrFunction"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:938:1: iRIrefOrFunction : i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) ;
    public final IbmSparqlExtParser.iRIrefOrFunction_return iRIrefOrFunction() throws RecognitionException {
        IbmSparqlExtParser.iRIrefOrFunction_return retval = new IbmSparqlExtParser.iRIrefOrFunction_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return i =null;

        IbmSparqlExtParser.argList_return a =null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
         
        		boolean f=false;
        	
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:942:2: (i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:942:6: i= iRIref (a= argList )?
            {
            pushFollow(FOLLOW_iRIref_in_iRIrefOrFunction9330);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:942:15: (a= argList )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==OPEN_BRACE) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:942:16: a= argList
                    {
                    pushFollow(FOLLOW_argList_in_iRIrefOrFunction9335);
                    a=argList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_argList.add(a.getTree());

                    if ( state.backtracking==0 ) {f=true;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: i, a, i
            // token labels: 
            // rule labels: a, i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 944:3: -> {f==false}? $i
            if (f==false) {
                adaptor.addChild(root_0, stream_i.nextTree());

            }

            else // 945:3: -> ^( FUNCTION $i ( $a)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:945:7: ^( FUNCTION $i ( $a)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:945:25: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iRIrefOrFunction"


    public static class rDFLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rDFLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:948:1: rDFLiteral : string ( LANGTAG | ( '^^' iRIref ) )? ;
    public final IbmSparqlExtParser.rDFLiteral_return rDFLiteral() throws RecognitionException {
        IbmSparqlExtParser.rDFLiteral_return retval = new IbmSparqlExtParser.rDFLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LANGTAG555=null;
        Token string_literal556=null;
        IbmSparqlExtParser.string_return string554 =null;

        IbmSparqlExtParser.iRIref_return iRIref557 =null;


        XTree LANGTAG555_tree=null;
        XTree string_literal556_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:2: ( string ( LANGTAG | ( '^^' iRIref ) )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:6: string ( LANGTAG | ( '^^' iRIref ) )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_string_in_rDFLiteral9390);
            string554=string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string554.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:13: ( LANGTAG | ( '^^' iRIref ) )?
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==LANGTAG) ) {
                alt168=1;
            }
            else if ( (LA168_0==280) ) {
                alt168=2;
            }
            switch (alt168) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:15: LANGTAG
                    {
                    LANGTAG555=(Token)match(input,LANGTAG,FOLLOW_LANGTAG_in_rDFLiteral9394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LANGTAG555_tree = 
                    (XTree)adaptor.create(LANGTAG555)
                    ;
                    adaptor.addChild(root_0, LANGTAG555_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:25: ( '^^' iRIref )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:25: ( '^^' iRIref )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:949:27: '^^' iRIref
                    {
                    string_literal556=(Token)match(input,280,FOLLOW_280_in_rDFLiteral9400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal556_tree = 
                    (XTree)adaptor.create(string_literal556)
                    ;
                    adaptor.addChild(root_0, string_literal556_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_rDFLiteral9402);
                    iRIref557=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref557.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rDFLiteral"


    public static class numericLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:952:1: numericLiteral : ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative );
    public final IbmSparqlExtParser.numericLiteral_return numericLiteral() throws RecognitionException {
        IbmSparqlExtParser.numericLiteral_return retval = new IbmSparqlExtParser.numericLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlExtParser.numericLiteralUnsigned_return numericLiteralUnsigned558 =null;

        IbmSparqlExtParser.numericLiteralPositive_return numericLiteralPositive559 =null;

        IbmSparqlExtParser.numericLiteralNegative_return numericLiteralNegative560 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:953:2: ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative )
            int alt169=3;
            switch ( input.LA(1) ) {
            case DECIMAL:
            case DOUBLE:
            case INTEGER:
                {
                alt169=1;
                }
                break;
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_POSITIVE:
                {
                alt169=2;
                }
                break;
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case INTEGER_NEGATIVE:
                {
                alt169=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }

            switch (alt169) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:953:6: numericLiteralUnsigned
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralUnsigned_in_numericLiteral9424);
                    numericLiteralUnsigned558=numericLiteralUnsigned();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralUnsigned558.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:954:5: numericLiteralPositive
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralPositive_in_numericLiteral9432);
                    numericLiteralPositive559=numericLiteralPositive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralPositive559.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:955:5: numericLiteralNegative
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralNegative_in_numericLiteral9440);
                    numericLiteralNegative560=numericLiteralNegative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralNegative560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"


    public static class numericLiteralUnsigned_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralUnsigned"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:958:1: numericLiteralUnsigned : ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) );
    public final IbmSparqlExtParser.numericLiteralUnsigned_return numericLiteralUnsigned() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralUnsigned_return retval = new IbmSparqlExtParser.numericLiteralUnsigned_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER561=null;
        Token DECIMAL562=null;
        Token DOUBLE563=null;

        XTree INTEGER561_tree=null;
        XTree DECIMAL562_tree=null;
        XTree DOUBLE563_tree=null;
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_DOUBLE=new RewriteRuleTokenStream(adaptor,"token DOUBLE");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:959:2: ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) )
            int alt170=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt170=1;
                }
                break;
            case DECIMAL:
                {
                alt170=2;
                }
                break;
            case DOUBLE:
                {
                alt170=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }

            switch (alt170) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:959:6: INTEGER
                    {
                    INTEGER561=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_numericLiteralUnsigned9458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER.add(INTEGER561);


                    // AST REWRITE
                    // elements: INTEGER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 959:18: -> ^( BIG_INTEGER INTEGER )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:959:21: ^( BIG_INTEGER INTEGER )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:960:5: DECIMAL
                    {
                    DECIMAL562=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numericLiteralUnsigned9479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(DECIMAL562);


                    // AST REWRITE
                    // elements: DECIMAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 960:17: -> ^( BIG_DECIMAL DECIMAL )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:960:20: ^( BIG_DECIMAL DECIMAL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:961:5: DOUBLE
                    {
                    DOUBLE563=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_numericLiteralUnsigned9499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE.add(DOUBLE563);


                    // AST REWRITE
                    // elements: DOUBLE, DOUBLE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 961:16: -> ^( DOUBLE DOUBLE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:961:19: ^( DOUBLE DOUBLE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DOUBLE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralUnsigned"


    public static class numericLiteralPositive_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralPositive"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:964:1: numericLiteralPositive : ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) );
    public final IbmSparqlExtParser.numericLiteralPositive_return numericLiteralPositive() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralPositive_return retval = new IbmSparqlExtParser.numericLiteralPositive_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER_POSITIVE564=null;
        Token DECIMAL_POSITIVE565=null;
        Token DOUBLE_POSITIVE566=null;

        XTree INTEGER_POSITIVE564_tree=null;
        XTree DECIMAL_POSITIVE565_tree=null;
        XTree DOUBLE_POSITIVE566_tree=null;
        RewriteRuleTokenStream stream_DECIMAL_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_POSITIVE");
        RewriteRuleTokenStream stream_DOUBLE_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_POSITIVE");
        RewriteRuleTokenStream stream_INTEGER_POSITIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_POSITIVE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:965:2: ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) )
            int alt171=3;
            switch ( input.LA(1) ) {
            case INTEGER_POSITIVE:
                {
                alt171=1;
                }
                break;
            case DECIMAL_POSITIVE:
                {
                alt171=2;
                }
                break;
            case DOUBLE_POSITIVE:
                {
                alt171=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }

            switch (alt171) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:965:6: INTEGER_POSITIVE
                    {
                    INTEGER_POSITIVE564=(Token)match(input,INTEGER_POSITIVE,FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive9533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_POSITIVE.add(INTEGER_POSITIVE564);


                    // AST REWRITE
                    // elements: INTEGER_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 965:25: -> ^( BIG_INTEGER INTEGER_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:965:28: ^( BIG_INTEGER INTEGER_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:966:5: DECIMAL_POSITIVE
                    {
                    DECIMAL_POSITIVE565=(Token)match(input,DECIMAL_POSITIVE,FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive9552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_POSITIVE.add(DECIMAL_POSITIVE565);


                    // AST REWRITE
                    // elements: DECIMAL_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 966:24: -> ^( BIG_DECIMAL DECIMAL_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:966:27: ^( BIG_DECIMAL DECIMAL_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:967:5: DOUBLE_POSITIVE
                    {
                    DOUBLE_POSITIVE566=(Token)match(input,DOUBLE_POSITIVE,FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive9570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_POSITIVE.add(DOUBLE_POSITIVE566);


                    // AST REWRITE
                    // elements: DOUBLE_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 967:23: -> ^( DOUBLE DOUBLE_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:967:26: ^( DOUBLE DOUBLE_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(DOUBLE, "DOUBLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralPositive"


    public static class numericLiteralNegative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralNegative"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:970:1: numericLiteralNegative : ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) );
    public final IbmSparqlExtParser.numericLiteralNegative_return numericLiteralNegative() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralNegative_return retval = new IbmSparqlExtParser.numericLiteralNegative_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER_NEGATIVE567=null;
        Token DECIMAL_NEGATIVE568=null;
        Token DOUBLE_NEGATIVE569=null;

        XTree INTEGER_NEGATIVE567_tree=null;
        XTree DECIMAL_NEGATIVE568_tree=null;
        XTree DOUBLE_NEGATIVE569_tree=null;
        RewriteRuleTokenStream stream_DECIMAL_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_NEGATIVE");
        RewriteRuleTokenStream stream_DOUBLE_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_NEGATIVE");
        RewriteRuleTokenStream stream_INTEGER_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_NEGATIVE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:971:2: ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) )
            int alt172=3;
            switch ( input.LA(1) ) {
            case INTEGER_NEGATIVE:
                {
                alt172=1;
                }
                break;
            case DECIMAL_NEGATIVE:
                {
                alt172=2;
                }
                break;
            case DOUBLE_NEGATIVE:
                {
                alt172=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }

            switch (alt172) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:971:6: INTEGER_NEGATIVE
                    {
                    INTEGER_NEGATIVE567=(Token)match(input,INTEGER_NEGATIVE,FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_NEGATIVE.add(INTEGER_NEGATIVE567);


                    // AST REWRITE
                    // elements: INTEGER_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 971:25: -> ^( BIG_INTEGER INTEGER_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:971:28: ^( BIG_INTEGER INTEGER_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:972:5: DECIMAL_NEGATIVE
                    {
                    DECIMAL_NEGATIVE568=(Token)match(input,DECIMAL_NEGATIVE,FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_NEGATIVE.add(DECIMAL_NEGATIVE568);


                    // AST REWRITE
                    // elements: DECIMAL_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 972:24: -> ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:972:27: ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:973:5: DOUBLE_NEGATIVE
                    {
                    DOUBLE_NEGATIVE569=(Token)match(input,DOUBLE_NEGATIVE,FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_NEGATIVE.add(DOUBLE_NEGATIVE569);


                    // AST REWRITE
                    // elements: DOUBLE_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 973:23: -> ^( DOUBLE DOUBLE_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:973:26: ^( DOUBLE DOUBLE_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(DOUBLE, "DOUBLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralNegative"


    public static class booleanLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "booleanLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:976:1: booleanLiteral : (t= TRUE -> ^( BOOLEAN $t) |f= FALSE -> ^( BOOLEAN $f) );
    public final IbmSparqlExtParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        IbmSparqlExtParser.booleanLiteral_return retval = new IbmSparqlExtParser.booleanLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token t=null;
        Token f=null;

        XTree t_tree=null;
        XTree f_tree=null;
        RewriteRuleTokenStream stream_TRUE=new RewriteRuleTokenStream(adaptor,"token TRUE");
        RewriteRuleTokenStream stream_FALSE=new RewriteRuleTokenStream(adaptor,"token FALSE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:977:2: (t= TRUE -> ^( BOOLEAN $t) |f= FALSE -> ^( BOOLEAN $f) )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==TRUE) ) {
                alt173=1;
            }
            else if ( (LA173_0==FALSE) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;

            }
            switch (alt173) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:977:6: t= TRUE
                    {
                    t=(Token)match(input,TRUE,FOLLOW_TRUE_in_booleanLiteral9669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRUE.add(t);


                    // AST REWRITE
                    // elements: t
                    // token labels: t
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 977:15: -> ^( BOOLEAN $t)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:977:19: ^( BOOLEAN $t)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BOOLEAN, "BOOLEAN")
                        , root_1);

                        adaptor.addChild(root_1, stream_t.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:978:6: f= FALSE
                    {
                    f=(Token)match(input,FALSE,FOLLOW_FALSE_in_booleanLiteral9692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FALSE.add(f);


                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 978:15: -> ^( BOOLEAN $f)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:978:19: ^( BOOLEAN $f)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BOOLEAN, "BOOLEAN")
                        , root_1);

                        adaptor.addChild(root_1, stream_f.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"


    public static class string_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:981:1: string : (s1= STRING_LITERAL1 -> ^( STRING $s1) |s2= STRING_LITERAL2 -> ^( STRING $s2) |s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) |s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) );
    public final IbmSparqlExtParser.string_return string() throws RecognitionException {
        IbmSparqlExtParser.string_return retval = new IbmSparqlExtParser.string_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token s1=null;
        Token s2=null;
        Token s3=null;
        Token s4=null;

        XTree s1_tree=null;
        XTree s2_tree=null;
        XTree s3_tree=null;
        XTree s4_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG2");
        RewriteRuleTokenStream stream_STRING_LITERAL2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL2");
        RewriteRuleTokenStream stream_STRING_LITERAL1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL1");
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG1");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:982:2: (s1= STRING_LITERAL1 -> ^( STRING $s1) |s2= STRING_LITERAL2 -> ^( STRING $s2) |s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) |s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) )
            int alt174=4;
            switch ( input.LA(1) ) {
            case STRING_LITERAL1:
                {
                alt174=1;
                }
                break;
            case STRING_LITERAL2:
                {
                alt174=2;
                }
                break;
            case STRING_LITERAL_LONG1:
                {
                alt174=3;
                }
                break;
            case STRING_LITERAL_LONG2:
                {
                alt174=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }

            switch (alt174) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:982:6: s1= STRING_LITERAL1
                    {
                    s1=(Token)match(input,STRING_LITERAL1,FOLLOW_STRING_LITERAL1_in_string9724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL1.add(s1);


                    // AST REWRITE
                    // elements: s1
                    // token labels: s1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s1=new RewriteRuleTokenStream(adaptor,"token s1",s1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 982:33: -> ^( STRING $s1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:982:37: ^( STRING $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:983:5: s2= STRING_LITERAL2
                    {
                    s2=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_string9752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL2.add(s2);


                    // AST REWRITE
                    // elements: s2
                    // token labels: s2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 983:32: -> ^( STRING $s2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:983:36: ^( STRING $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:984:5: s3= STRING_LITERAL_LONG1
                    {
                    s3=(Token)match(input,STRING_LITERAL_LONG1,FOLLOW_STRING_LITERAL_LONG1_in_string9780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG1.add(s3);


                    // AST REWRITE
                    // elements: s3
                    // token labels: s3
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s3=new RewriteRuleTokenStream(adaptor,"token s3",s3);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 984:32: -> ^( STRING $s3)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:984:36: ^( STRING $s3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s3.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:985:4: s4= STRING_LITERAL_LONG2
                    {
                    s4=(Token)match(input,STRING_LITERAL_LONG2,FOLLOW_STRING_LITERAL_LONG2_in_string9802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG2.add(s4);


                    // AST REWRITE
                    // elements: s4
                    // token labels: s4
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s4=new RewriteRuleTokenStream(adaptor,"token s4",s4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 985:31: -> ^( STRING $s4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:985:35: ^( STRING $s4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s4.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class iRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iRIref"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:988:1: iRIref : (i= IRI_REF -> ^( IRI $i) | prefixedName );
    public final IbmSparqlExtParser.iRIref_return iRIref() throws RecognitionException {
        IbmSparqlExtParser.iRIref_return retval = new IbmSparqlExtParser.iRIref_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        IbmSparqlExtParser.prefixedName_return prefixedName570 =null;


        XTree i_tree=null;
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:989:2: (i= IRI_REF -> ^( IRI $i) | prefixedName )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==IRI_REF) ) {
                alt175=1;
            }
            else if ( ((LA175_0 >= PNAME_LN && LA175_0 <= PNAME_NS)) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }
            switch (alt175) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:989:6: i= IRI_REF
                    {
                    i=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_iRIref9837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI_REF.add(i);


                    // AST REWRITE
                    // elements: i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 989:26: -> ^( IRI $i)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:989:30: ^( IRI $i)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(IRI, "IRI")
                        , root_1);

                        adaptor.addChild(root_1, stream_i.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:990:6: prefixedName
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_prefixedName_in_iRIref9864);
                    prefixedName570=prefixedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefixedName570.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iRIref"


    public static class prefixedName_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefixedName"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:993:1: prefixedName : (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) |n2= PNAME_NS -> ^( PREFIXED_NS $n2) );
    public final IbmSparqlExtParser.prefixedName_return prefixedName() throws RecognitionException {
        IbmSparqlExtParser.prefixedName_return retval = new IbmSparqlExtParser.prefixedName_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token n1=null;
        Token n2=null;

        XTree n1_tree=null;
        XTree n2_tree=null;
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleTokenStream stream_PNAME_LN=new RewriteRuleTokenStream(adaptor,"token PNAME_LN");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:994:2: (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) |n2= PNAME_NS -> ^( PREFIXED_NS $n2) )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==PNAME_LN) ) {
                alt176=1;
            }
            else if ( (LA176_0==PNAME_NS) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:994:6: n1= PNAME_LN
                    {
                    n1=(Token)match(input,PNAME_LN,FOLLOW_PNAME_LN_in_prefixedName9883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_LN.add(n1);


                    // AST REWRITE
                    // elements: n1
                    // token labels: n1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n1=new RewriteRuleTokenStream(adaptor,"token n1",n1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 994:26: -> ^( PREFIXED_NAME $n1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:994:30: ^( PREFIXED_NAME $n1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(PREFIXED_NAME, "PREFIXED_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_n1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:995:6: n2= PNAME_NS
                    {
                    n2=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixedName9910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_NS.add(n2);


                    // AST REWRITE
                    // elements: n2
                    // token labels: n2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n2=new RewriteRuleTokenStream(adaptor,"token n2",n2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 995:26: -> ^( PREFIXED_NS $n2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:995:30: ^( PREFIXED_NS $n2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS")
                        , root_1);

                        adaptor.addChild(root_1, stream_n2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefixedName"


    public static class blankNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:998:1: blankNode : ( BLANK_NODE_LABEL | annon );
    public final IbmSparqlExtParser.blankNode_return blankNode() throws RecognitionException {
        IbmSparqlExtParser.blankNode_return retval = new IbmSparqlExtParser.blankNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BLANK_NODE_LABEL571=null;
        IbmSparqlExtParser.annon_return annon572 =null;


        XTree BLANK_NODE_LABEL571_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:999:2: ( BLANK_NODE_LABEL | annon )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==BLANK_NODE_LABEL) ) {
                alt177=1;
            }
            else if ( (LA177_0==OPEN_SQ_BRACKET) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }
            switch (alt177) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:999:6: BLANK_NODE_LABEL
                    {
                    root_0 = (XTree)adaptor.nil();


                    BLANK_NODE_LABEL571=(Token)match(input,BLANK_NODE_LABEL,FOLLOW_BLANK_NODE_LABEL_in_blankNode9945); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLANK_NODE_LABEL571_tree = 
                    (XTree)adaptor.create(BLANK_NODE_LABEL571)
                    ;
                    adaptor.addChild(root_0, BLANK_NODE_LABEL571_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:999:25: annon
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_annon_in_blankNode9949);
                    annon572=annon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annon572.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNode"


    public static class annon_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annon"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1002:1: annon : OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) ;
    public final IbmSparqlExtParser.annon_return annon() throws RecognitionException {
        IbmSparqlExtParser.annon_return retval = new IbmSparqlExtParser.annon_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET573=null;
        Token CLOSE_SQ_BRACKET574=null;

        XTree OPEN_SQ_BRACKET573_tree=null;
        XTree CLOSE_SQ_BRACKET574_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1003:5: ( OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1003:9: OPEN_SQ_BRACKET CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET573=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_annon9968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET573);


            CLOSE_SQ_BRACKET574=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_annon9970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET574);


            // AST REWRITE
            // elements: OPEN_SQ_BRACKET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 1003:42: -> ^( ANNON OPEN_SQ_BRACKET )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1003:45: ^( ANNON OPEN_SQ_BRACKET )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ANNON, "ANNON")
                , root_1);

                adaptor.addChild(root_1, 
                stream_OPEN_SQ_BRACKET.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annon"


    public static class nil_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nil"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1006:1: nil : OPEN_BRACE CLOSE_BRACE -> NIL ;
    public final IbmSparqlExtParser.nil_return nil() throws RecognitionException {
        IbmSparqlExtParser.nil_return retval = new IbmSparqlExtParser.nil_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE575=null;
        Token CLOSE_BRACE576=null;

        XTree OPEN_BRACE575_tree=null;
        XTree CLOSE_BRACE576_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1006:5: ( OPEN_BRACE CLOSE_BRACE -> NIL )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparqlExt.g:1006:9: OPEN_BRACE CLOSE_BRACE
            {
            OPEN_BRACE575=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nil9990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE575);


            CLOSE_BRACE576=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nil9993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE576);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 1006:33: -> NIL
            {
                adaptor.addChild(root_0, 
                (XTree)adaptor.create(NIL, "NIL")
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nil"

    // Delegated rules


 

    public static final BitSet FOLLOW_query_in_queryUnit442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_query478 = new BitSet(new long[]{0x0400020000002000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_selectQuery_in_query486 = new BitSet(new long[]{0x0000000000100002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_constructQuery_in_query492 = new BitSet(new long[]{0x0000000000100002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_describeQuery_in_query498 = new BitSet(new long[]{0x0000000000100002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_askQuery_in_query504 = new BitSet(new long[]{0x0000000000100002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_bindingsClause_in_query512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_in_updateUnit571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseDecl_in_prologue609 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_prefixDecl_in_prologue615 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BASE_in_baseDecl657 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_baseDecl661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIX_in_prefixDecl694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixDecl698 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_prefixDecl702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDecl_in_selectQuery751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_selectClause_in_selectQuery756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_datasetClause_in_selectQuery760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_whereClause_in_selectQuery765 = new BitSet(new long[]{0x0000000000000000L,0x0000000410000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_solutionModifier_in_selectQuery769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_functionParam826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_ARROW_in_functionParam828 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD001030018902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_functionParam834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_functionParam840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POST_in_functionParam844 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DATA_in_functionParam846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl884 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_functionDecl888 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0001000008000000L});
    public static final BitSet FOLLOW_POST_in_functionDecl893 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ALL_in_functionDecl895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_GET_in_functionDecl900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_functionDecl904 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_functionDecl908 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_ARROW_in_functionDecl911 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_functionDecl915 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_functionDecl918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000004000000400L});
    public static final BitSet FOLLOW_FUNCLANG_in_functionDecl932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_VAR0_in_functionDecl936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_functionBody_in_functionDecl940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_functionDecl1020 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_TABLE_in_functionDecl1026 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_functionDecl1032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_functionDecl1034 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_functionParam_in_functionDecl1038 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_functionDecl1041 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_ARROW_in_functionDecl1043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_string_in_functionDecl1047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_274_in_functionDecl1049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_string_in_functionDecl1055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_functionBody1150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRING_LINE_NONEOP_in_functionBody1154 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_functionBody1156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_functionBody1177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_functionBody1181 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_functionBody1183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_subSelect1217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_whereClause_in_subSelect1221 = new BitSet(new long[]{0x0000000000000000L,0x0000000410000000L,0x0000000084000001L,0x2000000000000000L});
    public static final BitSet FOLLOW_solutionModifier_in_subSelect1225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_inlineData_in_subSelect1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause1273 = new BitSet(new long[]{0x1006148842804020L,0xB07C805040008120L,0xF000000008902B80L,0x050A0095E07CF83AL,0x0000000000004403L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause1279 = new BitSet(new long[]{0x0006148842804020L,0xB07C805040008120L,0xD000000008902B80L,0x050A0095E07CF83AL,0x0000000000004403L});
    public static final BitSet FOLLOW_REDUCED_in_selectClause1285 = new BitSet(new long[]{0x0006148842804020L,0xB07C805040008120L,0xD000000008902B80L,0x050A0095E07CF83AL,0x0000000000004403L});
    public static final BitSet FOLLOW_var_in_selectClause1296 = new BitSet(new long[]{0x0006148842804022L,0xB07C805040008120L,0xD000000008902B80L,0x050A0095E07CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_expAsVar_in_selectClause1302 = new BitSet(new long[]{0x0006148842804022L,0xB07C805040008120L,0xD000000008902B80L,0x050A0095E07CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_fexp_in_selectClause1308 = new BitSet(new long[]{0x0006148842804022L,0xB07C805040008120L,0xD000000008902B80L,0x050A0095E07CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_270_in_selectClause1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expAsVar1369 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_expAsVar1373 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_AS_in_expAsVar1375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_expAsVar1379 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expAsVar1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_fexp1415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_fexp1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery1463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_constructTemplate_in_constructQuery1483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_whereClause_in_constructQuery1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000410000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_constructQuery1544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1546 = new BitSet(new long[]{0xC038000200400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesTemplate_in_constructQuery1550 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1553 = new BitSet(new long[]{0x0000000000000000L,0x0000000410000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCRIBE_in_describeQuery1619 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000004003L});
    public static final BitSet FOLLOW_varOrIRIref_in_describeQuery1625 = new BitSet(new long[]{0x0000000000000000L,0x0002000410010000L,0x0000030094000001L,0x0000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_270_in_describeQuery1632 = new BitSet(new long[]{0x0000000000000000L,0x0000000410010000L,0x0000000094000001L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_datasetClause_in_describeQuery1638 = new BitSet(new long[]{0x0000000000000000L,0x0000000410010000L,0x0000000094000001L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_whereClause_in_describeQuery1643 = new BitSet(new long[]{0x0000000000000000L,0x0000000410000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_solutionModifier_in_describeQuery1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASK_in_askQuery1702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_datasetClause_in_askQuery1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_whereClause_in_askQuery1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_datasetClause1748 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000010000L});
    public static final BitSet FOLLOW_defaultGraphClause_in_datasetClause1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedGraphClause_in_datasetClause1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sourceSelector_in_defaultGraphClause1804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_namedGraphClause1821 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_sourceSelector_in_namedGraphClause1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_sourceSelector1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_whereClause1865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_whereClause1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupClause_in_solutionModifier1902 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_havingClause_in_solutionModifier1907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000084000001L});
    public static final BitSet FOLLOW_orderClause_in_solutionModifier1912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000001L});
    public static final BitSet FOLLOW_limitOffsetClauses_in_solutionModifier1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupClause1959 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_BY_in_groupClause1961 = new BitSet(new long[]{0x0006048842800020L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000403L});
    public static final BitSet FOLLOW_groupCondition_in_groupClause1965 = new BitSet(new long[]{0x0006048842800022L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000403L});
    public static final BitSet FOLLOW_builtInCall_in_groupCondition2000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_groupCondition2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_groupCondition2016 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_groupCondition2020 = new BitSet(new long[]{0x0000000100000800L});
    public static final BitSet FOLLOW_AS_in_groupCondition2024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_groupCondition2028 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_groupCondition2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_groupCondition2060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAVING_in_havingClause2077 = new BitSet(new long[]{0x0006048842800020L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000400L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause2081 = new BitSet(new long[]{0x0006048842800022L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_in_havingCondition2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderClause2135 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_BY_in_orderClause2137 = new BitSet(new long[]{0x0206048842801020L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000403L});
    public static final BitSet FOLLOW_orderCondition_in_orderClause2141 = new BitSet(new long[]{0x0206048842801022L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000403L});
    public static final BitSet FOLLOW_ASC_in_orderCondition2177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DESC_in_orderCondition2182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_orderCondition2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_orderCondition2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses2220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses2222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses2227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limitClause2247 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_INTEGER_in_limitClause2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OFFSET_in_offsetClause2283 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_INTEGER_in_offsetClause2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINDINGS_in_bindingsClause2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bindingsClause2322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause2325 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bindingsClause2329 = new BitSet(new long[]{0xC038000000000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_bindingValue_in_bindingsClause2333 = new BitSet(new long[]{0xC038000100000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bindingsClause2336 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nil_in_bindingsClause2340 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_bindingsClause2385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_bindingValue2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_bindingValue2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingValue2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_bindingValue2416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_bindingValue2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_update2439 = new BitSet(new long[]{0x0100280080000042L,0x0000020000000002L,0x0000000000004002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_update1_in_update2443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SEMICOLON_in_update2447 = new BitSet(new long[]{0x0100280080010040L,0x0000020000000002L,0x0008000000004002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_update_in_update2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_in_update12472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clear_in_update12476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_in_update12480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_in_update12484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_move_in_update12488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copy_in_update12492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_in_update12496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertData_in_update12500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteData_in_update12504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteWhere_in_update12508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_in_update12512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load2529 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_load2531 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_load2534 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_INTO_in_load2538 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_graphRef_in_load2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_clear2560 = new BitSet(new long[]{0x0040000000000080L,0x0000000002000000L,0x0000000000010000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_clear2562 = new BitSet(new long[]{0x0040000000000080L,0x0000000002000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_graphRefAll_in_clear2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop2582 = new BitSet(new long[]{0x0040000000000080L,0x0000000002000000L,0x0000000000010000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_drop2584 = new BitSet(new long[]{0x0040000000000080L,0x0000000002000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_graphRefAll_in_drop2587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_create2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_graphRef_in_create2609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_add2626 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_add2628 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_TO_in_add2633 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOVE_in_move2652 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_move2654 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_TO_in_move2659 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_copy2678 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SILENT_in_copy2680 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_TO_in_copy2685 = new BitSet(new long[]{0x0040000000000000L,0x0002000002000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertData2704 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DATA_in_insertData2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_quadData_in_insertData2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteData2724 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DATA_in_deleteData2726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_quadData_in_deleteData2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteWhere2745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_deleteWhere2747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteWhere2749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_modify2768 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_modify2770 = new BitSet(new long[]{0x0100000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_deleteClause_in_modify2777 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_insertClause_in_modify2779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_insertClause_in_modify2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_usingClause_in_modify2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_modify2791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_modify2793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteClause2809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteClause2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertClause2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_quadPattern_in_insertClause2830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_usingClause2847 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000010000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_usingClause2855 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphOrDefault2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphOrDefault2880 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_graphOrDefault2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphRef2900 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_graphRef2902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphRef_in_graphRefAll2916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphRefAll2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_graphRefAll2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_graphRefAll2928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2942 = new BitSet(new long[]{0xC038000200400000L,0x00021C0002002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_quads_in_quadPattern2944 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadData2960 = new BitSet(new long[]{0xC038000200400000L,0x00021C0002002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_quads_in_quadData2962 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadData2964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2978 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_quadsNotTriples_in_quads2983 = new BitSet(new long[]{0xE038000000400002L,0x00021C0002002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_DOT_in_quads2985 = new BitSet(new long[]{0xC038000000400002L,0x00021C0002002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2988 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_GRAPH_in_quadsNotTriples3006 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_varOrIRIref_in_quadsNotTriples3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples3010 = new BitSet(new long[]{0xC038000200400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsNotTriples3012 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate3029 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate3033 = new BitSet(new long[]{0xC038000000400002L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesTemplate_in_triplesTemplate3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern3053 = new BitSet(new long[]{0xC038000200480000L,0x00021C0002006001L,0x0000030078000400L,0x200080001E000440L,0x0000000000000003L});
    public static final BitSet FOLLOW_subSelect_in_groupGraphPattern3059 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_groupGraphPatternSub_in_groupGraphPattern3065 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern3069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSub3103 = new BitSet(new long[]{0x0000000000080002L,0x0000000002004000L,0x0000000050000400L,0x2000000000000400L});
    public static final BitSet FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub3106 = new BitSet(new long[]{0x0000000000080002L,0x0000000002004000L,0x0000000050000400L,0x2000000000000400L});
    public static final BitSet FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt3136 = new BitSet(new long[]{0xE038000000400002L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_DOT_in_groupGraphPatternSubInt3138 = new BitSet(new long[]{0xC038000000400002L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSubInt3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock3172 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock3176 = new BitSet(new long[]{0xC038000000400002L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_triplesBlock_in_triplesBlock3180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples3211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optionalGraphPattern_in_graphPatternNotTriples3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusGraphPattern_in_graphPatternNotTriples3238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphGraphPattern_in_graphPatternNotTriples3252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_serviceGraphPattern_in_graphPatternNotTriples3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_in_graphPatternNotTriples3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_in_graphPatternNotTriples3294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_graphPatternNotTriples3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_in_inlineData3327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_dataBlock_in_inlineData3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataOneVar_in_dataBlock3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataFull_in_dataBlock3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_inlineDataOneVar3383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar3385 = new BitSet(new long[]{0xC038000200000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataOneVar3389 = new BitSet(new long[]{0xC038000200000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar3392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull3425 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_inlineDataFull3429 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull3432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull3434 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull3438 = new BitSet(new long[]{0xC038000100000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataFull3442 = new BitSet(new long[]{0xC038000100000000L,0x00021C0000002001L,0x0000030000000000L,0x001080001E000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull3445 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_dataBlockValue3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_dataBlockValue3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_dataBlockValue3492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_dataBlockValue3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_dataBlockValue3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONAL_in_optionalGraphPattern3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_optionalGraphPattern3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphGraphPattern3547 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_varOrIRIref_in_graphGraphPattern3551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_graphGraphPattern3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_serviceGraphPattern3597 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000010000L,0x0000000000000003L});
    public static final BitSet FOLLOW_SILENT_in_serviceGraphPattern3601 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_varOrIRIref_in_serviceGraphPattern3606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_serviceGraphPattern3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind1_in_bind3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind2_in_bind3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind13670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind13672 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_bind13676 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_AS_in_bind13678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bind13682 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind13684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind23720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind23722 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_funcCall_in_bind23726 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_AS_in_bind23728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind23730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bind23734 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind23737 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind23739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_funcCall3778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_funcCall3780 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_funcCall3784 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_funcCall3787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_UNION_in_groupOrUnionGraphPattern3829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_minusGraphPattern3880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_minusGraphPattern3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter3910 = new BitSet(new long[]{0x0006048842800020L,0xB07E805000008120L,0xD000030008902900L,0x050A0085E07CF82AL,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_in_filter3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_constraint3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_constraint3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_constraint3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_functionCall3969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_argList_in_functionCall3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_argList4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_argList4021 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_argList4025 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_argList4030 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_COMMA_in_argList4034 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_argList4038 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_argList4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_expressionList4081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expressionList4096 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_expressionList4100 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList4104 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_expressionList4108 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expressionList4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate4150 = new BitSet(new long[]{0xC038000200400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_constructTriples_in_constructTemplate4153 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples4171 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_DOT_in_constructTriples4175 = new BitSet(new long[]{0xC038000000400002L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_constructTriples_in_constructTriples4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubject4198 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000002000003L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubject4222 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000002000003L});
    public static final BitSet FOLLOW_propertyList_in_triplesSameSubject4226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty4275 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty4277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmpty4284 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000030000000000L,0x0000000000000080L,0x0000000002000003L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty4289 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty4291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_propertyList4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_in_objectList4343 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_COMMA_in_objectList4346 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_object_in_objectList4348 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath4457 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_COMMA_in_objectListPath4460 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath4462 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_graphNode_in_object4567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphNodePath_in_objectPath4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrIRIref_in_verb4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_281_in_verb4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubjectPath4625 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801003L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_triplesSameSubjectPath4649 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801003L});
    public static final BitSet FOLLOW_propertyListPath_in_triplesSameSubjectPath4653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4703 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4707 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4726 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4746 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000030008000000L,0x0000000000000080L,0x0000000002801003L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4754 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4786 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_propertyListPath4872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_verbPath4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_verbSimple4910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathAlternative_in_path4924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_282_in_pathAlternative4955 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801000L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence5010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_273_in_pathSequence5024 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801000L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence5028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_pathPrimary_in_pathElt5075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000040C000L});
    public static final BitSet FOLLOW_pathMod_in_pathElt5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_279_in_pathEltOrInverse5136 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002001000L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse5138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathPrimary5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_281_in_pathPrimary5188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_268_in_pathPrimary5192 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_pathNegatedPropertySet_in_pathPrimary5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathPrimary5198 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801000L});
    public static final BitSet FOLLOW_path_in_pathPrimary5201 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathPrimary5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet5222 = new BitSet(new long[]{0x0000000100000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5226 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_282_in_pathNegatedPropertySet5230 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet5232 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet5240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_281_in_pathOneInPropertySet5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_279_in_pathOneInPropertySet5263 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet5265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_279_in_pathOneInPropertySet5280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_281_in_pathOneInPropertySet5282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_integer5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_in_triplesNode5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyList_in_triplesNode5332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionPath_in_triplesNodePath5372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyListPath_in_triplesNodePath5384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList5421 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000002000003L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_blankNodePropertyList5425 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath5457 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030008000000L,0x0000000000000000L,0x0000000002801003L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath5461 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection5493 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_graphNode_in_collection5497 = new BitSet(new long[]{0xC038000100400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection5500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collectionPath5532 = new BitSet(new long[]{0xC038000000400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_graphNodePath_in_collectionPath5536 = new BitSet(new long[]{0xC038000100400000L,0x00021C0000002001L,0x0000030028000000L,0x000080001E000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collectionPath5539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNode5571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_graphNode5575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNodePath5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_graphNodePath5593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrTerm5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphTerm_in_varOrTerm5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrIRIref5626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_varOrIRIref5630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR1_in_var5646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR2_in_var5669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_graphTerm5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_graphTerm5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_graphTerm5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_graphTerm5708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNode_in_graphTerm5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_graphTerm5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_expression5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_conditionalOrExpression5756 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5820 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_conditionalAndExpression5824 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_relationalExpression_in_valueLogical5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5895 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000100030L,0x0000000000000000L,0x0000000000382000L});
    public static final BitSet FOLLOW_275_in_relationalExpression5899 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_269_in_relationalExpression5922 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalExpression5947 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_276_in_relationalExpression5973 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTE_in_relationalExpression5999 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression6005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_277_in_relationalExpression6024 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression6030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_relationalExpression6049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_relationalExpression6079 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IN_in_relationalExpression6082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression6088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numericExpression6154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6174 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_271_in_additiveExpression6193 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6197 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_272_in_additiveExpression6222 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6226 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_additiveExpression6253 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x000000000003C000L});
    public static final BitSet FOLLOW_270_in_additiveExpression6273 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_273_in_additiveExpression6275 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6280 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_additiveExpression6383 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x000000000003C000L});
    public static final BitSet FOLLOW_270_in_additiveExpression6403 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_273_in_additiveExpression6405 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6410 = new BitSet(new long[]{0x8030000000000002L,0x0000180000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_270_in_multiplicativeExpression6532 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_273_in_multiplicativeExpression6547 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6550 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_268_in_unaryExpression6576 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_271_in_unaryExpression6585 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_272_in_unaryExpression6594 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000000403L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_primaryExpression6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_primaryExpression6627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIrefOrFunction_in_primaryExpression6634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_primaryExpression6641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_primaryExpression6648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_primaryExpression6655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_primaryExpression6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_primaryExpression6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_brackettedExpression6699 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_brackettedExpression6703 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_brackettedExpression6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_in_builtInCall6740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6742 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6746 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANG_in_builtInCall6780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6782 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6786 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGMATCHES_in_builtInCall6819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6821 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6825 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6827 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6831 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATATYPE_in_builtInCall6858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6860 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6864 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUND_in_builtInCall6893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_builtInCall6899 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_in_builtInCall6939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6941 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6945 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_builtInCall6978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6980 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall6984 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall7018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7022 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7026 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_builtInCall7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAND_in_builtInCall7055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nil_in_builtInCall7057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_builtInCall7120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7122 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7126 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CEIL_in_builtInCall7160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7162 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7166 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOOR_in_builtInCall7199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7201 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7205 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_in_builtInCall7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7238 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7242 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONCAT_in_builtInCall7273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall7277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substringExpression_in_builtInCall7326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLEN_in_builtInCall7371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7373 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7377 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strReplaceExpression_in_builtInCall7410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UCASE_in_builtInCall7415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7417 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7421 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCASE_in_builtInCall7452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7454 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7458 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODE_FOR_URI_in_builtInCall7489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7491 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7495 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_builtInCall7517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7519 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7523 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7525 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7529 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRSTARTS_in_builtInCall7557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7559 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7563 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7565 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7569 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRENDS_in_builtInCall7596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7598 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7602 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7604 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7608 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRBEFORE_in_builtInCall7637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7639 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7643 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7645 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7649 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRAFTER_in_builtInCall7678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7680 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7684 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7686 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7690 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_in_builtInCall7719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7721 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7725 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_in_builtInCall7757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7759 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7763 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_in_builtInCall7794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7796 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7800 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOURS_in_builtInCall7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7835 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7839 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTES_in_builtInCall7870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7872 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7876 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECONDS_in_builtInCall7905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7907 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7911 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_in_builtInCall7940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7942 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7946 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TZ_in_builtInCall7974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7976 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall7980 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOW_in_builtInCall8014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nil_in_builtInCall8016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UUID_in_builtInCall8025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nil_in_builtInCall8027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUUID_in_builtInCall8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nil_in_builtInCall8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MD5_in_builtInCall8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8049 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8053 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA1_in_builtInCall8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8088 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8092 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA224_in_builtInCall8124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8126 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8130 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA256_in_builtInCall8160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8162 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8166 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA384_in_builtInCall8196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8198 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8202 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA512_in_builtInCall8232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8234 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8238 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtInCall8268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall8272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_builtInCall8317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8319 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8323 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8325 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8329 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8331 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8335 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLANG_in_builtInCall8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8365 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8369 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8371 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8375 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRDT_in_builtInCall8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8418 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8422 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8424 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8428 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMETERM_in_builtInCall8471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8473 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8477 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8479 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8483 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISIRI_in_builtInCall8523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8525 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8529 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISURI_in_builtInCall8560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8562 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8566 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISBLANK_in_builtInCall8597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8599 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8603 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLITERAL_in_builtInCall8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8634 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8638 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISNUMERIC_in_builtInCall8665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8667 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_builtInCall8671 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexExpression_in_builtInCall8698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsFunc_in_builtInCall8703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notExistsFunc_in_builtInCall8708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEX_in_regexExpression8725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_regexExpression8727 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_regexExpression8731 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8733 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_regexExpression8737 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8741 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_regexExpression8745 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_regexExpression8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_substringExpression8793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_substringExpression8795 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_substringExpression8799 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8801 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_substringExpression8805 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8809 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_substringExpression8813 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_substringExpression8818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_strReplaceExpression8860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_strReplaceExpression8862 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8866 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8868 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8872 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8874 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8878 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8881 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8885 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_strReplaceExpression8889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsFunc8938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_existsFunc8942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_notExistsFunc8976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXISTS_in_notExistsFunc8978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_notExistsFunc8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_aggregate9014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9016 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x000000000001D403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9020 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x000000000001D403L});
    public static final BitSet FOLLOW_270_in_aggregate9025 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_aggregate9031 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_aggregate9067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9069 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9073 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9078 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_aggregate9104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9106 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9110 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9115 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_aggregate9141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9143 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9147 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9152 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_aggregate9178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9180 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9184 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9189 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_aggregate9215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9217 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9221 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9226 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_CONCAT_in_aggregate9249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate9251 = new BitSet(new long[]{0xD03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate9255 = new BitSet(new long[]{0xC03E148842804020L,0xB07E9C504000A121L,0xD000030008902B80L,0x050A8095FE7CF83AL,0x0000000000019403L});
    public static final BitSet FOLLOW_expression_in_aggregate9260 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SEMICOLON_in_aggregate9264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEPARATOR_in_aggregate9266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_275_in_aggregate9268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_string_in_aggregate9272 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate9277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_iRIrefOrFunction9330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_argList_in_iRIrefOrFunction9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_rDFLiteral9390 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LANGTAG_in_rDFLiteral9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_280_in_rDFLiteral9400 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_iRIref_in_rDFLiteral9402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralUnsigned_in_numericLiteral9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_numericLiteral9432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_numericLiteral9440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_numericLiteralUnsigned9458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numericLiteralUnsigned9479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_numericLiteralUnsigned9499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive9552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive9570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_booleanLiteral9669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_booleanLiteral9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL1_in_string9724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_string9752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG1_in_string9780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG2_in_string9802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_REF_in_iRIref9837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixedName_in_iRIref9864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_LN_in_prefixedName9883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixedName9910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_NODE_LABEL_in_blankNode9945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annon_in_blankNode9949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_annon9968 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_annon9970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nil9990 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nil9993 = new BitSet(new long[]{0x0000000000000002L});

}