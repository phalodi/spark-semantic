// $ANTLR 3.4 /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g 2016-09-01 11:19:32
 
package com.ibm.research.rdf.store.sparql11;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class IbmSparqlParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ABS", "ADD", "ALL", "ALT", "ANNON", "AS", "ASC", "ASK", "AVG", "B", "BASE", "BIG_DECIMAL", "BIG_INTEGER", "BIND", "BINDINGS", "BIND_VALUES", "BLANK_NODE_LABEL", "BNODE", "BOOLEAN", "BOUND", "BROKEN_MINUS", "BROKEN_PLUS", "BY", "C", "CEIL", "CLEAR", "CLOSE_BRACE", "CLOSE_CURLY_BRACE", "CLOSE_SQ_BRACKET", "COALESCE", "COLLECTION", "COMMA", "COMMENT", "CONCAT", "CONDITION", "CONSTRUCT", "CONTAINS", "COPY", "COUNT", "CREATE", "D", "DATA", "DATASET", "DATATYPE", "DAY", "DECIMAL", "DECIMAL_NEGATIVE", "DECIMAL_POSITIVE", "DEFAULT", "DEFAULT_NAMESPACE", "DELETE", "DESC", "DESCRIBE", "DIGIT", "DISTINCT", "DOT", "DOUBLE", "DOUBLE_NEGATIVE", "DOUBLE_POSITIVE", "DROP", "E", "ECHAR", "ELT", "ENCODE_FOR_URI", "EOL", "EXISTS", "EXP", "EXPONENT", "EXPRESSION", "F", "FALSE", "FILTER", "FLOOR", "FROM", "FUNCTION", "G", "GRAPH", "GRAPH_GRAPH_PATTERN", "GRAPH_NODE", "GROUP", "GROUP_BY", "GROUP_CONCAT", "GROUP_GRAPH_PATTERN", "GROUP_GRAPH_PATTERN_SUB", "H", "HAVING", "HEXDIGIT", "HOURS", "I", "IF", "IN", "INLINE_DATA", "INSERT", "INTEGER", "INTEGER_NEGATIVE", "INTEGER_POSITIVE", "INTO", "INV", "IRI", "IRI_OR_FUNCTION", "IRI_REF", "ISBLANK", "ISIRI", "ISLITERAL", "ISNUMERIC", "ISURI", "J", "K", "KEY", "L", "LANG", "LANGMATCHES", "LANGTAG", "LCASE", "LIMIT", "LOAD", "LOGICAL_AND", "LOGICAL_OR", "LT", "LTE", "M", "MAX", "MD5", "MIN", "MINUS", "MINUTES", "MODIFIERS", "MONTH", "MOVE", "N", "NAMED", "NAMESPACE_PREFIX_MAP", "NIL", "NON_TRIPLES", "NOT", "NOT_EXISTS", "NOT_IN", "NOW", "NUMERIC", "O", "OFFSET", "OPEN_BRACE", "OPEN_CURLY_BRACE", "OPEN_SQ_BRACKET", "OPTIONAL", "ORDER", "ORDER_BY", "P", "PATH", "PERCENT", "PLX", "PNAME_LN", "PNAME_NS", "PN_CHARS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_LOCAL", "PN_LOCAL_ESC", "PN_PREFIX", "PREDICATE", "PREDICATE_VALUE", "PREFIX", "PREFIXED_NAME", "PREFIXED_NS", "PROLOGUE", "PROPERTY_LIST", "PVARS", "Q", "QUERY", "R", "RAND", "REDUCED", "REGEX", "REPLACE", "ROOT", "ROUND", "S", "SAMETERM", "SAMPLE", "SECONDS", "SELECT", "SEMICOLON", "SEPARATOR", "SEQ", "SERVICE", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "SILENT", "STR", "STRAFTER", "STRBEFORE", "STRDT", "STRENDS", "STRING", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "STRLANG", "STRLEN", "STRSTARTS", "STRUUID", "SUBJECT", "SUBSTR", "SUB_SELECT", "SUM", "T", "TIMEZONE", "TO", "TRIPLE", "TRIPLE2", "TRIPLES_BLOCK", "TRIPLES_NODE", "TRIPLES_NODE_PROPERTY_LIST", "TRIPLES_SAME_SUBJECT", "TRUE", "TYPE", "TZ", "U", "UCASE", "UNDEF", "UNICODE_ESCAPE", "UNION", "UPDATE", "URI", "USING", "UUID", "V", "VALUE", "VALUES", "VAR", "VAR1", "VAR2", "VARNAME", "W", "WHERE", "WHERE_TOKEN", "WITH", "WS", "X", "Y", "YEAR", "Z", "'!'", "'!='", "'*'", "'+'", "'-'", "'/'", "'='", "'>'", "'>='", "'?'", "'^'", "'^^'", "'a'", "'|'"
    };

    public static final int EOF=-1;
    public static final int T__251=251;
    public static final int T__252=252;
    public static final int T__253=253;
    public static final int T__254=254;
    public static final int T__255=255;
    public static final int T__256=256;
    public static final int T__257=257;
    public static final int T__258=258;
    public static final int T__259=259;
    public static final int T__260=260;
    public static final int T__261=261;
    public static final int T__262=262;
    public static final int T__263=263;
    public static final int T__264=264;
    public static final int A=4;
    public static final int ABS=5;
    public static final int ADD=6;
    public static final int ALL=7;
    public static final int ALT=8;
    public static final int ANNON=9;
    public static final int AS=10;
    public static final int ASC=11;
    public static final int ASK=12;
    public static final int AVG=13;
    public static final int B=14;
    public static final int BASE=15;
    public static final int BIG_DECIMAL=16;
    public static final int BIG_INTEGER=17;
    public static final int BIND=18;
    public static final int BINDINGS=19;
    public static final int BIND_VALUES=20;
    public static final int BLANK_NODE_LABEL=21;
    public static final int BNODE=22;
    public static final int BOOLEAN=23;
    public static final int BOUND=24;
    public static final int BROKEN_MINUS=25;
    public static final int BROKEN_PLUS=26;
    public static final int BY=27;
    public static final int C=28;
    public static final int CEIL=29;
    public static final int CLEAR=30;
    public static final int CLOSE_BRACE=31;
    public static final int CLOSE_CURLY_BRACE=32;
    public static final int CLOSE_SQ_BRACKET=33;
    public static final int COALESCE=34;
    public static final int COLLECTION=35;
    public static final int COMMA=36;
    public static final int COMMENT=37;
    public static final int CONCAT=38;
    public static final int CONDITION=39;
    public static final int CONSTRUCT=40;
    public static final int CONTAINS=41;
    public static final int COPY=42;
    public static final int COUNT=43;
    public static final int CREATE=44;
    public static final int D=45;
    public static final int DATA=46;
    public static final int DATASET=47;
    public static final int DATATYPE=48;
    public static final int DAY=49;
    public static final int DECIMAL=50;
    public static final int DECIMAL_NEGATIVE=51;
    public static final int DECIMAL_POSITIVE=52;
    public static final int DEFAULT=53;
    public static final int DEFAULT_NAMESPACE=54;
    public static final int DELETE=55;
    public static final int DESC=56;
    public static final int DESCRIBE=57;
    public static final int DIGIT=58;
    public static final int DISTINCT=59;
    public static final int DOT=60;
    public static final int DOUBLE=61;
    public static final int DOUBLE_NEGATIVE=62;
    public static final int DOUBLE_POSITIVE=63;
    public static final int DROP=64;
    public static final int E=65;
    public static final int ECHAR=66;
    public static final int ELT=67;
    public static final int ENCODE_FOR_URI=68;
    public static final int EOL=69;
    public static final int EXISTS=70;
    public static final int EXP=71;
    public static final int EXPONENT=72;
    public static final int EXPRESSION=73;
    public static final int F=74;
    public static final int FALSE=75;
    public static final int FILTER=76;
    public static final int FLOOR=77;
    public static final int FROM=78;
    public static final int FUNCTION=79;
    public static final int G=80;
    public static final int GRAPH=81;
    public static final int GRAPH_GRAPH_PATTERN=82;
    public static final int GRAPH_NODE=83;
    public static final int GROUP=84;
    public static final int GROUP_BY=85;
    public static final int GROUP_CONCAT=86;
    public static final int GROUP_GRAPH_PATTERN=87;
    public static final int GROUP_GRAPH_PATTERN_SUB=88;
    public static final int H=89;
    public static final int HAVING=90;
    public static final int HEXDIGIT=91;
    public static final int HOURS=92;
    public static final int I=93;
    public static final int IF=94;
    public static final int IN=95;
    public static final int INLINE_DATA=96;
    public static final int INSERT=97;
    public static final int INTEGER=98;
    public static final int INTEGER_NEGATIVE=99;
    public static final int INTEGER_POSITIVE=100;
    public static final int INTO=101;
    public static final int INV=102;
    public static final int IRI=103;
    public static final int IRI_OR_FUNCTION=104;
    public static final int IRI_REF=105;
    public static final int ISBLANK=106;
    public static final int ISIRI=107;
    public static final int ISLITERAL=108;
    public static final int ISNUMERIC=109;
    public static final int ISURI=110;
    public static final int J=111;
    public static final int K=112;
    public static final int KEY=113;
    public static final int L=114;
    public static final int LANG=115;
    public static final int LANGMATCHES=116;
    public static final int LANGTAG=117;
    public static final int LCASE=118;
    public static final int LIMIT=119;
    public static final int LOAD=120;
    public static final int LOGICAL_AND=121;
    public static final int LOGICAL_OR=122;
    public static final int LT=123;
    public static final int LTE=124;
    public static final int M=125;
    public static final int MAX=126;
    public static final int MD5=127;
    public static final int MIN=128;
    public static final int MINUS=129;
    public static final int MINUTES=130;
    public static final int MODIFIERS=131;
    public static final int MONTH=132;
    public static final int MOVE=133;
    public static final int N=134;
    public static final int NAMED=135;
    public static final int NAMESPACE_PREFIX_MAP=136;
    public static final int NIL=137;
    public static final int NON_TRIPLES=138;
    public static final int NOT=139;
    public static final int NOT_EXISTS=140;
    public static final int NOT_IN=141;
    public static final int NOW=142;
    public static final int NUMERIC=143;
    public static final int O=144;
    public static final int OFFSET=145;
    public static final int OPEN_BRACE=146;
    public static final int OPEN_CURLY_BRACE=147;
    public static final int OPEN_SQ_BRACKET=148;
    public static final int OPTIONAL=149;
    public static final int ORDER=150;
    public static final int ORDER_BY=151;
    public static final int P=152;
    public static final int PATH=153;
    public static final int PERCENT=154;
    public static final int PLX=155;
    public static final int PNAME_LN=156;
    public static final int PNAME_NS=157;
    public static final int PN_CHARS=158;
    public static final int PN_CHARS_BASE=159;
    public static final int PN_CHARS_U=160;
    public static final int PN_LOCAL=161;
    public static final int PN_LOCAL_ESC=162;
    public static final int PN_PREFIX=163;
    public static final int PREDICATE=164;
    public static final int PREDICATE_VALUE=165;
    public static final int PREFIX=166;
    public static final int PREFIXED_NAME=167;
    public static final int PREFIXED_NS=168;
    public static final int PROLOGUE=169;
    public static final int PROPERTY_LIST=170;
    public static final int PVARS=171;
    public static final int Q=172;
    public static final int QUERY=173;
    public static final int R=174;
    public static final int RAND=175;
    public static final int REDUCED=176;
    public static final int REGEX=177;
    public static final int REPLACE=178;
    public static final int ROOT=179;
    public static final int ROUND=180;
    public static final int S=181;
    public static final int SAMETERM=182;
    public static final int SAMPLE=183;
    public static final int SECONDS=184;
    public static final int SELECT=185;
    public static final int SEMICOLON=186;
    public static final int SEPARATOR=187;
    public static final int SEQ=188;
    public static final int SERVICE=189;
    public static final int SHA1=190;
    public static final int SHA224=191;
    public static final int SHA256=192;
    public static final int SHA384=193;
    public static final int SHA512=194;
    public static final int SILENT=195;
    public static final int STR=196;
    public static final int STRAFTER=197;
    public static final int STRBEFORE=198;
    public static final int STRDT=199;
    public static final int STRENDS=200;
    public static final int STRING=201;
    public static final int STRING_LITERAL1=202;
    public static final int STRING_LITERAL2=203;
    public static final int STRING_LITERAL_LONG1=204;
    public static final int STRING_LITERAL_LONG2=205;
    public static final int STRLANG=206;
    public static final int STRLEN=207;
    public static final int STRSTARTS=208;
    public static final int STRUUID=209;
    public static final int SUBJECT=210;
    public static final int SUBSTR=211;
    public static final int SUB_SELECT=212;
    public static final int SUM=213;
    public static final int T=214;
    public static final int TIMEZONE=215;
    public static final int TO=216;
    public static final int TRIPLE=217;
    public static final int TRIPLE2=218;
    public static final int TRIPLES_BLOCK=219;
    public static final int TRIPLES_NODE=220;
    public static final int TRIPLES_NODE_PROPERTY_LIST=221;
    public static final int TRIPLES_SAME_SUBJECT=222;
    public static final int TRUE=223;
    public static final int TYPE=224;
    public static final int TZ=225;
    public static final int U=226;
    public static final int UCASE=227;
    public static final int UNDEF=228;
    public static final int UNICODE_ESCAPE=229;
    public static final int UNION=230;
    public static final int UPDATE=231;
    public static final int URI=232;
    public static final int USING=233;
    public static final int UUID=234;
    public static final int V=235;
    public static final int VALUE=236;
    public static final int VALUES=237;
    public static final int VAR=238;
    public static final int VAR1=239;
    public static final int VAR2=240;
    public static final int VARNAME=241;
    public static final int W=242;
    public static final int WHERE=243;
    public static final int WHERE_TOKEN=244;
    public static final int WITH=245;
    public static final int WS=246;
    public static final int X=247;
    public static final int Y=248;
    public static final int YEAR=249;
    public static final int Z=250;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public IbmSparqlParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public IbmSparqlParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return IbmSparqlParser.tokenNames; }
    public String getGrammarFileName() { return "/home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g"; }


    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}
    	
    	public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    		throws RecognitionException	
    	{
    		throw e;
    	}
    	
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
        	throws RecognitionException
    	{   
        	throw new MismatchedTokenException(ttype, input);
    	}  


    public static class queryUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryUnit"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:117:1: queryUnit : query -> ^( ROOT query ) ;
    public final IbmSparqlParser.queryUnit_return queryUnit() throws RecognitionException {
        IbmSparqlParser.queryUnit_return retval = new IbmSparqlParser.queryUnit_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.query_return query1 =null;


        RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:118:2: ( query -> ^( ROOT query ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:118:4: query
            {
            pushFollow(FOLLOW_query_in_queryUnit375);
            query1=query();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query.add(query1.getTree());

            // AST REWRITE
            // elements: query
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 120:3: -> ^( ROOT query )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:120:7: ^( ROOT query )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ROOT, "ROOT")
                , root_1);

                adaptor.addChild(root_1, stream_query.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryUnit"


    public static class query_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:124:1: query : p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) ;
    public final IbmSparqlParser.query_return query() throws RecognitionException {
        IbmSparqlParser.query_return retval = new IbmSparqlParser.query_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.prologue_return p =null;

        IbmSparqlParser.selectQuery_return s =null;

        IbmSparqlParser.constructQuery_return c =null;

        IbmSparqlParser.describeQuery_return d =null;

        IbmSparqlParser.askQuery_return a =null;

        IbmSparqlParser.bindingsClause_return b =null;


        RewriteRuleSubtreeStream stream_constructQuery=new RewriteRuleSubtreeStream(adaptor,"rule constructQuery");
        RewriteRuleSubtreeStream stream_describeQuery=new RewriteRuleSubtreeStream(adaptor,"rule describeQuery");
        RewriteRuleSubtreeStream stream_bindingsClause=new RewriteRuleSubtreeStream(adaptor,"rule bindingsClause");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_selectQuery=new RewriteRuleSubtreeStream(adaptor,"rule selectQuery");
        RewriteRuleSubtreeStream stream_askQuery=new RewriteRuleSubtreeStream(adaptor,"rule askQuery");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:126:2: (p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:126:4: p= prologue (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery ) (b= bindingsClause )?
            {
            pushFollow(FOLLOW_prologue_in_query420);
            p=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prologue.add(p.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:127:3: (s= selectQuery |c= constructQuery |d= describeQuery |a= askQuery )
            int alt1=4;
            switch ( input.LA(1) ) {
            case SELECT:
                {
                alt1=1;
                }
                break;
            case CONSTRUCT:
                {
                alt1=2;
                }
                break;
            case DESCRIBE:
                {
                alt1=3;
                }
                break;
            case ASK:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }

            switch (alt1) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:127:5: s= selectQuery
                    {
                    pushFollow(FOLLOW_selectQuery_in_query428);
                    s=selectQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectQuery.add(s.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:127:21: c= constructQuery
                    {
                    pushFollow(FOLLOW_constructQuery_in_query434);
                    c=constructQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructQuery.add(c.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:127:40: d= describeQuery
                    {
                    pushFollow(FOLLOW_describeQuery_in_query440);
                    d=describeQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_describeQuery.add(d.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:127:58: a= askQuery
                    {
                    pushFollow(FOLLOW_askQuery_in_query446);
                    a=askQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_askQuery.add(a.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:128:4: (b= bindingsClause )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==BINDINGS||LA2_0==VALUES) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:128:4: b= bindingsClause
                    {
                    pushFollow(FOLLOW_bindingsClause_in_query454);
                    b=bindingsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bindingsClause.add(b.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: p, d, a, s, c, b
            // token labels: 
            // rule labels: p, a, b, s, c, d, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 130:3: -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:7: ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(QUERY, "QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:20: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextTree());

                }
                stream_s.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:24: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:28: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:32: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:130:36: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { ((XTree)retval.tree).matched = input.toString(retval.start,input.LT(-1)); }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class updateUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updateUnit"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:133:1: updateUnit : update -> ^( UPDATE update ) ;
    public final IbmSparqlParser.updateUnit_return updateUnit() throws RecognitionException {
        IbmSparqlParser.updateUnit_return retval = new IbmSparqlParser.updateUnit_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.update_return update2 =null;


        RewriteRuleSubtreeStream stream_update=new RewriteRuleSubtreeStream(adaptor,"rule update");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:134:2: ( update -> ^( UPDATE update ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:134:6: update
            {
            pushFollow(FOLLOW_update_in_updateUnit513);
            update2=update();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update.add(update2.getTree());

            // AST REWRITE
            // elements: update
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 136:3: -> ^( UPDATE update )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:136:7: ^( UPDATE update )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(UPDATE, "UPDATE")
                , root_1);

                adaptor.addChild(root_1, stream_update.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updateUnit"


    public static class prologue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prologue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:139:1: prologue : (b+= baseDecl |p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) ;
    public final IbmSparqlParser.prologue_return prologue() throws RecognitionException {
        IbmSparqlParser.prologue_return retval = new IbmSparqlParser.prologue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_b=null;
        List list_p=null;
        RuleReturnScope b = null;
        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_baseDecl=new RewriteRuleSubtreeStream(adaptor,"rule baseDecl");
        RewriteRuleSubtreeStream stream_prefixDecl=new RewriteRuleSubtreeStream(adaptor,"rule prefixDecl");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:140:2: ( (b+= baseDecl |p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:140:6: (b+= baseDecl |p+= prefixDecl )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:140:6: (b+= baseDecl |p+= prefixDecl )*
            loop3:
            do {
                int alt3=3;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==BASE) ) {
                    alt3=1;
                }
                else if ( (LA3_0==PREFIX) ) {
                    alt3=2;
                }


                switch (alt3) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:140:8: b+= baseDecl
            	    {
            	    pushFollow(FOLLOW_baseDecl_in_prologue551);
            	    b=baseDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_baseDecl.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:140:22: p+= prefixDecl
            	    {
            	    pushFollow(FOLLOW_prefixDecl_in_prologue557);
            	    p=prefixDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prefixDecl.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            // AST REWRITE
            // elements: p, b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p, b
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 142:3: -> ^( PROLOGUE ( $b)* ( $p)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:142:7: ^( PROLOGUE ( $b)* ( $p)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROLOGUE, "PROLOGUE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:142:20: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:142:25: ( $p)*
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prologue"


    public static class baseDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "baseDecl"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:145:1: baseDecl : BASE i= iRIref -> ^( BASE $i) ;
    public final IbmSparqlParser.baseDecl_return baseDecl() throws RecognitionException {
        IbmSparqlParser.baseDecl_return retval = new IbmSparqlParser.baseDecl_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BASE3=null;
        IbmSparqlParser.iRIref_return i =null;


        XTree BASE3_tree=null;
        RewriteRuleTokenStream stream_BASE=new RewriteRuleTokenStream(adaptor,"token BASE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:146:2: ( BASE i= iRIref -> ^( BASE $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:146:6: BASE i= iRIref
            {
            BASE3=(Token)match(input,BASE,FOLLOW_BASE_in_baseDecl599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE.add(BASE3);


            pushFollow(FOLLOW_iRIref_in_baseDecl603);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // AST REWRITE
            // elements: BASE, i
            // token labels: 
            // rule labels: i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 148:3: -> ^( BASE $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:148:7: ^( BASE $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_BASE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "baseDecl"


    public static class prefixDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefixDecl"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:151:1: prefixDecl : PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) ;
    public final IbmSparqlParser.prefixDecl_return prefixDecl() throws RecognitionException {
        IbmSparqlParser.prefixDecl_return retval = new IbmSparqlParser.prefixDecl_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token p=null;
        Token PREFIX4=null;
        IbmSparqlParser.iRIref_return i =null;


        XTree p_tree=null;
        XTree PREFIX4_tree=null;
        RewriteRuleTokenStream stream_PREFIX=new RewriteRuleTokenStream(adaptor,"token PREFIX");
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:152:2: ( PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:152:6: PREFIX p= PNAME_NS i= iRIref
            {
            PREFIX4=(Token)match(input,PREFIX,FOLLOW_PREFIX_in_prefixDecl636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PREFIX.add(PREFIX4);


            p=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixDecl640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PNAME_NS.add(p);


            pushFollow(FOLLOW_iRIref_in_prefixDecl644);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // AST REWRITE
            // elements: p, PREFIX, i
            // token labels: p
            // rule labels: i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 154:3: -> ^( PREFIX ^( PREFIXED_NS $p) $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:154:7: ^( PREFIX ^( PREFIXED_NS $p) $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_PREFIX.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:154:17: ^( PREFIXED_NS $p)
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS")
                , root_2);

                adaptor.addChild(root_2, stream_p.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefixDecl"


    public static class selectQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:157:1: selectQuery : s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) ;
    public final IbmSparqlParser.selectQuery_return selectQuery() throws RecognitionException {
        IbmSparqlParser.selectQuery_return retval = new IbmSparqlParser.selectQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_d=null;
        IbmSparqlParser.selectClause_return s =null;

        IbmSparqlParser.whereClause_return w =null;

        IbmSparqlParser.solutionModifier_return m =null;

        RuleReturnScope d = null;
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:158:2: (s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:158:6: s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier
            {
            pushFollow(FOLLOW_selectClause_in_selectQuery685);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:158:22: (d+= datasetClause )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==FROM) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:158:22: d+= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_selectQuery689);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            pushFollow(FOLLOW_whereClause_in_selectQuery694);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            pushFollow(FOLLOW_solutionModifier_in_selectQuery698);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());

            // AST REWRITE
            // elements: d, m, s, w
            // token labels: 
            // rule labels: s, w, m, retval
            // token list labels: 
            // rule list labels: d
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"token d",list_d);
            root_0 = (XTree)adaptor.nil();
            // 159:3: -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:7: ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(SELECT, "SELECT")
                , root_1);

                adaptor.addChild(root_1, stream_s.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:20: ( ^( DATASET ( $d)* ) )?
                if ( stream_d.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:20: ^( DATASET ( $d)* )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(DATASET, "DATASET")
                    , root_2);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:31: ( $d)*
                    while ( stream_d.hasNext() ) {
                        adaptor.addChild(root_2, stream_d.nextTree());

                    }
                    stream_d.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:37: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:159:41: ( $m)?
                if ( stream_m.hasNext() ) {
                    adaptor.addChild(root_1, stream_m.nextTree());

                }
                stream_m.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectQuery"


    public static class subSelect_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subSelect"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:162:1: subSelect : s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) ;
    public final IbmSparqlParser.subSelect_return subSelect() throws RecognitionException {
        IbmSparqlParser.subSelect_return retval = new IbmSparqlParser.subSelect_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.selectClause_return s =null;

        IbmSparqlParser.whereClause_return w =null;

        IbmSparqlParser.solutionModifier_return m =null;

        IbmSparqlParser.inlineData_return d =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_inlineData=new RewriteRuleSubtreeStream(adaptor,"rule inlineData");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:163:2: (s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:163:6: s= selectClause w= whereClause m= solutionModifier (d= inlineData )?
            {
            pushFollow(FOLLOW_selectClause_in_subSelect748);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

            pushFollow(FOLLOW_whereClause_in_subSelect752);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            pushFollow(FOLLOW_solutionModifier_in_subSelect756);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:163:54: (d= inlineData )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==VALUES) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:163:55: d= inlineData
                    {
                    pushFollow(FOLLOW_inlineData_in_subSelect761);
                    d=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inlineData.add(d.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: s, d, w, m
            // token labels: 
            // rule labels: s, d, w, m, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 164:3: -> ^( SUB_SELECT $s $w $m ( $d)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:164:7: ^( SUB_SELECT $s $w $m ( $d)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(SUB_SELECT, "SUB_SELECT")
                , root_1);

                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_1, stream_m.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:164:31: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subSelect"


    public static class selectClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:167:1: selectClause : SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) ;
    public final IbmSparqlParser.selectClause_return selectClause() throws RecognitionException {
        IbmSparqlParser.selectClause_return retval = new IbmSparqlParser.selectClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token SELECT5=null;
        Token char_literal6=null;
        List list_v1=null;
        List list_e=null;
        List list_f=null;
        RuleReturnScope v1 = null;
        RuleReturnScope e = null;
        RuleReturnScope f = null;
        XTree t1_tree=null;
        XTree t2_tree=null;
        XTree SELECT5_tree=null;
        XTree char_literal6_tree=null;
        RewriteRuleTokenStream stream_253=new RewriteRuleTokenStream(adaptor,"token 253");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_REDUCED=new RewriteRuleTokenStream(adaptor,"token REDUCED");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expAsVar=new RewriteRuleSubtreeStream(adaptor,"rule expAsVar");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_fexp=new RewriteRuleSubtreeStream(adaptor,"rule fexp");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:2: ( SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:6: SELECT (t1= DISTINCT |t2= REDUCED )? ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' )
            {
            SELECT5=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT5);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:13: (t1= DISTINCT |t2= REDUCED )?
            int alt6=3;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DISTINCT) ) {
                alt6=1;
            }
            else if ( (LA6_0==REDUCED) ) {
                alt6=2;
            }
            switch (alt6) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:15: t1= DISTINCT
                    {
                    t1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(t1);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:29: t2= REDUCED
                    {
                    t2=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_REDUCED.add(t2);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:43: ( (v1+= var |e+= expAsVar |f+= fexp )+ | '*' )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==ABS||LA8_0==AVG||LA8_0==BNODE||LA8_0==BOUND||LA8_0==CEIL||LA8_0==COALESCE||LA8_0==CONCAT||LA8_0==CONTAINS||LA8_0==COUNT||(LA8_0 >= DATATYPE && LA8_0 <= DAY)||LA8_0==ENCODE_FOR_URI||LA8_0==EXISTS||LA8_0==FLOOR||LA8_0==GROUP_CONCAT||LA8_0==HOURS||LA8_0==IF||LA8_0==IRI||(LA8_0 >= ISBLANK && LA8_0 <= ISURI)||(LA8_0 >= LANG && LA8_0 <= LANGMATCHES)||LA8_0==LCASE||(LA8_0 >= MAX && LA8_0 <= MIN)||LA8_0==MINUTES||LA8_0==MONTH||LA8_0==NOT||LA8_0==NOW||LA8_0==OPEN_BRACE||LA8_0==RAND||(LA8_0 >= REGEX && LA8_0 <= REPLACE)||LA8_0==ROUND||(LA8_0 >= SAMETERM && LA8_0 <= SECONDS)||(LA8_0 >= SHA1 && LA8_0 <= SHA512)||(LA8_0 >= STR && LA8_0 <= STRENDS)||(LA8_0 >= STRLANG && LA8_0 <= STRUUID)||LA8_0==SUBSTR||LA8_0==SUM||LA8_0==TIMEZONE||LA8_0==TZ||LA8_0==UCASE||LA8_0==URI||LA8_0==UUID||(LA8_0 >= VAR1 && LA8_0 <= VAR2)||LA8_0==YEAR) ) {
                alt8=1;
            }
            else if ( (LA8_0==253) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:45: (v1+= var |e+= expAsVar |f+= fexp )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:45: (v1+= var |e+= expAsVar |f+= fexp )+
                    int cnt7=0;
                    loop7:
                    do {
                        int alt7=4;
                        switch ( input.LA(1) ) {
                        case VAR1:
                        case VAR2:
                            {
                            alt7=1;
                            }
                            break;
                        case OPEN_BRACE:
                            {
                            alt7=2;
                            }
                            break;
                        case ABS:
                        case AVG:
                        case BNODE:
                        case BOUND:
                        case CEIL:
                        case COALESCE:
                        case CONCAT:
                        case CONTAINS:
                        case COUNT:
                        case DATATYPE:
                        case DAY:
                        case ENCODE_FOR_URI:
                        case EXISTS:
                        case FLOOR:
                        case GROUP_CONCAT:
                        case HOURS:
                        case IF:
                        case IRI:
                        case ISBLANK:
                        case ISIRI:
                        case ISLITERAL:
                        case ISNUMERIC:
                        case ISURI:
                        case LANG:
                        case LANGMATCHES:
                        case LCASE:
                        case MAX:
                        case MD5:
                        case MIN:
                        case MINUTES:
                        case MONTH:
                        case NOT:
                        case NOW:
                        case RAND:
                        case REGEX:
                        case REPLACE:
                        case ROUND:
                        case SAMETERM:
                        case SAMPLE:
                        case SECONDS:
                        case SHA1:
                        case SHA224:
                        case SHA256:
                        case SHA384:
                        case SHA512:
                        case STR:
                        case STRAFTER:
                        case STRBEFORE:
                        case STRDT:
                        case STRENDS:
                        case STRLANG:
                        case STRLEN:
                        case STRSTARTS:
                        case STRUUID:
                        case SUBSTR:
                        case SUM:
                        case TIMEZONE:
                        case TZ:
                        case UCASE:
                        case URI:
                        case UUID:
                        case YEAR:
                            {
                            alt7=3;
                            }
                            break;

                        }

                        switch (alt7) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:47: v1+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_selectClause827);
                    	    v1=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v1.getTree());
                    	    if (list_v1==null) list_v1=new ArrayList();
                    	    list_v1.add(v1.getTree());


                    	    }
                    	    break;
                    	case 2 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:57: e+= expAsVar
                    	    {
                    	    pushFollow(FOLLOW_expAsVar_in_selectClause833);
                    	    e=expAsVar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expAsVar.add(e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;
                    	case 3 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:71: f+= fexp
                    	    {
                    	    pushFollow(FOLLOW_fexp_in_selectClause839);
                    	    f=fexp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fexp.add(f.getTree());
                    	    if (list_f==null) list_f=new ArrayList();
                    	    list_f.add(f.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt7 >= 1 ) break loop7;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(7, input);
                                throw eee;
                        }
                        cnt7++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:168:84: '*'
                    {
                    char_literal6=(Token)match(input,253,FOLLOW_253_in_selectClause846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_253.add(char_literal6);


                    }
                    break;

            }


            // AST REWRITE
            // elements: 253, t2, e, t1, v1, f
            // token labels: t1, t2
            // rule labels: retval
            // token list labels: 
            // rule list labels: e, f, v1
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleTokenStream stream_t2=new RewriteRuleTokenStream(adaptor,"token t2",t2);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"token v1",list_v1);
            root_0 = (XTree)adaptor.nil();
            // 170:3: -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:8: ( ^( TYPE ( $t1)? ( $t2)? ) )?
                if ( stream_t2.hasNext()||stream_t1.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:8: ^( TYPE ( $t1)? ( $t2)? )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TYPE, "TYPE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:16: ( $t1)?
                    if ( stream_t1.hasNext() ) {
                        adaptor.addChild(root_1, stream_t1.nextNode());

                    }
                    stream_t1.reset();

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:21: ( $t2)?
                    if ( stream_t2.hasNext() ) {
                        adaptor.addChild(root_1, stream_t2.nextNode());

                    }
                    stream_t2.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_t2.reset();
                stream_t1.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:27: ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PVARS, "PVARS")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:36: ( $v1)*
                while ( stream_v1.hasNext() ) {
                    adaptor.addChild(root_1, stream_v1.nextTree());

                }
                stream_v1.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:41: ( $e)*
                while ( stream_e.hasNext() ) {
                    adaptor.addChild(root_1, stream_e.nextTree());

                }
                stream_e.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:45: ( $f)*
                while ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextTree());

                }
                stream_f.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:170:48: ( '*' )?
                if ( stream_253.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_253.nextNode()
                    );

                }
                stream_253.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectClause"


    public static class expAsVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expAsVar"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:173:1: expAsVar : OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) ;
    public final IbmSparqlParser.expAsVar_return expAsVar() throws RecognitionException {
        IbmSparqlParser.expAsVar_return retval = new IbmSparqlParser.expAsVar_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE7=null;
        Token AS8=null;
        Token CLOSE_BRACE9=null;
        IbmSparqlParser.expression_return e =null;

        IbmSparqlParser.var_return v =null;


        XTree OPEN_BRACE7_tree=null;
        XTree AS8_tree=null;
        XTree CLOSE_BRACE9_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:174:2: ( OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:174:4: OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            OPEN_BRACE7=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expAsVar900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE7);


            pushFollow(FOLLOW_expression_in_expAsVar904);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            AS8=(Token)match(input,AS,FOLLOW_AS_in_expAsVar906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS8);


            pushFollow(FOLLOW_var_in_expAsVar910);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            CLOSE_BRACE9=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expAsVar912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE9);


            // AST REWRITE
            // elements: v, AS, e
            // token labels: 
            // rule labels: e, v, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 176:3: -> ^( AS $v $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:176:6: ^( AS $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_AS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expAsVar"


    public static class fexp_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fexp"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:1: fexp : (a= aggregate |b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) ;
    public final IbmSparqlParser.fexp_return fexp() throws RecognitionException {
        IbmSparqlParser.fexp_return retval = new IbmSparqlParser.fexp_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.aggregate_return a =null;

        IbmSparqlParser.builtInCall_return b =null;


        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        RewriteRuleSubtreeStream stream_aggregate=new RewriteRuleSubtreeStream(adaptor,"rule aggregate");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:6: ( (a= aggregate |b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:8: (a= aggregate |b= builtInCall )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:8: (a= aggregate |b= builtInCall )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==AVG||LA9_0==COUNT||LA9_0==GROUP_CONCAT||LA9_0==MAX||LA9_0==MIN||LA9_0==SAMPLE||LA9_0==SUM) ) {
                alt9=1;
            }
            else if ( (LA9_0==ABS||LA9_0==BNODE||LA9_0==BOUND||LA9_0==CEIL||LA9_0==COALESCE||LA9_0==CONCAT||LA9_0==CONTAINS||(LA9_0 >= DATATYPE && LA9_0 <= DAY)||LA9_0==ENCODE_FOR_URI||LA9_0==EXISTS||LA9_0==FLOOR||LA9_0==HOURS||LA9_0==IF||LA9_0==IRI||(LA9_0 >= ISBLANK && LA9_0 <= ISURI)||(LA9_0 >= LANG && LA9_0 <= LANGMATCHES)||LA9_0==LCASE||LA9_0==MD5||LA9_0==MINUTES||LA9_0==MONTH||LA9_0==NOT||LA9_0==NOW||LA9_0==RAND||(LA9_0 >= REGEX && LA9_0 <= REPLACE)||LA9_0==ROUND||LA9_0==SAMETERM||LA9_0==SECONDS||(LA9_0 >= SHA1 && LA9_0 <= SHA512)||(LA9_0 >= STR && LA9_0 <= STRENDS)||(LA9_0 >= STRLANG && LA9_0 <= STRUUID)||LA9_0==SUBSTR||LA9_0==TIMEZONE||LA9_0==TZ||LA9_0==UCASE||LA9_0==URI||LA9_0==UUID||LA9_0==YEAR) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:10: a= aggregate
                    {
                    pushFollow(FOLLOW_aggregate_in_fexp946);
                    a=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate.add(a.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:179:24: b= builtInCall
                    {
                    pushFollow(FOLLOW_builtInCall_in_fexp952);
                    b=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtInCall.add(b.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: a, b
            // token labels: 
            // rule labels: a, b, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 181:3: -> ^( EXP ( $a)? ( $b)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:181:7: ^( EXP ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(EXP, "EXP")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:181:15: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:181:19: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fexp"


    public static class constructQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:185:1: constructQuery : CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) ;
    public final IbmSparqlParser.constructQuery_return constructQuery() throws RecognitionException {
        IbmSparqlParser.constructQuery_return retval = new IbmSparqlParser.constructQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CONSTRUCT10=null;
        Token WHERE_TOKEN11=null;
        Token OPEN_CURLY_BRACE12=null;
        Token CLOSE_CURLY_BRACE13=null;
        List list_d1=null;
        List list_d2=null;
        IbmSparqlParser.constructTemplate_return c =null;

        IbmSparqlParser.whereClause_return w1 =null;

        IbmSparqlParser.solutionModifier_return s1 =null;

        IbmSparqlParser.triplesTemplate_return t =null;

        IbmSparqlParser.solutionModifier_return s2 =null;

        RuleReturnScope d1 = null;
        RuleReturnScope d2 = null;
        XTree CONSTRUCT10_tree=null;
        XTree WHERE_TOKEN11_tree=null;
        XTree OPEN_CURLY_BRACE12_tree=null;
        XTree CLOSE_CURLY_BRACE13_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleTokenStream stream_CONSTRUCT=new RewriteRuleTokenStream(adaptor,"token CONSTRUCT");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_constructTemplate=new RewriteRuleSubtreeStream(adaptor,"rule constructTemplate");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:186:2: ( CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:186:6: CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            {
            CONSTRUCT10=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONSTRUCT.add(CONSTRUCT10);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:187:6: ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==OPEN_CURLY_BRACE) ) {
                alt13=1;
            }
            else if ( (LA13_0==FROM||LA13_0==WHERE_TOKEN) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:188:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:188:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:188:9: c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier
                    {
                    pushFollow(FOLLOW_constructTemplate_in_constructQuery1014);
                    c=constructTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructTemplate.add(c.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:188:31: (d1+= datasetClause )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==FROM) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:188:31: d1+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1018);
                    	    d1=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d1.getTree());
                    	    if (list_d1==null) list_d1=new ArrayList();
                    	    list_d1.add(d1.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    pushFollow(FOLLOW_whereClause_in_constructQuery1023);
                    w1=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w1.getTree());

                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1027);
                    s1=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s1.getTree());

                    }


                    // AST REWRITE
                    // elements: d1, c, CONSTRUCT, w1, s1
                    // token labels: 
                    // rule labels: c, w1, s1, retval
                    // token list labels: 
                    // rule list labels: d1
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
                    RewriteRuleSubtreeStream stream_w1=new RewriteRuleSubtreeStream(adaptor,"rule w1",w1!=null?w1.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_d1=new RewriteRuleSubtreeStream(adaptor,"token d1",list_d1);
                    root_0 = (XTree)adaptor.nil();
                    // 189:5: -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:189:8: ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONSTRUCT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:189:22: ( $c)?
                        if ( stream_c.hasNext() ) {
                            adaptor.addChild(root_1, stream_c.nextTree());

                        }
                        stream_c.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:189:25: ( ^( DATASET ( $d1)* ) )?
                        if ( stream_d1.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:189:25: ^( DATASET ( $d1)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(DATASET, "DATASET")
                            , root_2);

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:189:36: ( $d1)*
                            while ( stream_d1.hasNext() ) {
                                adaptor.addChild(root_2, stream_d1.nextTree());

                            }
                            stream_d1.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d1.reset();

                        adaptor.addChild(root_1, stream_w1.nextTree());

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:9: (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:11: (d2+= datasetClause )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FROM) ) {
                            alt11=1;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:11: d2+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1072);
                    	    d2=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d2.getTree());
                    	    if (list_d2==null) list_d2=new ArrayList();
                    	    list_d2.add(d2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    WHERE_TOKEN11=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_constructQuery1075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN11);


                    OPEN_CURLY_BRACE12=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE12);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:58: (t= triplesTemplate )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==BLANK_NODE_LABEL||(LA12_0 >= DECIMAL && LA12_0 <= DECIMAL_POSITIVE)||(LA12_0 >= DOUBLE && LA12_0 <= DOUBLE_POSITIVE)||LA12_0==FALSE||(LA12_0 >= INTEGER && LA12_0 <= INTEGER_POSITIVE)||LA12_0==IRI_REF||LA12_0==OPEN_BRACE||LA12_0==OPEN_SQ_BRACKET||(LA12_0 >= PNAME_LN && LA12_0 <= PNAME_NS)||(LA12_0 >= STRING_LITERAL1 && LA12_0 <= STRING_LITERAL_LONG2)||LA12_0==TRUE||(LA12_0 >= VAR1 && LA12_0 <= VAR2)) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:190:58: t= triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_constructQuery1081);
                            t=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesTemplate.add(t.getTree());

                            }
                            break;

                    }


                    CLOSE_CURLY_BRACE13=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE13);


                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1088);
                    s2=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s2.getTree());

                    }


                    // AST REWRITE
                    // elements: d2, t, s2, CONSTRUCT
                    // token labels: 
                    // rule labels: t, retval, s2
                    // token list labels: 
                    // rule list labels: d2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_d2=new RewriteRuleSubtreeStream(adaptor,"token d2",list_d2);
                    root_0 = (XTree)adaptor.nil();
                    // 191:5: -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:8: ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONSTRUCT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:21: ( ^( DATASET ( $d2)* ) )?
                        if ( stream_d2.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:21: ^( DATASET ( $d2)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(DATASET, "DATASET")
                            , root_2);

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:32: ( $d2)*
                            while ( stream_d2.hasNext() ) {
                                adaptor.addChild(root_2, stream_d2.nextTree());

                            }
                            stream_d2.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d2.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:38: ( ^( WHERE $t) )?
                        if ( stream_t.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:191:39: ^( WHERE $t)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            (XTree)adaptor.create(WHERE, "WHERE")
                            , root_2);

                            adaptor.addChild(root_2, stream_t.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t.reset();

                        adaptor.addChild(root_1, stream_s2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructQuery"


    public static class describeQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "describeQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:195:1: describeQuery : DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) ;
    public final IbmSparqlParser.describeQuery_return describeQuery() throws RecognitionException {
        IbmSparqlParser.describeQuery_return retval = new IbmSparqlParser.describeQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token r=null;
        Token DESCRIBE14=null;
        List list_v=null;
        IbmSparqlParser.datasetClause_return d =null;

        IbmSparqlParser.whereClause_return w =null;

        IbmSparqlParser.solutionModifier_return s =null;

        RuleReturnScope v = null;
        XTree r_tree=null;
        XTree DESCRIBE14_tree=null;
        RewriteRuleTokenStream stream_253=new RewriteRuleTokenStream(adaptor,"token 253");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:2: ( DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:6: DESCRIBE ( (v+= varOrIRIref )+ |r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier
            {
            DESCRIBE14=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeQuery1150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE14);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:15: ( (v+= varOrIRIref )+ |r= '*' )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IRI_REF||(LA15_0 >= PNAME_LN && LA15_0 <= PNAME_NS)||(LA15_0 >= VAR1 && LA15_0 <= VAR2)) ) {
                alt15=1;
            }
            else if ( (LA15_0==253) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:17: (v+= varOrIRIref )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:18: (v+= varOrIRIref )+
                    int cnt14=0;
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==IRI_REF||(LA14_0 >= PNAME_LN && LA14_0 <= PNAME_NS)||(LA14_0 >= VAR1 && LA14_0 <= VAR2)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:18: v+= varOrIRIref
                    	    {
                    	    pushFollow(FOLLOW_varOrIRIref_in_describeQuery1156);
                    	    v=varOrIRIref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt14 >= 1 ) break loop14;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(14, input);
                                throw eee;
                        }
                        cnt14++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:35: r= '*'
                    {
                    r=(Token)match(input,253,FOLLOW_253_in_describeQuery1163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_253.add(r);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:44: (d= datasetClause )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==FROM) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:44: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_describeQuery1169);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:61: (w= whereClause )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==OPEN_CURLY_BRACE||LA17_0==WHERE_TOKEN) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:196:61: w= whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_describeQuery1174);
                    w=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_solutionModifier_in_describeQuery1179);
            s=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(s.getTree());

            // AST REWRITE
            // elements: s, DESCRIBE, w, r, d, v
            // token labels: r
            // rule labels: s, d, w, retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 198:3: -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:198:7: ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_DESCRIBE.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:198:21: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:198:26: ( $r)?
                if ( stream_r.hasNext() ) {
                    adaptor.addChild(root_1, stream_r.nextNode());

                }
                stream_r.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:198:31: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:198:36: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();

                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "describeQuery"


    public static class askQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "askQuery"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:201:1: askQuery : ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) ;
    public final IbmSparqlParser.askQuery_return askQuery() throws RecognitionException {
        IbmSparqlParser.askQuery_return retval = new IbmSparqlParser.askQuery_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ASK15=null;
        IbmSparqlParser.datasetClause_return d =null;

        IbmSparqlParser.whereClause_return w =null;


        XTree ASK15_tree=null;
        RewriteRuleTokenStream stream_ASK=new RewriteRuleTokenStream(adaptor,"token ASK");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:202:2: ( ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:202:6: ASK (d= datasetClause )* w= whereClause
            {
            ASK15=(Token)match(input,ASK,FOLLOW_ASK_in_askQuery1233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASK.add(ASK15);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:202:11: (d= datasetClause )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==FROM) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:202:11: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_askQuery1237);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            pushFollow(FOLLOW_whereClause_in_askQuery1242);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

            // AST REWRITE
            // elements: w, d, ASK
            // token labels: 
            // rule labels: d, w, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 204:3: -> ^( ASK ( $d)* $w)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:204:7: ^( ASK ( $d)* $w)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_ASK.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:204:15: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "askQuery"


    public static class datasetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datasetClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:207:1: datasetClause : FROM (d= defaultGraphClause |n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) ;
    public final IbmSparqlParser.datasetClause_return datasetClause() throws RecognitionException {
        IbmSparqlParser.datasetClause_return retval = new IbmSparqlParser.datasetClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token FROM16=null;
        IbmSparqlParser.defaultGraphClause_return d =null;

        IbmSparqlParser.namedGraphClause_return n =null;


        XTree FROM16_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_namedGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule namedGraphClause");
        RewriteRuleSubtreeStream stream_defaultGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule defaultGraphClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:208:2: ( FROM (d= defaultGraphClause |n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:208:6: FROM (d= defaultGraphClause |n= namedGraphClause )
            {
            FROM16=(Token)match(input,FROM,FOLLOW_FROM_in_datasetClause1279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM16);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:208:11: (d= defaultGraphClause |n= namedGraphClause )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IRI_REF||(LA19_0 >= PNAME_LN && LA19_0 <= PNAME_NS)) ) {
                alt19=1;
            }
            else if ( (LA19_0==NAMED) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:208:13: d= defaultGraphClause
                    {
                    pushFollow(FOLLOW_defaultGraphClause_in_datasetClause1285);
                    d=defaultGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultGraphClause.add(d.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:208:36: n= namedGraphClause
                    {
                    pushFollow(FOLLOW_namedGraphClause_in_datasetClause1291);
                    n=namedGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_namedGraphClause.add(n.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: FROM, d, n
            // token labels: 
            // rule labels: d, n, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 210:3: -> ^( FROM ( $d)? ( ^( NAMED $n) )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:210:7: ^( FROM ( $d)? ( ^( NAMED $n) )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_FROM.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:210:16: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:210:19: ( ^( NAMED $n) )?
                if ( stream_n.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:210:19: ^( NAMED $n)
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(NAMED, "NAMED")
                    , root_2);

                    adaptor.addChild(root_2, stream_n.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_n.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "datasetClause"


    public static class defaultGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultGraphClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:213:1: defaultGraphClause : sourceSelector ;
    public final IbmSparqlParser.defaultGraphClause_return defaultGraphClause() throws RecognitionException {
        IbmSparqlParser.defaultGraphClause_return retval = new IbmSparqlParser.defaultGraphClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.sourceSelector_return sourceSelector17 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:214:2: ( sourceSelector )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:214:6: sourceSelector
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_sourceSelector_in_defaultGraphClause1335);
            sourceSelector17=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sourceSelector17.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defaultGraphClause"


    public static class namedGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedGraphClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:217:1: namedGraphClause : NAMED s= sourceSelector -> $s;
    public final IbmSparqlParser.namedGraphClause_return namedGraphClause() throws RecognitionException {
        IbmSparqlParser.namedGraphClause_return retval = new IbmSparqlParser.namedGraphClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token NAMED18=null;
        IbmSparqlParser.sourceSelector_return s =null;


        XTree NAMED18_tree=null;
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_sourceSelector=new RewriteRuleSubtreeStream(adaptor,"rule sourceSelector");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:218:2: ( NAMED s= sourceSelector -> $s)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:218:6: NAMED s= sourceSelector
            {
            NAMED18=(Token)match(input,NAMED,FOLLOW_NAMED_in_namedGraphClause1352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMED.add(NAMED18);


            pushFollow(FOLLOW_sourceSelector_in_namedGraphClause1356);
            s=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sourceSelector.add(s.getTree());

            // AST REWRITE
            // elements: s
            // token labels: 
            // rule labels: s, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 218:30: -> $s
            {
                adaptor.addChild(root_0, stream_s.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namedGraphClause"


    public static class sourceSelector_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sourceSelector"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:221:1: sourceSelector : iRIref ;
    public final IbmSparqlParser.sourceSelector_return sourceSelector() throws RecognitionException {
        IbmSparqlParser.sourceSelector_return retval = new IbmSparqlParser.sourceSelector_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.iRIref_return iRIref19 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:222:2: ( iRIref )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:222:6: iRIref
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_iRIref_in_sourceSelector1379);
            iRIref19=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref19.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sourceSelector"


    public static class whereClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whereClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:225:1: whereClause : ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) ;
    public final IbmSparqlParser.whereClause_return whereClause() throws RecognitionException {
        IbmSparqlParser.whereClause_return retval = new IbmSparqlParser.whereClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token WHERE_TOKEN20=null;
        IbmSparqlParser.groupGraphPattern_return groupGraphPattern21 =null;


        XTree WHERE_TOKEN20_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:226:2: ( ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:226:6: ( WHERE_TOKEN )? groupGraphPattern
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:226:6: ( WHERE_TOKEN )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE_TOKEN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:226:6: WHERE_TOKEN
                    {
                    WHERE_TOKEN20=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_whereClause1396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN20);


                    }
                    break;

            }


            pushFollow(FOLLOW_groupGraphPattern_in_whereClause1399);
            groupGraphPattern21=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(groupGraphPattern21.getTree());

            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 228:3: -> ^( WHERE groupGraphPattern )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:228:7: ^( WHERE groupGraphPattern )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(WHERE, "WHERE")
                , root_1);

                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whereClause"


    public static class solutionModifier_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "solutionModifier"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:231:1: solutionModifier : (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) ;
    public final IbmSparqlParser.solutionModifier_return solutionModifier() throws RecognitionException {
        IbmSparqlParser.solutionModifier_return retval = new IbmSparqlParser.solutionModifier_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.groupClause_return g =null;

        IbmSparqlParser.havingClause_return h =null;

        IbmSparqlParser.orderClause_return o =null;

        IbmSparqlParser.limitOffsetClauses_return l =null;


        RewriteRuleSubtreeStream stream_limitOffsetClauses=new RewriteRuleSubtreeStream(adaptor,"rule limitOffsetClauses");
        RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:2: ( (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:6: (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )?
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:7: (g= groupClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:7: g= groupClause
                    {
                    pushFollow(FOLLOW_groupClause_in_solutionModifier1433);
                    g=groupClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupClause.add(g.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:22: (h= havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:22: h= havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_solutionModifier1438);
                    h=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:38: (o= orderClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ORDER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:38: o= orderClause
                    {
                    pushFollow(FOLLOW_orderClause_in_solutionModifier1443);
                    o=orderClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:53: (l= limitOffsetClauses )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LIMIT||LA24_0==OFFSET) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:232:53: l= limitOffsetClauses
                    {
                    pushFollow(FOLLOW_limitOffsetClauses_in_solutionModifier1448);
                    l=limitOffsetClauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitOffsetClauses.add(l.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: l, g, o, h
            // token labels: 
            // rule labels: g, h, l, retval, o
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 233:3: -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:233:6: ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(MODIFIERS, "MODIFIERS")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:233:19: ( $g)?
                if ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:233:23: ( $h)?
                if ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:233:27: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:233:31: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "solutionModifier"


    public static class groupClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:236:1: groupClause : GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) ;
    public final IbmSparqlParser.groupClause_return groupClause() throws RecognitionException {
        IbmSparqlParser.groupClause_return retval = new IbmSparqlParser.groupClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GROUP22=null;
        Token BY23=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree GROUP22_tree=null;
        XTree BY23_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupCondition=new RewriteRuleSubtreeStream(adaptor,"rule groupCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:237:2: ( GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:237:6: GROUP BY (g+= groupCondition )+
            {
            GROUP22=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP22);


            BY23=(Token)match(input,BY,FOLLOW_BY_in_groupClause1492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY23);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:237:16: (g+= groupCondition )+
            int cnt25=0;
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ABS||LA25_0==BNODE||LA25_0==BOUND||LA25_0==CEIL||LA25_0==COALESCE||LA25_0==CONCAT||LA25_0==CONTAINS||(LA25_0 >= DATATYPE && LA25_0 <= DAY)||LA25_0==ENCODE_FOR_URI||LA25_0==EXISTS||LA25_0==FLOOR||LA25_0==HOURS||LA25_0==IF||LA25_0==IRI||(LA25_0 >= IRI_REF && LA25_0 <= ISURI)||(LA25_0 >= LANG && LA25_0 <= LANGMATCHES)||LA25_0==LCASE||LA25_0==MD5||LA25_0==MINUTES||LA25_0==MONTH||LA25_0==NOT||LA25_0==NOW||LA25_0==OPEN_BRACE||(LA25_0 >= PNAME_LN && LA25_0 <= PNAME_NS)||LA25_0==RAND||(LA25_0 >= REGEX && LA25_0 <= REPLACE)||LA25_0==ROUND||LA25_0==SAMETERM||LA25_0==SECONDS||(LA25_0 >= SHA1 && LA25_0 <= SHA512)||(LA25_0 >= STR && LA25_0 <= STRENDS)||(LA25_0 >= STRLANG && LA25_0 <= STRUUID)||LA25_0==SUBSTR||LA25_0==TIMEZONE||LA25_0==TZ||LA25_0==UCASE||LA25_0==URI||LA25_0==UUID||(LA25_0 >= VAR1 && LA25_0 <= VAR2)||LA25_0==YEAR) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:237:16: g+= groupCondition
            	    {
            	    pushFollow(FOLLOW_groupCondition_in_groupClause1496);
            	    g=groupCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupCondition.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt25 >= 1 ) break loop25;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(25, input);
                        throw eee;
                }
                cnt25++;
            } while (true);


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 239:3: -> ^( GROUP_BY ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:239:7: ^( GROUP_BY ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(GROUP_BY, "GROUP_BY")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupClause"


    public static class groupCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:242:1: groupCondition : ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var );
    public final IbmSparqlParser.groupCondition_return groupCondition() throws RecognitionException {
        IbmSparqlParser.groupCondition_return retval = new IbmSparqlParser.groupCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE26=null;
        Token AS27=null;
        Token CLOSE_BRACE28=null;
        IbmSparqlParser.expression_return e =null;

        IbmSparqlParser.var_return v =null;

        IbmSparqlParser.builtInCall_return builtInCall24 =null;

        IbmSparqlParser.functionCall_return functionCall25 =null;

        IbmSparqlParser.var_return var29 =null;


        XTree OPEN_BRACE26_tree=null;
        XTree AS27_tree=null;
        XTree CLOSE_BRACE28_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:243:2: ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var )
            int alt27=4;
            switch ( input.LA(1) ) {
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt27=1;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt27=2;
                }
                break;
            case OPEN_BRACE:
                {
                alt27=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt27=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:243:6: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_groupCondition1531);
                    builtInCall24=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall24.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:244:6: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_functionCall_in_groupCondition1539);
                    functionCall25=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall25.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:245:6: OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE
                    {
                    OPEN_BRACE26=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_groupCondition1547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE26);


                    pushFollow(FOLLOW_expression_in_groupCondition1551);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:245:30: ( AS v= var )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==AS) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:245:32: AS v= var
                            {
                            AS27=(Token)match(input,AS,FOLLOW_AS_in_groupCondition1555); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS27);


                            pushFollow(FOLLOW_var_in_groupCondition1559);
                            v=var();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_var.add(v.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE28=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_groupCondition1564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE28);


                    // AST REWRITE
                    // elements: v, e
                    // token labels: 
                    // rule labels: e, v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 245:58: -> ^( CONDITION $e ( $v)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:245:62: ^( CONDITION $e ( $v)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(CONDITION, "CONDITION")
                        , root_1);

                        adaptor.addChild(root_1, stream_e.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:245:81: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:246:6: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_groupCondition1591);
                    var29=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var29.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupCondition"


    public static class havingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:249:1: havingClause : HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) ;
    public final IbmSparqlParser.havingClause_return havingClause() throws RecognitionException {
        IbmSparqlParser.havingClause_return retval = new IbmSparqlParser.havingClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token HAVING30=null;
        List list_h=null;
        RuleReturnScope h = null;
        XTree HAVING30_tree=null;
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:250:2: ( HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:250:6: HAVING (h+= havingCondition )+
            {
            HAVING30=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause1608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HAVING.add(HAVING30);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:250:14: (h+= havingCondition )+
            int cnt28=0;
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==ABS||LA28_0==BNODE||LA28_0==BOUND||LA28_0==CEIL||LA28_0==COALESCE||LA28_0==CONCAT||LA28_0==CONTAINS||(LA28_0 >= DATATYPE && LA28_0 <= DAY)||LA28_0==ENCODE_FOR_URI||LA28_0==EXISTS||LA28_0==FLOOR||LA28_0==HOURS||LA28_0==IF||LA28_0==IRI||(LA28_0 >= IRI_REF && LA28_0 <= ISURI)||(LA28_0 >= LANG && LA28_0 <= LANGMATCHES)||LA28_0==LCASE||LA28_0==MD5||LA28_0==MINUTES||LA28_0==MONTH||LA28_0==NOT||LA28_0==NOW||LA28_0==OPEN_BRACE||(LA28_0 >= PNAME_LN && LA28_0 <= PNAME_NS)||LA28_0==RAND||(LA28_0 >= REGEX && LA28_0 <= REPLACE)||LA28_0==ROUND||LA28_0==SAMETERM||LA28_0==SECONDS||(LA28_0 >= SHA1 && LA28_0 <= SHA512)||(LA28_0 >= STR && LA28_0 <= STRENDS)||(LA28_0 >= STRLANG && LA28_0 <= STRUUID)||LA28_0==SUBSTR||LA28_0==TIMEZONE||LA28_0==TZ||LA28_0==UCASE||LA28_0==URI||LA28_0==UUID||LA28_0==YEAR) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:250:14: h+= havingCondition
            	    {
            	    pushFollow(FOLLOW_havingCondition_in_havingClause1612);
            	    h=havingCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_havingCondition.add(h.getTree());
            	    if (list_h==null) list_h=new ArrayList();
            	    list_h.add(h.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);


            // AST REWRITE
            // elements: h, HAVING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: h
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"token h",list_h);
            root_0 = (XTree)adaptor.nil();
            // 252:3: -> ^( HAVING ( $h)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:252:7: ^( HAVING ( $h)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_HAVING.nextNode()
                , root_1);

                if ( !(stream_h.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingClause"


    public static class havingCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:255:1: havingCondition : constraint ;
    public final IbmSparqlParser.havingCondition_return havingCondition() throws RecognitionException {
        IbmSparqlParser.havingCondition_return retval = new IbmSparqlParser.havingCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.constraint_return constraint31 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:256:2: ( constraint )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:256:6: constraint
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_constraint_in_havingCondition1649);
            constraint31=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint31.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingCondition"


    public static class orderClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:259:1: orderClause : ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) ;
    public final IbmSparqlParser.orderClause_return orderClause() throws RecognitionException {
        IbmSparqlParser.orderClause_return retval = new IbmSparqlParser.orderClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ORDER32=null;
        Token BY33=null;
        List list_o=null;
        RuleReturnScope o = null;
        XTree ORDER32_tree=null;
        XTree BY33_tree=null;
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_orderCondition=new RewriteRuleSubtreeStream(adaptor,"rule orderCondition");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:260:2: ( ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:260:6: ORDER BY (o+= orderCondition )+
            {
            ORDER32=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause1666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDER.add(ORDER32);


            BY33=(Token)match(input,BY,FOLLOW_BY_in_orderClause1668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY33);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:260:16: (o+= orderCondition )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ABS||LA29_0==ASC||LA29_0==BNODE||LA29_0==BOUND||LA29_0==CEIL||LA29_0==COALESCE||LA29_0==CONCAT||LA29_0==CONTAINS||(LA29_0 >= DATATYPE && LA29_0 <= DAY)||LA29_0==DESC||LA29_0==ENCODE_FOR_URI||LA29_0==EXISTS||LA29_0==FLOOR||LA29_0==HOURS||LA29_0==IF||LA29_0==IRI||(LA29_0 >= IRI_REF && LA29_0 <= ISURI)||(LA29_0 >= LANG && LA29_0 <= LANGMATCHES)||LA29_0==LCASE||LA29_0==MD5||LA29_0==MINUTES||LA29_0==MONTH||LA29_0==NOT||LA29_0==NOW||LA29_0==OPEN_BRACE||(LA29_0 >= PNAME_LN && LA29_0 <= PNAME_NS)||LA29_0==RAND||(LA29_0 >= REGEX && LA29_0 <= REPLACE)||LA29_0==ROUND||LA29_0==SAMETERM||LA29_0==SECONDS||(LA29_0 >= SHA1 && LA29_0 <= SHA512)||(LA29_0 >= STR && LA29_0 <= STRENDS)||(LA29_0 >= STRLANG && LA29_0 <= STRUUID)||LA29_0==SUBSTR||LA29_0==TIMEZONE||LA29_0==TZ||LA29_0==UCASE||LA29_0==URI||LA29_0==UUID||(LA29_0 >= VAR1 && LA29_0 <= VAR2)||LA29_0==YEAR) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:260:16: o+= orderCondition
            	    {
            	    pushFollow(FOLLOW_orderCondition_in_orderClause1672);
            	    o=orderCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderCondition.add(o.getTree());
            	    if (list_o==null) list_o=new ArrayList();
            	    list_o.add(o.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);


            // AST REWRITE
            // elements: o
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: o
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"token o",list_o);
            root_0 = (XTree)adaptor.nil();
            // 262:3: -> ^( ORDER_BY ( $o)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:262:7: ^( ORDER_BY ( $o)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ORDER_BY, "ORDER_BY")
                , root_1);

                if ( !(stream_o.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderClause"


    public static class orderCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderCondition"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:265:1: orderCondition : ( ( ( ASC ^| DESC ^) brackettedExpression ) | constraint | var );
    public final IbmSparqlParser.orderCondition_return orderCondition() throws RecognitionException {
        IbmSparqlParser.orderCondition_return retval = new IbmSparqlParser.orderCondition_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ASC34=null;
        Token DESC35=null;
        IbmSparqlParser.brackettedExpression_return brackettedExpression36 =null;

        IbmSparqlParser.constraint_return constraint37 =null;

        IbmSparqlParser.var_return var38 =null;


        XTree ASC34_tree=null;
        XTree DESC35_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:2: ( ( ( ASC ^| DESC ^) brackettedExpression ) | constraint | var )
            int alt31=3;
            switch ( input.LA(1) ) {
            case ASC:
            case DESC:
                {
                alt31=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case IRI_REF:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case OPEN_BRACE:
            case PNAME_LN:
            case PNAME_NS:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt31=2;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }

            switch (alt31) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:4: ( ( ASC ^| DESC ^) brackettedExpression )
                    {
                    root_0 = (XTree)adaptor.nil();


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:4: ( ( ASC ^| DESC ^) brackettedExpression )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:6: ( ASC ^| DESC ^) brackettedExpression
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:6: ( ASC ^| DESC ^)
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==ASC) ) {
                        alt30=1;
                    }
                    else if ( (LA30_0==DESC) ) {
                        alt30=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 30, 0, input);

                        throw nvae;

                    }
                    switch (alt30) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:8: ASC ^
                            {
                            ASC34=(Token)match(input,ASC,FOLLOW_ASC_in_orderCondition1708); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC34_tree = 
                            (XTree)adaptor.create(ASC34)
                            ;
                            root_0 = (XTree)adaptor.becomeRoot(ASC34_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:266:15: DESC ^
                            {
                            DESC35=(Token)match(input,DESC,FOLLOW_DESC_in_orderCondition1713); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC35_tree = 
                            (XTree)adaptor.create(DESC35)
                            ;
                            root_0 = (XTree)adaptor.becomeRoot(DESC35_tree, root_0);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition1718);
                    brackettedExpression36=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression36.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:267:4: constraint
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_constraint_in_orderCondition1725);
                    constraint37=constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint37.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:268:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_orderCondition1734);
                    var38=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var38.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderCondition"


    public static class limitOffsetClauses_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitOffsetClauses"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:271:1: limitOffsetClauses : ( limitClause ( offsetClause )? | offsetClause ( limitClause )? );
    public final IbmSparqlParser.limitOffsetClauses_return limitOffsetClauses() throws RecognitionException {
        IbmSparqlParser.limitOffsetClauses_return retval = new IbmSparqlParser.limitOffsetClauses_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.limitClause_return limitClause39 =null;

        IbmSparqlParser.offsetClause_return offsetClause40 =null;

        IbmSparqlParser.offsetClause_return offsetClause41 =null;

        IbmSparqlParser.limitClause_return limitClause42 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:2: ( limitClause ( offsetClause )? | offsetClause ( limitClause )? )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LIMIT) ) {
                alt34=1;
            }
            else if ( (LA34_0==OFFSET) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:6: limitClause ( offsetClause )?
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1751);
                    limitClause39=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause39.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:18: ( offsetClause )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==OFFSET) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:18: offsetClause
                            {
                            pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1753);
                            offsetClause40=offsetClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause40.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:34: offsetClause ( limitClause )?
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1758);
                    offsetClause41=offsetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause41.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:47: ( limitClause )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LIMIT) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:272:47: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1760);
                            limitClause42=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause42.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitOffsetClauses"


    public static class limitClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:275:1: limitClause : LIMIT i= INTEGER -> ^( LIMIT $i) ;
    public final IbmSparqlParser.limitClause_return limitClause() throws RecognitionException {
        IbmSparqlParser.limitClause_return retval = new IbmSparqlParser.limitClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        Token LIMIT43=null;

        XTree i_tree=null;
        XTree LIMIT43_tree=null;
        RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:276:2: ( LIMIT i= INTEGER -> ^( LIMIT $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:276:6: LIMIT i= INTEGER
            {
            LIMIT43=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT43);


            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limitClause1782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);


            // AST REWRITE
            // elements: i, LIMIT
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 276:24: -> ^( LIMIT $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:276:28: ^( LIMIT $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LIMIT.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitClause"


    public static class offsetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "offsetClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:279:1: offsetClause : OFFSET i= INTEGER -> ^( OFFSET $i) ;
    public final IbmSparqlParser.offsetClause_return offsetClause() throws RecognitionException {
        IbmSparqlParser.offsetClause_return retval = new IbmSparqlParser.offsetClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        Token OFFSET44=null;

        XTree i_tree=null;
        XTree OFFSET44_tree=null;
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:280:2: ( OFFSET i= INTEGER -> ^( OFFSET $i) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:280:6: OFFSET i= INTEGER
            {
            OFFSET44=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause1814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET44);


            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_offsetClause1818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);


            // AST REWRITE
            // elements: OFFSET, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 280:24: -> ^( OFFSET $i)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:280:28: ^( OFFSET $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_OFFSET.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "offsetClause"


    public static class bindingsClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bindingsClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:283:1: bindingsClause : ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData );
    public final IbmSparqlParser.bindingsClause_return bindingsClause() throws RecognitionException {
        IbmSparqlParser.bindingsClause_return retval = new IbmSparqlParser.bindingsClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BINDINGS45=null;
        Token OPEN_CURLY_BRACE46=null;
        Token OPEN_BRACE47=null;
        Token CLOSE_BRACE48=null;
        Token CLOSE_CURLY_BRACE50=null;
        List list_v=null;
        List list_bv=null;
        IbmSparqlParser.nil_return nil49 =null;

        IbmSparqlParser.inlineData_return inlineData51 =null;

        RuleReturnScope v = null;
        RuleReturnScope bv = null;
        XTree BINDINGS45_tree=null;
        XTree OPEN_CURLY_BRACE46_tree=null;
        XTree OPEN_BRACE47_tree=null;
        XTree CLOSE_BRACE48_tree=null;
        XTree CLOSE_CURLY_BRACE50_tree=null;
        RewriteRuleTokenStream stream_BINDINGS=new RewriteRuleTokenStream(adaptor,"token BINDINGS");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_bindingValue=new RewriteRuleSubtreeStream(adaptor,"rule bindingValue");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:2: ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==BINDINGS) ) {
                alt38=1;
            }
            else if ( (LA38_0==VALUES) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:6: BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE
                    {
                    BINDINGS45=(Token)match(input,BINDINGS,FOLLOW_BINDINGS_in_bindingsClause1849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINDINGS.add(BINDINGS45);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:16: (v+= var )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( ((LA35_0 >= VAR1 && LA35_0 <= VAR2)) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:16: v+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_bindingsClause1853);
                    	    v=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);


                    OPEN_CURLY_BRACE46=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE46);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:40: ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )*
                    loop37:
                    do {
                        int alt37=3;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==OPEN_BRACE) ) {
                            int LA37_2 = input.LA(2);

                            if ( (LA37_2==CLOSE_BRACE) ) {
                                alt37=2;
                            }
                            else if ( ((LA37_2 >= DECIMAL && LA37_2 <= DECIMAL_POSITIVE)||(LA37_2 >= DOUBLE && LA37_2 <= DOUBLE_POSITIVE)||LA37_2==FALSE||(LA37_2 >= INTEGER && LA37_2 <= INTEGER_POSITIVE)||LA37_2==IRI_REF||(LA37_2 >= PNAME_LN && LA37_2 <= PNAME_NS)||(LA37_2 >= STRING_LITERAL1 && LA37_2 <= STRING_LITERAL_LONG2)||LA37_2==TRUE||LA37_2==UNDEF) ) {
                                alt37=1;
                            }


                        }


                        switch (alt37) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:42: OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE
                    	    {
                    	    OPEN_BRACE47=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bindingsClause1860); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE47);


                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:55: (bv+= bindingValue )+
                    	    int cnt36=0;
                    	    loop36:
                    	    do {
                    	        int alt36=2;
                    	        int LA36_0 = input.LA(1);

                    	        if ( ((LA36_0 >= DECIMAL && LA36_0 <= DECIMAL_POSITIVE)||(LA36_0 >= DOUBLE && LA36_0 <= DOUBLE_POSITIVE)||LA36_0==FALSE||(LA36_0 >= INTEGER && LA36_0 <= INTEGER_POSITIVE)||LA36_0==IRI_REF||(LA36_0 >= PNAME_LN && LA36_0 <= PNAME_NS)||(LA36_0 >= STRING_LITERAL1 && LA36_0 <= STRING_LITERAL_LONG2)||LA36_0==TRUE||LA36_0==UNDEF) ) {
                    	            alt36=1;
                    	        }


                    	        switch (alt36) {
                    	    	case 1 :
                    	    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:55: bv+= bindingValue
                    	    	    {
                    	    	    pushFollow(FOLLOW_bindingValue_in_bindingsClause1864);
                    	    	    bv=bindingValue();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) stream_bindingValue.add(bv.getTree());
                    	    	    if (list_bv==null) list_bv=new ArrayList();
                    	    	    list_bv.add(bv.getTree());


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt36 >= 1 ) break loop36;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(36, input);
                    	                throw eee;
                    	        }
                    	        cnt36++;
                    	    } while (true);


                    	    CLOSE_BRACE48=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bindingsClause1867); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE48);


                    	    }
                    	    break;
                    	case 2 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:284:85: nil
                    	    {
                    	    pushFollow(FOLLOW_nil_in_bindingsClause1871);
                    	    nil49=nil();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nil.add(nil49.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);


                    CLOSE_CURLY_BRACE50=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE50);


                    // AST REWRITE
                    // elements: nil, BINDINGS, v, bv
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: bv, v
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_bv=new RewriteRuleSubtreeStream(adaptor,"token bv",list_bv);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
                    root_0 = (XTree)adaptor.nil();
                    // 286:3: -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:286:7: ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BINDINGS.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:286:21: ( $v)*
                        while ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:286:25: ^( BIND_VALUES ( $bv)* ( nil )? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIND_VALUES, "BIND_VALUES")
                        , root_2);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:286:40: ( $bv)*
                        while ( stream_bv.hasNext() ) {
                            adaptor.addChild(root_2, stream_bv.nextTree());

                        }
                        stream_bv.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:286:44: ( nil )?
                        if ( stream_nil.hasNext() ) {
                            adaptor.addChild(root_2, stream_nil.nextTree());

                        }
                        stream_nil.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:287:9: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineData_in_bindingsClause1916);
                    inlineData51=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bindingsClause"


    public static class bindingValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bindingValue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:290:1: bindingValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) ;
    public final IbmSparqlParser.bindingValue_return bindingValue() throws RecognitionException {
        IbmSparqlParser.bindingValue_return retval = new IbmSparqlParser.bindingValue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNDEF56=null;
        IbmSparqlParser.iRIref_return iRIref52 =null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral53 =null;

        IbmSparqlParser.numericLiteral_return numericLiteral54 =null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral55 =null;


        XTree UNDEF56_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:2: ( ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt39=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt39=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt39=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt39=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt39=4;
                }
                break;
            case UNDEF:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:8: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_bindingValue1935);
                    iRIref52=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref52.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:17: rDFLiteral
                    {
                    pushFollow(FOLLOW_rDFLiteral_in_bindingValue1939);
                    rDFLiteral53=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral53.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:30: numericLiteral
                    {
                    pushFollow(FOLLOW_numericLiteral_in_bindingValue1943);
                    numericLiteral54=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral54.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:47: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_bindingValue1947);
                    booleanLiteral55=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral55.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:291:64: UNDEF
                    {
                    UNDEF56=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_bindingValue1951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF56_tree = 
                    (XTree)adaptor.create(UNDEF56)
                    ;
                    adaptor.addChild(root_0, UNDEF56_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bindingValue"


    public static class update_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:294:1: update : prologue ( update1 ( SEMICOLON update )? )? ;
    public final IbmSparqlParser.update_return update() throws RecognitionException {
        IbmSparqlParser.update_return retval = new IbmSparqlParser.update_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON59=null;
        IbmSparqlParser.prologue_return prologue57 =null;

        IbmSparqlParser.update1_return update158 =null;

        IbmSparqlParser.update_return update60 =null;


        XTree SEMICOLON59_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:2: ( prologue ( update1 ( SEMICOLON update )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:6: prologue ( update1 ( SEMICOLON update )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_prologue_in_update1970);
            prologue57=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologue57.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:15: ( update1 ( SEMICOLON update )? )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ADD||LA41_0==CLEAR||LA41_0==COPY||LA41_0==CREATE||LA41_0==DELETE||LA41_0==DROP||LA41_0==INSERT||LA41_0==LOAD||LA41_0==MOVE||LA41_0==WITH) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:17: update1 ( SEMICOLON update )?
                    {
                    pushFollow(FOLLOW_update1_in_update1974);
                    update158=update1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update158.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:25: ( SEMICOLON update )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==SEMICOLON) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:295:27: SEMICOLON update
                            {
                            SEMICOLON59=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_update1978); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON59_tree = 
                            (XTree)adaptor.create(SEMICOLON59)
                            ;
                            adaptor.addChild(root_0, SEMICOLON59_tree);
                            }

                            pushFollow(FOLLOW_update_in_update1980);
                            update60=update();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update60.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update"


    public static class update1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update1"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:298:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );
    public final IbmSparqlParser.update1_return update1() throws RecognitionException {
        IbmSparqlParser.update1_return retval = new IbmSparqlParser.update1_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.load_return load61 =null;

        IbmSparqlParser.clear_return clear62 =null;

        IbmSparqlParser.drop_return drop63 =null;

        IbmSparqlParser.add_return add64 =null;

        IbmSparqlParser.move_return move65 =null;

        IbmSparqlParser.copy_return copy66 =null;

        IbmSparqlParser.create_return create67 =null;

        IbmSparqlParser.insertData_return insertData68 =null;

        IbmSparqlParser.deleteData_return deleteData69 =null;

        IbmSparqlParser.deleteWhere_return deleteWhere70 =null;

        IbmSparqlParser.modify_return modify71 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:2: ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify )
            int alt42=11;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt42=1;
                }
                break;
            case CLEAR:
                {
                alt42=2;
                }
                break;
            case DROP:
                {
                alt42=3;
                }
                break;
            case ADD:
                {
                alt42=4;
                }
                break;
            case MOVE:
                {
                alt42=5;
                }
                break;
            case COPY:
                {
                alt42=6;
                }
                break;
            case CREATE:
                {
                alt42=7;
                }
                break;
            case INSERT:
                {
                int LA42_8 = input.LA(2);

                if ( (LA42_8==DATA) ) {
                    alt42=8;
                }
                else if ( (LA42_8==OPEN_CURLY_BRACE) ) {
                    alt42=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 8, input);

                    throw nvae;

                }
                }
                break;
            case DELETE:
                {
                switch ( input.LA(2) ) {
                case DATA:
                    {
                    alt42=9;
                    }
                    break;
                case WHERE_TOKEN:
                    {
                    alt42=10;
                    }
                    break;
                case OPEN_CURLY_BRACE:
                    {
                    alt42=11;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 9, input);

                    throw nvae;

                }

                }
                break;
            case WITH:
                {
                alt42=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }

            switch (alt42) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:6: load
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_load_in_update12003);
                    load61=load();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load61.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:13: clear
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_clear_in_update12007);
                    clear62=clear();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clear62.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:21: drop
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_drop_in_update12011);
                    drop63=drop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop63.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:28: add
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_add_in_update12015);
                    add64=add();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add64.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:34: move
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_move_in_update12019);
                    move65=move();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, move65.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:41: copy
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_copy_in_update12023);
                    copy66=copy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, copy66.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:48: create
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_create_in_update12027);
                    create67=create();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create67.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:57: insertData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_insertData_in_update12031);
                    insertData68=insertData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertData68.getTree());

                    }
                    break;
                case 9 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:70: deleteData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_deleteData_in_update12035);
                    deleteData69=deleteData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteData69.getTree());

                    }
                    break;
                case 10 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:83: deleteWhere
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_deleteWhere_in_update12039);
                    deleteWhere70=deleteWhere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteWhere70.getTree());

                    }
                    break;
                case 11 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:299:97: modify
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_modify_in_update12043);
                    modify71=modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modify71.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update1"


    public static class load_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:302:1: load : LOAD ( SILENT )? iRIref ( INTO graphRef )? ;
    public final IbmSparqlParser.load_return load() throws RecognitionException {
        IbmSparqlParser.load_return retval = new IbmSparqlParser.load_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOAD72=null;
        Token SILENT73=null;
        Token INTO75=null;
        IbmSparqlParser.iRIref_return iRIref74 =null;

        IbmSparqlParser.graphRef_return graphRef76 =null;


        XTree LOAD72_tree=null;
        XTree SILENT73_tree=null;
        XTree INTO75_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:2: ( LOAD ( SILENT )? iRIref ( INTO graphRef )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:6: LOAD ( SILENT )? iRIref ( INTO graphRef )?
            {
            root_0 = (XTree)adaptor.nil();


            LOAD72=(Token)match(input,LOAD,FOLLOW_LOAD_in_load2060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD72_tree = 
            (XTree)adaptor.create(LOAD72)
            ;
            adaptor.addChild(root_0, LOAD72_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:11: ( SILENT )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==SILENT) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:11: SILENT
                    {
                    SILENT73=(Token)match(input,SILENT,FOLLOW_SILENT_in_load2062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT73_tree = 
                    (XTree)adaptor.create(SILENT73)
                    ;
                    adaptor.addChild(root_0, SILENT73_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_iRIref_in_load2065);
            iRIref74=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref74.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:26: ( INTO graphRef )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==INTO) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:303:28: INTO graphRef
                    {
                    INTO75=(Token)match(input,INTO,FOLLOW_INTO_in_load2069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO75_tree = 
                    (XTree)adaptor.create(INTO75)
                    ;
                    adaptor.addChild(root_0, INTO75_tree);
                    }

                    pushFollow(FOLLOW_graphRef_in_load2071);
                    graphRef76=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef76.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load"


    public static class clear_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clear"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:306:1: clear : CLEAR ( SILENT )? graphRefAll ;
    public final IbmSparqlParser.clear_return clear() throws RecognitionException {
        IbmSparqlParser.clear_return retval = new IbmSparqlParser.clear_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CLEAR77=null;
        Token SILENT78=null;
        IbmSparqlParser.graphRefAll_return graphRefAll79 =null;


        XTree CLEAR77_tree=null;
        XTree SILENT78_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:307:2: ( CLEAR ( SILENT )? graphRefAll )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:307:6: CLEAR ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();


            CLEAR77=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_clear2091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLEAR77_tree = 
            (XTree)adaptor.create(CLEAR77)
            ;
            adaptor.addChild(root_0, CLEAR77_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:307:12: ( SILENT )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==SILENT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:307:12: SILENT
                    {
                    SILENT78=(Token)match(input,SILENT,FOLLOW_SILENT_in_clear2093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT78_tree = 
                    (XTree)adaptor.create(SILENT78)
                    ;
                    adaptor.addChild(root_0, SILENT78_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRefAll_in_clear2096);
            graphRefAll79=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll79.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clear"


    public static class drop_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:310:1: drop : DROP ( SILENT )? graphRefAll ;
    public final IbmSparqlParser.drop_return drop() throws RecognitionException {
        IbmSparqlParser.drop_return retval = new IbmSparqlParser.drop_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DROP80=null;
        Token SILENT81=null;
        IbmSparqlParser.graphRefAll_return graphRefAll82 =null;


        XTree DROP80_tree=null;
        XTree SILENT81_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:311:2: ( DROP ( SILENT )? graphRefAll )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:311:6: DROP ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();


            DROP80=(Token)match(input,DROP,FOLLOW_DROP_in_drop2113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DROP80_tree = 
            (XTree)adaptor.create(DROP80)
            ;
            adaptor.addChild(root_0, DROP80_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:311:11: ( SILENT )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SILENT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:311:11: SILENT
                    {
                    SILENT81=(Token)match(input,SILENT,FOLLOW_SILENT_in_drop2115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT81_tree = 
                    (XTree)adaptor.create(SILENT81)
                    ;
                    adaptor.addChild(root_0, SILENT81_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRefAll_in_drop2118);
            graphRefAll82=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll82.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop"


    public static class create_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:314:1: create : CREATE ( SILENT )? graphRef ;
    public final IbmSparqlParser.create_return create() throws RecognitionException {
        IbmSparqlParser.create_return retval = new IbmSparqlParser.create_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token CREATE83=null;
        Token SILENT84=null;
        IbmSparqlParser.graphRef_return graphRef85 =null;


        XTree CREATE83_tree=null;
        XTree SILENT84_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:315:2: ( CREATE ( SILENT )? graphRef )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:315:6: CREATE ( SILENT )? graphRef
            {
            root_0 = (XTree)adaptor.nil();


            CREATE83=(Token)match(input,CREATE,FOLLOW_CREATE_in_create2135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE83_tree = 
            (XTree)adaptor.create(CREATE83)
            ;
            adaptor.addChild(root_0, CREATE83_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:315:13: ( SILENT )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SILENT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:315:13: SILENT
                    {
                    SILENT84=(Token)match(input,SILENT,FOLLOW_SILENT_in_create2137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT84_tree = 
                    (XTree)adaptor.create(SILENT84)
                    ;
                    adaptor.addChild(root_0, SILENT84_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphRef_in_create2140);
            graphRef85=graphRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef85.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create"


    public static class add_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:318:1: add : ADD ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.add_return add() throws RecognitionException {
        IbmSparqlParser.add_return retval = new IbmSparqlParser.add_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token ADD86=null;
        Token SILENT87=null;
        Token TO89=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault88 =null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault90 =null;


        XTree ADD86_tree=null;
        XTree SILENT87_tree=null;
        XTree TO89_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:319:2: ( ADD ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:319:6: ADD ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            ADD86=(Token)match(input,ADD,FOLLOW_ADD_in_add2157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADD86_tree = 
            (XTree)adaptor.create(ADD86)
            ;
            adaptor.addChild(root_0, ADD86_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:319:10: ( SILENT )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SILENT) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:319:10: SILENT
                    {
                    SILENT87=(Token)match(input,SILENT,FOLLOW_SILENT_in_add2159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT87_tree = 
                    (XTree)adaptor.create(SILENT87)
                    ;
                    adaptor.addChild(root_0, SILENT87_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_add2162);
            graphOrDefault88=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault88.getTree());

            TO89=(Token)match(input,TO,FOLLOW_TO_in_add2164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO89_tree = 
            (XTree)adaptor.create(TO89)
            ;
            adaptor.addChild(root_0, TO89_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_add2166);
            graphOrDefault90=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault90.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add"


    public static class move_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "move"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:322:1: move : MOVE ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.move_return move() throws RecognitionException {
        IbmSparqlParser.move_return retval = new IbmSparqlParser.move_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token MOVE91=null;
        Token SILENT92=null;
        Token TO94=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault93 =null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault95 =null;


        XTree MOVE91_tree=null;
        XTree SILENT92_tree=null;
        XTree TO94_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:323:2: ( MOVE ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:323:6: MOVE ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            MOVE91=(Token)match(input,MOVE,FOLLOW_MOVE_in_move2183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MOVE91_tree = 
            (XTree)adaptor.create(MOVE91)
            ;
            adaptor.addChild(root_0, MOVE91_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:323:11: ( SILENT )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SILENT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:323:11: SILENT
                    {
                    SILENT92=(Token)match(input,SILENT,FOLLOW_SILENT_in_move2185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT92_tree = 
                    (XTree)adaptor.create(SILENT92)
                    ;
                    adaptor.addChild(root_0, SILENT92_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_move2188);
            graphOrDefault93=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault93.getTree());

            TO94=(Token)match(input,TO,FOLLOW_TO_in_move2190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO94_tree = 
            (XTree)adaptor.create(TO94)
            ;
            adaptor.addChild(root_0, TO94_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_move2192);
            graphOrDefault95=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault95.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "move"


    public static class copy_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "copy"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:326:1: copy : COPY ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.copy_return copy() throws RecognitionException {
        IbmSparqlParser.copy_return retval = new IbmSparqlParser.copy_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COPY96=null;
        Token SILENT97=null;
        Token TO99=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault98 =null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault100 =null;


        XTree COPY96_tree=null;
        XTree SILENT97_tree=null;
        XTree TO99_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:327:2: ( COPY ( SILENT )? graphOrDefault TO graphOrDefault )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:327:6: COPY ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();


            COPY96=(Token)match(input,COPY,FOLLOW_COPY_in_copy2209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COPY96_tree = 
            (XTree)adaptor.create(COPY96)
            ;
            adaptor.addChild(root_0, COPY96_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:327:11: ( SILENT )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SILENT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:327:11: SILENT
                    {
                    SILENT97=(Token)match(input,SILENT,FOLLOW_SILENT_in_copy2211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT97_tree = 
                    (XTree)adaptor.create(SILENT97)
                    ;
                    adaptor.addChild(root_0, SILENT97_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_graphOrDefault_in_copy2214);
            graphOrDefault98=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault98.getTree());

            TO99=(Token)match(input,TO,FOLLOW_TO_in_copy2216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO99_tree = 
            (XTree)adaptor.create(TO99)
            ;
            adaptor.addChild(root_0, TO99_tree);
            }

            pushFollow(FOLLOW_graphOrDefault_in_copy2218);
            graphOrDefault100=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault100.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "copy"


    public static class insertData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:330:1: insertData : INSERT DATA quadData ;
    public final IbmSparqlParser.insertData_return insertData() throws RecognitionException {
        IbmSparqlParser.insertData_return retval = new IbmSparqlParser.insertData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INSERT101=null;
        Token DATA102=null;
        IbmSparqlParser.quadData_return quadData103 =null;


        XTree INSERT101_tree=null;
        XTree DATA102_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:331:2: ( INSERT DATA quadData )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:331:6: INSERT DATA quadData
            {
            root_0 = (XTree)adaptor.nil();


            INSERT101=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertData2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT101_tree = 
            (XTree)adaptor.create(INSERT101)
            ;
            adaptor.addChild(root_0, INSERT101_tree);
            }

            DATA102=(Token)match(input,DATA,FOLLOW_DATA_in_insertData2237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA102_tree = 
            (XTree)adaptor.create(DATA102)
            ;
            adaptor.addChild(root_0, DATA102_tree);
            }

            pushFollow(FOLLOW_quadData_in_insertData2239);
            quadData103=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData103.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertData"


    public static class deleteData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:334:1: deleteData : DELETE DATA quadData ;
    public final IbmSparqlParser.deleteData_return deleteData() throws RecognitionException {
        IbmSparqlParser.deleteData_return retval = new IbmSparqlParser.deleteData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE104=null;
        Token DATA105=null;
        IbmSparqlParser.quadData_return quadData106 =null;


        XTree DELETE104_tree=null;
        XTree DATA105_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:335:2: ( DELETE DATA quadData )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:335:6: DELETE DATA quadData
            {
            root_0 = (XTree)adaptor.nil();


            DELETE104=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteData2255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE104_tree = 
            (XTree)adaptor.create(DELETE104)
            ;
            adaptor.addChild(root_0, DELETE104_tree);
            }

            DATA105=(Token)match(input,DATA,FOLLOW_DATA_in_deleteData2257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA105_tree = 
            (XTree)adaptor.create(DATA105)
            ;
            adaptor.addChild(root_0, DATA105_tree);
            }

            pushFollow(FOLLOW_quadData_in_deleteData2259);
            quadData106=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData106.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteData"


    public static class deleteWhere_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteWhere"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:338:1: deleteWhere : DELETE WHERE_TOKEN quadPattern ;
    public final IbmSparqlParser.deleteWhere_return deleteWhere() throws RecognitionException {
        IbmSparqlParser.deleteWhere_return retval = new IbmSparqlParser.deleteWhere_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE107=null;
        Token WHERE_TOKEN108=null;
        IbmSparqlParser.quadPattern_return quadPattern109 =null;


        XTree DELETE107_tree=null;
        XTree WHERE_TOKEN108_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:339:2: ( DELETE WHERE_TOKEN quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:339:6: DELETE WHERE_TOKEN quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            DELETE107=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteWhere2276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE107_tree = 
            (XTree)adaptor.create(DELETE107)
            ;
            adaptor.addChild(root_0, DELETE107_tree);
            }

            WHERE_TOKEN108=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_deleteWhere2278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN108_tree = 
            (XTree)adaptor.create(WHERE_TOKEN108)
            ;
            adaptor.addChild(root_0, WHERE_TOKEN108_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_deleteWhere2280);
            quadPattern109=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern109.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteWhere"


    public static class modify_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modify"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:342:1: modify : ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern ;
    public final IbmSparqlParser.modify_return modify() throws RecognitionException {
        IbmSparqlParser.modify_return retval = new IbmSparqlParser.modify_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token WITH110=null;
        Token WHERE_TOKEN116=null;
        IbmSparqlParser.iRIref_return iRIref111 =null;

        IbmSparqlParser.deleteClause_return deleteClause112 =null;

        IbmSparqlParser.insertClause_return insertClause113 =null;

        IbmSparqlParser.insertClause_return insertClause114 =null;

        IbmSparqlParser.usingClause_return usingClause115 =null;

        IbmSparqlParser.groupGraphPattern_return groupGraphPattern117 =null;


        XTree WITH110_tree=null;
        XTree WHERE_TOKEN116_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:2: ( ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:6: ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:6: ( WITH iRIref )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==WITH) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:8: WITH iRIref
                    {
                    WITH110=(Token)match(input,WITH,FOLLOW_WITH_in_modify2299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH110_tree = 
                    (XTree)adaptor.create(WITH110)
                    ;
                    adaptor.addChild(root_0, WITH110_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_modify2301);
                    iRIref111=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref111.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:23: ( deleteClause ( insertClause )? | insertClause )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DELETE) ) {
                alt53=1;
            }
            else if ( (LA53_0==INSERT) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:25: deleteClause ( insertClause )?
                    {
                    pushFollow(FOLLOW_deleteClause_in_modify2308);
                    deleteClause112=deleteClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteClause112.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:38: ( insertClause )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==INSERT) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:38: insertClause
                            {
                            pushFollow(FOLLOW_insertClause_in_modify2310);
                            insertClause113=insertClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause113.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:54: insertClause
                    {
                    pushFollow(FOLLOW_insertClause_in_modify2315);
                    insertClause114=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause114.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:69: ( usingClause )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==USING) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:343:69: usingClause
            	    {
            	    pushFollow(FOLLOW_usingClause_in_modify2319);
            	    usingClause115=usingClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, usingClause115.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            WHERE_TOKEN116=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_modify2322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN116_tree = 
            (XTree)adaptor.create(WHERE_TOKEN116)
            ;
            adaptor.addChild(root_0, WHERE_TOKEN116_tree);
            }

            pushFollow(FOLLOW_groupGraphPattern_in_modify2324);
            groupGraphPattern117=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, groupGraphPattern117.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "modify"


    public static class deleteClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:346:1: deleteClause : DELETE quadPattern ;
    public final IbmSparqlParser.deleteClause_return deleteClause() throws RecognitionException {
        IbmSparqlParser.deleteClause_return retval = new IbmSparqlParser.deleteClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DELETE118=null;
        IbmSparqlParser.quadPattern_return quadPattern119 =null;


        XTree DELETE118_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:347:2: ( DELETE quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:347:6: DELETE quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            DELETE118=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteClause2340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE118_tree = 
            (XTree)adaptor.create(DELETE118)
            ;
            adaptor.addChild(root_0, DELETE118_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_deleteClause2342);
            quadPattern119=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern119.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteClause"


    public static class insertClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:350:1: insertClause : INSERT quadPattern ;
    public final IbmSparqlParser.insertClause_return insertClause() throws RecognitionException {
        IbmSparqlParser.insertClause_return retval = new IbmSparqlParser.insertClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INSERT120=null;
        IbmSparqlParser.quadPattern_return quadPattern121 =null;


        XTree INSERT120_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:351:2: ( INSERT quadPattern )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:351:6: INSERT quadPattern
            {
            root_0 = (XTree)adaptor.nil();


            INSERT120=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertClause2359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT120_tree = 
            (XTree)adaptor.create(INSERT120)
            ;
            adaptor.addChild(root_0, INSERT120_tree);
            }

            pushFollow(FOLLOW_quadPattern_in_insertClause2361);
            quadPattern121=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern121.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertClause"


    public static class usingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "usingClause"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:354:1: usingClause : USING ( iRIref | NAMED iRIref ) ;
    public final IbmSparqlParser.usingClause_return usingClause() throws RecognitionException {
        IbmSparqlParser.usingClause_return retval = new IbmSparqlParser.usingClause_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token USING122=null;
        Token NAMED124=null;
        IbmSparqlParser.iRIref_return iRIref123 =null;

        IbmSparqlParser.iRIref_return iRIref125 =null;


        XTree USING122_tree=null;
        XTree NAMED124_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:355:2: ( USING ( iRIref | NAMED iRIref ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:355:6: USING ( iRIref | NAMED iRIref )
            {
            root_0 = (XTree)adaptor.nil();


            USING122=(Token)match(input,USING,FOLLOW_USING_in_usingClause2378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING122_tree = 
            (XTree)adaptor.create(USING122)
            ;
            adaptor.addChild(root_0, USING122_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:355:12: ( iRIref | NAMED iRIref )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==IRI_REF||(LA55_0 >= PNAME_LN && LA55_0 <= PNAME_NS)) ) {
                alt55=1;
            }
            else if ( (LA55_0==NAMED) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:355:14: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_usingClause2382);
                    iRIref123=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref123.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:355:23: NAMED iRIref
                    {
                    NAMED124=(Token)match(input,NAMED,FOLLOW_NAMED_in_usingClause2386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED124_tree = 
                    (XTree)adaptor.create(NAMED124)
                    ;
                    adaptor.addChild(root_0, NAMED124_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_usingClause2388);
                    iRIref125=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref125.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "usingClause"


    public static class graphOrDefault_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphOrDefault"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:358:1: graphOrDefault : ( DEFAULT | ( GRAPH )? iRIref );
    public final IbmSparqlParser.graphOrDefault_return graphOrDefault() throws RecognitionException {
        IbmSparqlParser.graphOrDefault_return retval = new IbmSparqlParser.graphOrDefault_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DEFAULT126=null;
        Token GRAPH127=null;
        IbmSparqlParser.iRIref_return iRIref128 =null;


        XTree DEFAULT126_tree=null;
        XTree GRAPH127_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:359:2: ( DEFAULT | ( GRAPH )? iRIref )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==DEFAULT) ) {
                alt57=1;
            }
            else if ( (LA57_0==GRAPH||LA57_0==IRI_REF||(LA57_0 >= PNAME_LN && LA57_0 <= PNAME_NS)) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:359:6: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();


                    DEFAULT126=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphOrDefault2407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT126_tree = 
                    (XTree)adaptor.create(DEFAULT126)
                    ;
                    adaptor.addChild(root_0, DEFAULT126_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:359:16: ( GRAPH )? iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:359:16: ( GRAPH )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==GRAPH) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:359:16: GRAPH
                            {
                            GRAPH127=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphOrDefault2411); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GRAPH127_tree = 
                            (XTree)adaptor.create(GRAPH127)
                            ;
                            adaptor.addChild(root_0, GRAPH127_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_iRIref_in_graphOrDefault2414);
                    iRIref128=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphOrDefault"


    public static class graphRef_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphRef"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:362:1: graphRef : GRAPH iRIref ;
    public final IbmSparqlParser.graphRef_return graphRef() throws RecognitionException {
        IbmSparqlParser.graphRef_return retval = new IbmSparqlParser.graphRef_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH129=null;
        IbmSparqlParser.iRIref_return iRIref130 =null;


        XTree GRAPH129_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:363:2: ( GRAPH iRIref )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:363:6: GRAPH iRIref
            {
            root_0 = (XTree)adaptor.nil();


            GRAPH129=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphRef2431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH129_tree = 
            (XTree)adaptor.create(GRAPH129)
            ;
            adaptor.addChild(root_0, GRAPH129_tree);
            }

            pushFollow(FOLLOW_iRIref_in_graphRef2433);
            iRIref130=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref130.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphRef"


    public static class graphRefAll_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphRefAll"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:366:1: graphRefAll : ( graphRef | DEFAULT | NAMED | ALL );
    public final IbmSparqlParser.graphRefAll_return graphRefAll() throws RecognitionException {
        IbmSparqlParser.graphRefAll_return retval = new IbmSparqlParser.graphRefAll_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DEFAULT132=null;
        Token NAMED133=null;
        Token ALL134=null;
        IbmSparqlParser.graphRef_return graphRef131 =null;


        XTree DEFAULT132_tree=null;
        XTree NAMED133_tree=null;
        XTree ALL134_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:367:2: ( graphRef | DEFAULT | NAMED | ALL )
            int alt58=4;
            switch ( input.LA(1) ) {
            case GRAPH:
                {
                alt58=1;
                }
                break;
            case DEFAULT:
                {
                alt58=2;
                }
                break;
            case NAMED:
                {
                alt58=3;
                }
                break;
            case ALL:
                {
                alt58=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }

            switch (alt58) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:367:7: graphRef
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphRef_in_graphRefAll2447);
                    graphRef131=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef131.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:367:18: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();


                    DEFAULT132=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphRefAll2451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT132_tree = 
                    (XTree)adaptor.create(DEFAULT132)
                    ;
                    adaptor.addChild(root_0, DEFAULT132_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:367:28: NAMED
                    {
                    root_0 = (XTree)adaptor.nil();


                    NAMED133=(Token)match(input,NAMED,FOLLOW_NAMED_in_graphRefAll2455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED133_tree = 
                    (XTree)adaptor.create(NAMED133)
                    ;
                    adaptor.addChild(root_0, NAMED133_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:367:36: ALL
                    {
                    root_0 = (XTree)adaptor.nil();


                    ALL134=(Token)match(input,ALL,FOLLOW_ALL_in_graphRefAll2459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL134_tree = 
                    (XTree)adaptor.create(ALL134)
                    ;
                    adaptor.addChild(root_0, ALL134_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphRefAll"


    public static class quadPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:370:1: quadPattern : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadPattern_return quadPattern() throws RecognitionException {
        IbmSparqlParser.quadPattern_return retval = new IbmSparqlParser.quadPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE135=null;
        Token CLOSE_CURLY_BRACE137=null;
        IbmSparqlParser.quads_return quads136 =null;


        XTree OPEN_CURLY_BRACE135_tree=null;
        XTree CLOSE_CURLY_BRACE137_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:371:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:371:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE135=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE135_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE135)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE135_tree);
            }

            pushFollow(FOLLOW_quads_in_quadPattern2475);
            quads136=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads136.getTree());

            CLOSE_CURLY_BRACE137=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE137_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE137)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE137_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadPattern"


    public static class quadData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:374:1: quadData : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadData_return quadData() throws RecognitionException {
        IbmSparqlParser.quadData_return retval = new IbmSparqlParser.quadData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE138=null;
        Token CLOSE_CURLY_BRACE140=null;
        IbmSparqlParser.quads_return quads139 =null;


        XTree OPEN_CURLY_BRACE138_tree=null;
        XTree CLOSE_CURLY_BRACE140_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:375:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:375:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE138=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadData2491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE138_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE138)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE138_tree);
            }

            pushFollow(FOLLOW_quads_in_quadData2493);
            quads139=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads139.getTree());

            CLOSE_CURLY_BRACE140=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadData2495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE140_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE140)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE140_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadData"


    public static class quads_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quads"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:378:1: quads : ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* ;
    public final IbmSparqlParser.quads_return quads() throws RecognitionException {
        IbmSparqlParser.quads_return retval = new IbmSparqlParser.quads_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT143=null;
        IbmSparqlParser.triplesTemplate_return triplesTemplate141 =null;

        IbmSparqlParser.quadsNotTriples_return quadsNotTriples142 =null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate144 =null;


        XTree DOT143_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:2: ( ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:7: ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:7: ( triplesTemplate )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==BLANK_NODE_LABEL||(LA59_0 >= DECIMAL && LA59_0 <= DECIMAL_POSITIVE)||(LA59_0 >= DOUBLE && LA59_0 <= DOUBLE_POSITIVE)||LA59_0==FALSE||(LA59_0 >= INTEGER && LA59_0 <= INTEGER_POSITIVE)||LA59_0==IRI_REF||LA59_0==OPEN_BRACE||LA59_0==OPEN_SQ_BRACKET||(LA59_0 >= PNAME_LN && LA59_0 <= PNAME_NS)||(LA59_0 >= STRING_LITERAL1 && LA59_0 <= STRING_LITERAL_LONG2)||LA59_0==TRUE||(LA59_0 >= VAR1 && LA59_0 <= VAR2)) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:7: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quads2509);
                    triplesTemplate141=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate141.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:24: ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==GRAPH) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:26: quadsNotTriples ( DOT )? ( triplesTemplate )?
            	    {
            	    pushFollow(FOLLOW_quadsNotTriples_in_quads2514);
            	    quadsNotTriples142=quadsNotTriples();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quadsNotTriples142.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:42: ( DOT )?
            	    int alt60=2;
            	    int LA60_0 = input.LA(1);

            	    if ( (LA60_0==DOT) ) {
            	        alt60=1;
            	    }
            	    switch (alt60) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:42: DOT
            	            {
            	            DOT143=(Token)match(input,DOT,FOLLOW_DOT_in_quads2516); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOT143_tree = 
            	            (XTree)adaptor.create(DOT143)
            	            ;
            	            adaptor.addChild(root_0, DOT143_tree);
            	            }

            	            }
            	            break;

            	    }


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:47: ( triplesTemplate )?
            	    int alt61=2;
            	    int LA61_0 = input.LA(1);

            	    if ( (LA61_0==BLANK_NODE_LABEL||(LA61_0 >= DECIMAL && LA61_0 <= DECIMAL_POSITIVE)||(LA61_0 >= DOUBLE && LA61_0 <= DOUBLE_POSITIVE)||LA61_0==FALSE||(LA61_0 >= INTEGER && LA61_0 <= INTEGER_POSITIVE)||LA61_0==IRI_REF||LA61_0==OPEN_BRACE||LA61_0==OPEN_SQ_BRACKET||(LA61_0 >= PNAME_LN && LA61_0 <= PNAME_NS)||(LA61_0 >= STRING_LITERAL1 && LA61_0 <= STRING_LITERAL_LONG2)||LA61_0==TRUE||(LA61_0 >= VAR1 && LA61_0 <= VAR2)) ) {
            	        alt61=1;
            	    }
            	    switch (alt61) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:379:47: triplesTemplate
            	            {
            	            pushFollow(FOLLOW_triplesTemplate_in_quads2519);
            	            triplesTemplate144=triplesTemplate();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate144.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quads"


    public static class quadsNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quadsNotTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:382:1: quadsNotTriples : GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadsNotTriples_return quadsNotTriples() throws RecognitionException {
        IbmSparqlParser.quadsNotTriples_return retval = new IbmSparqlParser.quadsNotTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH145=null;
        Token OPEN_CURLY_BRACE147=null;
        Token CLOSE_CURLY_BRACE149=null;
        IbmSparqlParser.varOrIRIref_return varOrIRIref146 =null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate148 =null;


        XTree GRAPH145_tree=null;
        XTree OPEN_CURLY_BRACE147_tree=null;
        XTree CLOSE_CURLY_BRACE149_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:383:2: ( GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:383:7: GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();


            GRAPH145=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_quadsNotTriples2537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH145_tree = 
            (XTree)adaptor.create(GRAPH145)
            ;
            adaptor.addChild(root_0, GRAPH145_tree);
            }

            pushFollow(FOLLOW_varOrIRIref_in_quadsNotTriples2539);
            varOrIRIref146=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrIRIref146.getTree());

            OPEN_CURLY_BRACE147=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE147_tree = 
            (XTree)adaptor.create(OPEN_CURLY_BRACE147)
            ;
            adaptor.addChild(root_0, OPEN_CURLY_BRACE147_tree);
            }

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:383:42: ( triplesTemplate )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==BLANK_NODE_LABEL||(LA63_0 >= DECIMAL && LA63_0 <= DECIMAL_POSITIVE)||(LA63_0 >= DOUBLE && LA63_0 <= DOUBLE_POSITIVE)||LA63_0==FALSE||(LA63_0 >= INTEGER && LA63_0 <= INTEGER_POSITIVE)||LA63_0==IRI_REF||LA63_0==OPEN_BRACE||LA63_0==OPEN_SQ_BRACKET||(LA63_0 >= PNAME_LN && LA63_0 <= PNAME_NS)||(LA63_0 >= STRING_LITERAL1 && LA63_0 <= STRING_LITERAL_LONG2)||LA63_0==TRUE||(LA63_0 >= VAR1 && LA63_0 <= VAR2)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:383:42: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quadsNotTriples2543);
                    triplesTemplate148=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate148.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE149=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE149_tree = 
            (XTree)adaptor.create(CLOSE_CURLY_BRACE149)
            ;
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE149_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quadsNotTriples"


    public static class triplesTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesTemplate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:386:1: triplesTemplate : triplesSameSubject ( DOT ( triplesTemplate )? )? ;
    public final IbmSparqlParser.triplesTemplate_return triplesTemplate() throws RecognitionException {
        IbmSparqlParser.triplesTemplate_return retval = new IbmSparqlParser.triplesTemplate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT151=null;
        IbmSparqlParser.triplesSameSubject_return triplesSameSubject150 =null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate152 =null;


        XTree DOT151_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:2: ( triplesSameSubject ( DOT ( triplesTemplate )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:7: triplesSameSubject ( DOT ( triplesTemplate )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate2560);
            triplesSameSubject150=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject150.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:26: ( DOT ( triplesTemplate )? )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DOT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:28: DOT ( triplesTemplate )?
                    {
                    DOT151=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate2564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT151_tree = 
                    (XTree)adaptor.create(DOT151)
                    ;
                    adaptor.addChild(root_0, DOT151_tree);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:32: ( triplesTemplate )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==BLANK_NODE_LABEL||(LA64_0 >= DECIMAL && LA64_0 <= DECIMAL_POSITIVE)||(LA64_0 >= DOUBLE && LA64_0 <= DOUBLE_POSITIVE)||LA64_0==FALSE||(LA64_0 >= INTEGER && LA64_0 <= INTEGER_POSITIVE)||LA64_0==IRI_REF||LA64_0==OPEN_BRACE||LA64_0==OPEN_SQ_BRACKET||(LA64_0 >= PNAME_LN && LA64_0 <= PNAME_NS)||(LA64_0 >= STRING_LITERAL1 && LA64_0 <= STRING_LITERAL_LONG2)||LA64_0==TRUE||(LA64_0 >= VAR1 && LA64_0 <= VAR2)) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:387:32: triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_triplesTemplate2566);
                            triplesTemplate152=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate152.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesTemplate"


    public static class groupGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:390:1: groupGraphPattern : OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) ;
    public final IbmSparqlParser.groupGraphPattern_return groupGraphPattern() throws RecognitionException {
        IbmSparqlParser.groupGraphPattern_return retval = new IbmSparqlParser.groupGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE153=null;
        Token CLOSE_CURLY_BRACE154=null;
        IbmSparqlParser.subSelect_return s =null;

        IbmSparqlParser.groupGraphPatternSub_return g =null;


        XTree OPEN_CURLY_BRACE153_tree=null;
        XTree CLOSE_CURLY_BRACE154_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_subSelect=new RewriteRuleSubtreeStream(adaptor,"rule subSelect");
        RewriteRuleSubtreeStream stream_groupGraphPatternSub=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSub");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:391:2: ( OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:391:7: OPEN_CURLY_BRACE (s= subSelect |g= groupGraphPatternSub ) CLOSE_CURLY_BRACE
            {
            OPEN_CURLY_BRACE153=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE153);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:391:24: (s= subSelect |g= groupGraphPatternSub )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==SELECT) ) {
                alt66=1;
            }
            else if ( (LA66_0==BIND||LA66_0==BLANK_NODE_LABEL||LA66_0==CLOSE_CURLY_BRACE||(LA66_0 >= DECIMAL && LA66_0 <= DECIMAL_POSITIVE)||(LA66_0 >= DOUBLE && LA66_0 <= DOUBLE_POSITIVE)||(LA66_0 >= FALSE && LA66_0 <= FILTER)||LA66_0==GRAPH||(LA66_0 >= INTEGER && LA66_0 <= INTEGER_POSITIVE)||LA66_0==IRI_REF||LA66_0==MINUS||(LA66_0 >= OPEN_BRACE && LA66_0 <= OPTIONAL)||(LA66_0 >= PNAME_LN && LA66_0 <= PNAME_NS)||LA66_0==SERVICE||(LA66_0 >= STRING_LITERAL1 && LA66_0 <= STRING_LITERAL_LONG2)||LA66_0==TRUE||LA66_0==VALUES||(LA66_0 >= VAR1 && LA66_0 <= VAR2)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:391:26: s= subSelect
                    {
                    pushFollow(FOLLOW_subSelect_in_groupGraphPattern2590);
                    s=subSelect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelect.add(s.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:391:40: g= groupGraphPatternSub
                    {
                    pushFollow(FOLLOW_groupGraphPatternSub_in_groupGraphPattern2596);
                    g=groupGraphPatternSub();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPatternSub.add(g.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE154=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE154);


            // AST REWRITE
            // elements: subSelect, groupGraphPatternSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 393:3: -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:393:7: ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:393:30: ( subSelect )?
                if ( stream_subSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelect.nextTree());

                }
                stream_subSelect.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:393:41: ( groupGraphPatternSub )?
                if ( stream_groupGraphPatternSub.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupGraphPatternSub.nextTree());

                }
                stream_groupGraphPatternSub.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPattern"


    public static class groupGraphPatternSub_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPatternSub"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:396:1: groupGraphPatternSub : ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* ;
    public final IbmSparqlParser.groupGraphPatternSub_return groupGraphPatternSub() throws RecognitionException {
        IbmSparqlParser.groupGraphPatternSub_return retval = new IbmSparqlParser.groupGraphPatternSub_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.triplesBlock_return triplesBlock155 =null;

        IbmSparqlParser.groupGraphPatternSubInt_return groupGraphPatternSubInt156 =null;


        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_groupGraphPatternSubInt=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSubInt");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:2: ( ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:7: ( triplesBlock )? ( groupGraphPatternSubInt )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:7: ( triplesBlock )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==BLANK_NODE_LABEL||(LA67_0 >= DECIMAL && LA67_0 <= DECIMAL_POSITIVE)||(LA67_0 >= DOUBLE && LA67_0 <= DOUBLE_POSITIVE)||LA67_0==FALSE||(LA67_0 >= INTEGER && LA67_0 <= INTEGER_POSITIVE)||LA67_0==IRI_REF||LA67_0==OPEN_BRACE||LA67_0==OPEN_SQ_BRACKET||(LA67_0 >= PNAME_LN && LA67_0 <= PNAME_NS)||(LA67_0 >= STRING_LITERAL1 && LA67_0 <= STRING_LITERAL_LONG2)||LA67_0==TRUE||(LA67_0 >= VAR1 && LA67_0 <= VAR2)) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:7: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSub2634);
                    triplesBlock155=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock155.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:21: ( groupGraphPatternSubInt )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==BIND||LA68_0==FILTER||LA68_0==GRAPH||LA68_0==MINUS||LA68_0==OPEN_CURLY_BRACE||LA68_0==OPTIONAL||LA68_0==SERVICE||LA68_0==VALUES) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:397:21: groupGraphPatternSubInt
            	    {
            	    pushFollow(FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2637);
            	    groupGraphPatternSubInt156=groupGraphPatternSubInt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupGraphPatternSubInt.add(groupGraphPatternSubInt156.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            // AST REWRITE
            // elements: triplesBlock, groupGraphPatternSubInt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 398:3: -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )*
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:398:7: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:398:7: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK")
                    , root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:398:38: ( groupGraphPatternSubInt )*
                while ( stream_groupGraphPatternSubInt.hasNext() ) {
                    adaptor.addChild(root_0, stream_groupGraphPatternSubInt.nextTree());

                }
                stream_groupGraphPatternSubInt.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSub"


    public static class groupGraphPatternSubInt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupGraphPatternSubInt"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:401:1: groupGraphPatternSubInt : graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? ;
    public final IbmSparqlParser.groupGraphPatternSubInt_return groupGraphPatternSubInt() throws RecognitionException {
        IbmSparqlParser.groupGraphPatternSubInt_return retval = new IbmSparqlParser.groupGraphPatternSubInt_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT158=null;
        IbmSparqlParser.graphPatternNotTriples_return graphPatternNotTriples157 =null;

        IbmSparqlParser.triplesBlock_return triplesBlock159 =null;


        XTree DOT158_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_graphPatternNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule graphPatternNotTriples");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:2: ( graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:7: graphPatternNotTriples ( DOT )? ( triplesBlock )?
            {
            pushFollow(FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2667);
            graphPatternNotTriples157=graphPatternNotTriples();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_graphPatternNotTriples.add(graphPatternNotTriples157.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:30: ( DOT )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==DOT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:30: DOT
                    {
                    DOT158=(Token)match(input,DOT,FOLLOW_DOT_in_groupGraphPatternSubInt2669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT158);


                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:35: ( triplesBlock )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==BLANK_NODE_LABEL||(LA70_0 >= DECIMAL && LA70_0 <= DECIMAL_POSITIVE)||(LA70_0 >= DOUBLE && LA70_0 <= DOUBLE_POSITIVE)||LA70_0==FALSE||(LA70_0 >= INTEGER && LA70_0 <= INTEGER_POSITIVE)||LA70_0==IRI_REF||LA70_0==OPEN_BRACE||LA70_0==OPEN_SQ_BRACKET||(LA70_0 >= PNAME_LN && LA70_0 <= PNAME_NS)||(LA70_0 >= STRING_LITERAL1 && LA70_0 <= STRING_LITERAL_LONG2)||LA70_0==TRUE||(LA70_0 >= VAR1 && LA70_0 <= VAR2)) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:402:35: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSubInt2672);
                    triplesBlock159=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock159.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: graphPatternNotTriples, triplesBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 403:3: -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )?
            {
                adaptor.addChild(root_0, stream_graphPatternNotTriples.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:403:30: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:403:30: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK")
                    , root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSubInt"


    public static class triplesBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesBlock"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:406:1: triplesBlock : t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? ;
    public final IbmSparqlParser.triplesBlock_return triplesBlock() throws RecognitionException {
        IbmSparqlParser.triplesBlock_return retval = new IbmSparqlParser.triplesBlock_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT160=null;
        IbmSparqlParser.triplesSameSubjectPath_return t1 =null;

        IbmSparqlParser.triplesBlock_return t2 =null;


        XTree DOT160_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_triplesSameSubjectPath=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubjectPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:2: (t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:7: t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )?
            {
            pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock2703);
            t1=triplesSameSubjectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_triplesSameSubjectPath.add(t1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:33: ( DOT (t2= triplesBlock )? )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==DOT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:35: DOT (t2= triplesBlock )?
                    {
                    DOT160=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock2707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT160);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:41: (t2= triplesBlock )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==BLANK_NODE_LABEL||(LA71_0 >= DECIMAL && LA71_0 <= DECIMAL_POSITIVE)||(LA71_0 >= DOUBLE && LA71_0 <= DOUBLE_POSITIVE)||LA71_0==FALSE||(LA71_0 >= INTEGER && LA71_0 <= INTEGER_POSITIVE)||LA71_0==IRI_REF||LA71_0==OPEN_BRACE||LA71_0==OPEN_SQ_BRACKET||(LA71_0 >= PNAME_LN && LA71_0 <= PNAME_NS)||(LA71_0 >= STRING_LITERAL1 && LA71_0 <= STRING_LITERAL_LONG2)||LA71_0==TRUE||(LA71_0 >= VAR1 && LA71_0 <= VAR2)) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:41: t2= triplesBlock
                            {
                            pushFollow(FOLLOW_triplesBlock_in_triplesBlock2711);
                            t2=triplesBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesBlock.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: triplesBlock, triplesSameSubjectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 407:60: -> triplesSameSubjectPath ( ( triplesBlock )+ )?
            {
                adaptor.addChild(root_0, stream_triplesSameSubjectPath.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:407:87: ( ( triplesBlock )+ )?
                if ( stream_triplesBlock.hasNext() ) {
                    if ( !(stream_triplesBlock.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_triplesBlock.hasNext() ) {
                        adaptor.addChild(root_0, stream_triplesBlock.nextTree());

                    }
                    stream_triplesBlock.reset();

                }
                stream_triplesBlock.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesBlock"


    public static class graphPatternNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphPatternNotTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:410:1: graphPatternNotTriples : ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData );
    public final IbmSparqlParser.graphPatternNotTriples_return graphPatternNotTriples() throws RecognitionException {
        IbmSparqlParser.graphPatternNotTriples_return retval = new IbmSparqlParser.graphPatternNotTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern161 =null;

        IbmSparqlParser.optionalGraphPattern_return optionalGraphPattern162 =null;

        IbmSparqlParser.minusGraphPattern_return minusGraphPattern163 =null;

        IbmSparqlParser.graphGraphPattern_return graphGraphPattern164 =null;

        IbmSparqlParser.serviceGraphPattern_return serviceGraphPattern165 =null;

        IbmSparqlParser.filter_return filter166 =null;

        IbmSparqlParser.bind_return bind167 =null;

        IbmSparqlParser.inlineData_return inlineData168 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:411:2: ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData )
            int alt73=8;
            switch ( input.LA(1) ) {
            case OPEN_CURLY_BRACE:
                {
                alt73=1;
                }
                break;
            case OPTIONAL:
                {
                alt73=2;
                }
                break;
            case MINUS:
                {
                alt73=3;
                }
                break;
            case GRAPH:
                {
                alt73=4;
                }
                break;
            case SERVICE:
                {
                alt73=5;
                }
                break;
            case FILTER:
                {
                alt73=6;
                }
                break;
            case BIND:
                {
                alt73=7;
                }
                break;
            case VALUES:
                {
                alt73=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:411:7: groupOrUnionGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2742);
                    groupOrUnionGraphPattern161=groupOrUnionGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupOrUnionGraphPattern161.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:412:10: optionalGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2756);
                    optionalGraphPattern162=optionalGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalGraphPattern162.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:413:10: minusGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_minusGraphPattern_in_graphPatternNotTriples2769);
                    minusGraphPattern163=minusGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, minusGraphPattern163.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:414:10: graphGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphGraphPattern_in_graphPatternNotTriples2783);
                    graphGraphPattern164=graphGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphGraphPattern164.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:415:10: serviceGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2797);
                    serviceGraphPattern165=serviceGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, serviceGraphPattern165.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:416:10: filter
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_filter_in_graphPatternNotTriples2811);
                    filter166=filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter166.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:417:10: bind
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_bind_in_graphPatternNotTriples2825);
                    bind167=bind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind167.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:418:10: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineData_in_graphPatternNotTriples2838);
                    inlineData168=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphPatternNotTriples"


    public static class inlineData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineData"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:421:1: inlineData : VALUES dataBlock -> ^( VALUES dataBlock ) ;
    public final IbmSparqlParser.inlineData_return inlineData() throws RecognitionException {
        IbmSparqlParser.inlineData_return retval = new IbmSparqlParser.inlineData_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token VALUES169=null;
        IbmSparqlParser.dataBlock_return dataBlock170 =null;


        XTree VALUES169_tree=null;
        RewriteRuleTokenStream stream_VALUES=new RewriteRuleTokenStream(adaptor,"token VALUES");
        RewriteRuleSubtreeStream stream_dataBlock=new RewriteRuleSubtreeStream(adaptor,"rule dataBlock");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:422:5: ( VALUES dataBlock -> ^( VALUES dataBlock ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:422:10: VALUES dataBlock
            {
            VALUES169=(Token)match(input,VALUES,FOLLOW_VALUES_in_inlineData2858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VALUES.add(VALUES169);


            pushFollow(FOLLOW_dataBlock_in_inlineData2860);
            dataBlock170=dataBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dataBlock.add(dataBlock170.getTree());

            // AST REWRITE
            // elements: VALUES, dataBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 422:27: -> ^( VALUES dataBlock )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:422:30: ^( VALUES dataBlock )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_VALUES.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_dataBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineData"


    public static class dataBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dataBlock"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:425:1: dataBlock : ( inlineDataOneVar | inlineDataFull );
    public final IbmSparqlParser.dataBlock_return dataBlock() throws RecognitionException {
        IbmSparqlParser.dataBlock_return retval = new IbmSparqlParser.dataBlock_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.inlineDataOneVar_return inlineDataOneVar171 =null;

        IbmSparqlParser.inlineDataFull_return inlineDataFull172 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:426:5: ( inlineDataOneVar | inlineDataFull )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( ((LA74_0 >= VAR1 && LA74_0 <= VAR2)) ) {
                alt74=1;
            }
            else if ( (LA74_0==OPEN_BRACE) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:426:10: inlineDataOneVar
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineDataOneVar_in_dataBlock2888);
                    inlineDataOneVar171=inlineDataOneVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataOneVar171.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:426:29: inlineDataFull
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_inlineDataFull_in_dataBlock2892);
                    inlineDataFull172=inlineDataFull();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataFull172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dataBlock"


    public static class inlineDataOneVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineDataOneVar"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:429:1: inlineDataOneVar : v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) ;
    public final IbmSparqlParser.inlineDataOneVar_return inlineDataOneVar() throws RecognitionException {
        IbmSparqlParser.inlineDataOneVar_return retval = new IbmSparqlParser.inlineDataOneVar_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE173=null;
        Token CLOSE_CURLY_BRACE174=null;
        List list_b=null;
        IbmSparqlParser.var_return v =null;

        RuleReturnScope b = null;
        XTree OPEN_CURLY_BRACE173_tree=null;
        XTree CLOSE_CURLY_BRACE174_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:5: (v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:10: v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE
            {
            pushFollow(FOLLOW_var_in_inlineDataOneVar2914);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            OPEN_CURLY_BRACE173=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar2916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE173);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:34: (b+= dataBlockValue )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( ((LA75_0 >= DECIMAL && LA75_0 <= DECIMAL_POSITIVE)||(LA75_0 >= DOUBLE && LA75_0 <= DOUBLE_POSITIVE)||LA75_0==FALSE||(LA75_0 >= INTEGER && LA75_0 <= INTEGER_POSITIVE)||LA75_0==IRI_REF||(LA75_0 >= PNAME_LN && LA75_0 <= PNAME_NS)||(LA75_0 >= STRING_LITERAL1 && LA75_0 <= STRING_LITERAL_LONG2)||LA75_0==TRUE||LA75_0==UNDEF) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:34: b+= dataBlockValue
            	    {
            	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataOneVar2920);
            	    b=dataBlockValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            CLOSE_CURLY_BRACE174=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar2923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE174);


            // AST REWRITE
            // elements: b, v
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: b
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 430:70: -> ^( INLINE_DATA $v ( $b)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:73: ^( INLINE_DATA $v ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(INLINE_DATA, "INLINE_DATA")
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:430:91: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineDataOneVar"


    public static class inlineDataFull_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inlineDataFull"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:433:1: inlineDataFull : OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) ;
    public final IbmSparqlParser.inlineDataFull_return inlineDataFull() throws RecognitionException {
        IbmSparqlParser.inlineDataFull_return retval = new IbmSparqlParser.inlineDataFull_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE175=null;
        Token CLOSE_BRACE176=null;
        Token OPEN_CURLY_BRACE177=null;
        Token OPEN_BRACE178=null;
        Token CLOSE_BRACE179=null;
        Token CLOSE_CURLY_BRACE180=null;
        List list_v=null;
        List list_b=null;
        RuleReturnScope v = null;
        RuleReturnScope b = null;
        XTree OPEN_BRACE175_tree=null;
        XTree CLOSE_BRACE176_tree=null;
        XTree OPEN_CURLY_BRACE177_tree=null;
        XTree OPEN_BRACE178_tree=null;
        XTree CLOSE_BRACE179_tree=null;
        XTree CLOSE_CURLY_BRACE180_tree=null;
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:5: ( OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:10: OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE
            {
            OPEN_BRACE175=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull2956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE175);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:22: (v+= var )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0 >= VAR1 && LA76_0 <= VAR2)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:22: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_inlineDataFull2960);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            CLOSE_BRACE176=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull2963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE176);


            OPEN_CURLY_BRACE177=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull2965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE177);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:58: ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==OPEN_BRACE) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:60: OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE
            	    {
            	    OPEN_BRACE178=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull2969); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE178);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:72: (b+= dataBlockValue )*
            	    loop77:
            	    do {
            	        int alt77=2;
            	        int LA77_0 = input.LA(1);

            	        if ( ((LA77_0 >= DECIMAL && LA77_0 <= DECIMAL_POSITIVE)||(LA77_0 >= DOUBLE && LA77_0 <= DOUBLE_POSITIVE)||LA77_0==FALSE||(LA77_0 >= INTEGER && LA77_0 <= INTEGER_POSITIVE)||LA77_0==IRI_REF||(LA77_0 >= PNAME_LN && LA77_0 <= PNAME_NS)||(LA77_0 >= STRING_LITERAL1 && LA77_0 <= STRING_LITERAL_LONG2)||LA77_0==TRUE||LA77_0==UNDEF) ) {
            	            alt77=1;
            	        }


            	        switch (alt77) {
            	    	case 1 :
            	    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:72: b+= dataBlockValue
            	    	    {
            	    	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataFull2973);
            	    	    b=dataBlockValue();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    	    if (list_b==null) list_b=new ArrayList();
            	    	    list_b.add(b.getTree());


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop77;
            	        }
            	    } while (true);


            	    CLOSE_BRACE179=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull2976); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE179);


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            CLOSE_CURLY_BRACE180=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE180);


            // AST REWRITE
            // elements: v, b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b, v
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 434:124: -> ^( INLINE_DATA ( $v)* ( $b)* )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:127: ^( INLINE_DATA ( $v)* ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(INLINE_DATA, "INLINE_DATA")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:142: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:434:146: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inlineDataFull"


    public static class dataBlockValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dataBlockValue"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:437:1: dataBlockValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF );
    public final IbmSparqlParser.dataBlockValue_return dataBlockValue() throws RecognitionException {
        IbmSparqlParser.dataBlockValue_return retval = new IbmSparqlParser.dataBlockValue_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNDEF185=null;
        IbmSparqlParser.iRIref_return iRIref181 =null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral182 =null;

        IbmSparqlParser.numericLiteral_return numericLiteral183 =null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral184 =null;


        XTree UNDEF185_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt79=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt79=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt79=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt79=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt79=4;
                }
                break;
            case UNDEF:
                {
                alt79=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_dataBlockValue3015);
                    iRIref181=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref181.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_dataBlockValue3019);
                    rDFLiteral182=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral182.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_dataBlockValue3023);
                    numericLiteral183=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral183.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_dataBlockValue3027);
                    booleanLiteral184=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral184.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:438:63: UNDEF
                    {
                    root_0 = (XTree)adaptor.nil();


                    UNDEF185=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_dataBlockValue3031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF185_tree = 
                    (XTree)adaptor.create(UNDEF185)
                    ;
                    adaptor.addChild(root_0, UNDEF185_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dataBlockValue"


    public static class optionalGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optionalGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:440:1: optionalGraphPattern : OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) ;
    public final IbmSparqlParser.optionalGraphPattern_return optionalGraphPattern() throws RecognitionException {
        IbmSparqlParser.optionalGraphPattern_return retval = new IbmSparqlParser.optionalGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPTIONAL186=null;
        IbmSparqlParser.groupGraphPattern_return g =null;


        XTree OPTIONAL186_tree=null;
        RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,"token OPTIONAL");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:441:2: ( OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:441:7: OPTIONAL g= groupGraphPattern
            {
            OPTIONAL186=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_optionalGraphPattern3044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPTIONAL.add(OPTIONAL186);


            pushFollow(FOLLOW_groupGraphPattern_in_optionalGraphPattern3048);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: OPTIONAL, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 443:3: -> ^( OPTIONAL $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:443:7: ^( OPTIONAL $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_OPTIONAL.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optionalGraphPattern"


    public static class graphGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:446:1: graphGraphPattern : GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) ;
    public final IbmSparqlParser.graphGraphPattern_return graphGraphPattern() throws RecognitionException {
        IbmSparqlParser.graphGraphPattern_return retval = new IbmSparqlParser.graphGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token GRAPH187=null;
        IbmSparqlParser.varOrIRIref_return v =null;

        IbmSparqlParser.groupGraphPattern_return g =null;


        XTree GRAPH187_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:447:2: ( GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:447:7: GRAPH v= varOrIRIref g= groupGraphPattern
            {
            GRAPH187=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphGraphPattern3078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAPH.add(GRAPH187);


            pushFollow(FOLLOW_varOrIRIref_in_graphGraphPattern3082);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());

            pushFollow(FOLLOW_groupGraphPattern_in_graphGraphPattern3086);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: v, g, GRAPH
            // token labels: 
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 449:3: -> ^( GRAPH $v $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:449:7: ^( GRAPH $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_GRAPH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphGraphPattern"


    public static class serviceGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "serviceGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:452:1: serviceGraphPattern : SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) ;
    public final IbmSparqlParser.serviceGraphPattern_return serviceGraphPattern() throws RecognitionException {
        IbmSparqlParser.serviceGraphPattern_return retval = new IbmSparqlParser.serviceGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token s=null;
        Token SERVICE188=null;
        IbmSparqlParser.varOrIRIref_return v =null;

        IbmSparqlParser.groupGraphPattern_return g =null;


        XTree s_tree=null;
        XTree SERVICE188_tree=null;
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:454:2: ( SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:454:7: SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern
            {
            SERVICE188=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_serviceGraphPattern3128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SERVICE.add(SERVICE188);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:454:16: (s= SILENT )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==SILENT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:454:16: s= SILENT
                    {
                    s=(Token)match(input,SILENT,FOLLOW_SILENT_in_serviceGraphPattern3132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SILENT.add(s);


                    }
                    break;

            }


            pushFollow(FOLLOW_varOrIRIref_in_serviceGraphPattern3137);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());

            pushFollow(FOLLOW_groupGraphPattern_in_serviceGraphPattern3141);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: s, g, v, SERVICE
            // token labels: s
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 456:3: -> ^( SERVICE ( $s)? $v $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:456:7: ^( SERVICE ( $s)? $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_SERVICE.nextNode()
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:456:20: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { ((XTree)retval.tree).matched = input.toString(retval.start,input.LT(-1)); }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "serviceGraphPattern"


    public static class bind_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bind"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:459:1: bind : BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) ;
    public final IbmSparqlParser.bind_return bind() throws RecognitionException {
        IbmSparqlParser.bind_return retval = new IbmSparqlParser.bind_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BIND189=null;
        Token OPEN_BRACE190=null;
        Token AS191=null;
        Token CLOSE_BRACE192=null;
        IbmSparqlParser.expression_return e =null;

        IbmSparqlParser.var_return v =null;


        XTree BIND189_tree=null;
        XTree OPEN_BRACE190_tree=null;
        XTree AS191_tree=null;
        XTree CLOSE_BRACE192_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:460:2: ( BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:460:7: BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            BIND189=(Token)match(input,BIND,FOLLOW_BIND_in_bind3181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND189);


            OPEN_BRACE190=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind3183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE190);


            pushFollow(FOLLOW_expression_in_bind3187);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            AS191=(Token)match(input,AS,FOLLOW_AS_in_bind3189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS191);


            pushFollow(FOLLOW_var_in_bind3193);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());

            CLOSE_BRACE192=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind3195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE192);


            // AST REWRITE
            // elements: BIND, e, v
            // token labels: 
            // rule labels: e, v, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 462:3: -> ^( BIND $v $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:462:7: ^( BIND $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_BIND.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v.nextTree());

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bind"


    public static class groupOrUnionGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupOrUnionGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:465:1: groupOrUnionGraphPattern : g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) ;
    public final IbmSparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern() throws RecognitionException {
        IbmSparqlParser.groupOrUnionGraphPattern_return retval = new IbmSparqlParser.groupOrUnionGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token UNION193=null;
        List list_g2=null;
        IbmSparqlParser.groupGraphPattern_return g1 =null;

        RuleReturnScope g2 = null;
        XTree UNION193_tree=null;
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:2: (g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:7: g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            {
            pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3232);
            g1=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:28: ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==UNION) ) {
                alt82=1;
            }
            else if ( (LA82_0==BIND||LA82_0==BLANK_NODE_LABEL||LA82_0==CLOSE_CURLY_BRACE||(LA82_0 >= DECIMAL && LA82_0 <= DECIMAL_POSITIVE)||(LA82_0 >= DOT && LA82_0 <= DOUBLE_POSITIVE)||(LA82_0 >= FALSE && LA82_0 <= FILTER)||LA82_0==GRAPH||(LA82_0 >= INTEGER && LA82_0 <= INTEGER_POSITIVE)||LA82_0==IRI_REF||LA82_0==MINUS||(LA82_0 >= OPEN_BRACE && LA82_0 <= OPTIONAL)||(LA82_0 >= PNAME_LN && LA82_0 <= PNAME_NS)||LA82_0==SERVICE||(LA82_0 >= STRING_LITERAL1 && LA82_0 <= STRING_LITERAL_LONG2)||LA82_0==TRUE||LA82_0==VALUES||(LA82_0 >= VAR1 && LA82_0 <= VAR2)) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }
            switch (alt82) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:30: ( UNION g2+= groupGraphPattern )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:30: ( UNION g2+= groupGraphPattern )+
                    int cnt81=0;
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==UNION) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:32: UNION g2+= groupGraphPattern
                    	    {
                    	    UNION193=(Token)match(input,UNION,FOLLOW_UNION_in_groupOrUnionGraphPattern3238); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_UNION.add(UNION193);


                    	    pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3242);
                    	    g2=groupGraphPattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_groupGraphPattern.add(g2.getTree());
                    	    if (list_g2==null) list_g2=new ArrayList();
                    	    list_g2.add(g2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt81 >= 1 ) break loop81;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(81, input);
                                throw eee;
                        }
                        cnt81++;
                    } while (true);


                    // AST REWRITE
                    // elements: g2, g1, UNION
                    // token labels: 
                    // rule labels: g1, retval
                    // token list labels: 
                    // rule list labels: g2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g2=new RewriteRuleSubtreeStream(adaptor,"token g2",list_g2);
                    root_0 = (XTree)adaptor.nil();
                    // 466:63: -> ^( UNION $g1 ( $g2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:66: ^( UNION $g1 ( $g2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_UNION.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_g1.nextTree());

                        if ( !(stream_g2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_g2.hasNext() ) {
                            adaptor.addChild(root_1, stream_g2.nextTree());

                        }
                        stream_g2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:466:90: 
                    {
                    // AST REWRITE
                    // elements: g1
                    // token labels: 
                    // rule labels: g1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 466:90: -> $g1
                    {
                        adaptor.addChild(root_0, stream_g1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupOrUnionGraphPattern"


    public static class minusGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "minusGraphPattern"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:469:1: minusGraphPattern : MINUS n= groupGraphPattern -> ^( MINUS $n) ;
    public final IbmSparqlParser.minusGraphPattern_return minusGraphPattern() throws RecognitionException {
        IbmSparqlParser.minusGraphPattern_return retval = new IbmSparqlParser.minusGraphPattern_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token MINUS194=null;
        IbmSparqlParser.groupGraphPattern_return n =null;


        XTree MINUS194_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:470:5: ( MINUS n= groupGraphPattern -> ^( MINUS $n) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:470:10: MINUS n= groupGraphPattern
            {
            MINUS194=(Token)match(input,MINUS,FOLLOW_MINUS_in_minusGraphPattern3289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS194);


            pushFollow(FOLLOW_groupGraphPattern_in_minusGraphPattern3293);
            n=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(n.getTree());

            // AST REWRITE
            // elements: MINUS, n
            // token labels: 
            // rule labels: n, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 470:36: -> ^( MINUS $n)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:470:39: ^( MINUS $n)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_MINUS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_n.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "minusGraphPattern"


    public static class filter_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:473:1: filter : FILTER c= constraint -> ^( FILTER $c) ;
    public final IbmSparqlParser.filter_return filter() throws RecognitionException {
        IbmSparqlParser.filter_return retval = new IbmSparqlParser.filter_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token FILTER195=null;
        IbmSparqlParser.constraint_return c =null;


        XTree FILTER195_tree=null;
        RewriteRuleTokenStream stream_FILTER=new RewriteRuleTokenStream(adaptor,"token FILTER");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:474:2: ( FILTER c= constraint -> ^( FILTER $c) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:474:7: FILTER c= constraint
            {
            FILTER195=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter3319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FILTER.add(FILTER195);


            pushFollow(FOLLOW_constraint_in_filter3323);
            c=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constraint.add(c.getTree());

            // AST REWRITE
            // elements: c, FILTER
            // token labels: 
            // rule labels: c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 476:3: -> ^( FILTER $c)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:476:7: ^( FILTER $c)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_FILTER.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_c.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter"


    public static class constraint_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraint"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:479:1: constraint : ( brackettedExpression | builtInCall | functionCall );
    public final IbmSparqlParser.constraint_return constraint() throws RecognitionException {
        IbmSparqlParser.constraint_return retval = new IbmSparqlParser.constraint_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.brackettedExpression_return brackettedExpression196 =null;

        IbmSparqlParser.builtInCall_return builtInCall197 =null;

        IbmSparqlParser.functionCall_return functionCall198 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:480:2: ( brackettedExpression | builtInCall | functionCall )
            int alt83=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt83=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt83=2;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:480:7: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_brackettedExpression_in_constraint3354);
                    brackettedExpression196=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression196.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:480:30: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_constraint3358);
                    builtInCall197=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall197.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:480:44: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_functionCall_in_constraint3362);
                    functionCall198=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraint"


    public static class functionCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionCall"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:483:1: functionCall : i= iRIref a= argList -> ^( FUNCTION $i $a) ;
    public final IbmSparqlParser.functionCall_return functionCall() throws RecognitionException {
        IbmSparqlParser.functionCall_return retval = new IbmSparqlParser.functionCall_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.iRIref_return i =null;

        IbmSparqlParser.argList_return a =null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:484:2: (i= iRIref a= argList -> ^( FUNCTION $i $a) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:484:7: i= iRIref a= argList
            {
            pushFollow(FOLLOW_iRIref_in_functionCall3378);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            pushFollow(FOLLOW_argList_in_functionCall3382);
            a=argList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_argList.add(a.getTree());

            // AST REWRITE
            // elements: a, i
            // token labels: 
            // rule labels: a, i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 486:3: -> ^( FUNCTION $i $a)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:486:7: ^( FUNCTION $i $a)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_1, stream_a.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionCall"


    public static class argList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:489:1: argList : ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* );
    public final IbmSparqlParser.argList_return argList() throws RecognitionException {
        IbmSparqlParser.argList_return retval = new IbmSparqlParser.argList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token d=null;
        Token OPEN_BRACE200=null;
        Token COMMA201=null;
        Token CLOSE_BRACE202=null;
        List list_e2=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.nil_return nil199 =null;

        RuleReturnScope e2 = null;
        XTree d_tree=null;
        XTree OPEN_BRACE200_tree=null;
        XTree COMMA201_tree=null;
        XTree CLOSE_BRACE202_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:490:2: ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==OPEN_BRACE) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==CLOSE_BRACE) ) {
                    alt86=1;
                }
                else if ( (LA86_1==ABS||LA86_1==AVG||LA86_1==BNODE||LA86_1==BOUND||LA86_1==CEIL||LA86_1==COALESCE||LA86_1==CONCAT||LA86_1==CONTAINS||LA86_1==COUNT||(LA86_1 >= DATATYPE && LA86_1 <= DECIMAL_POSITIVE)||LA86_1==DISTINCT||(LA86_1 >= DOUBLE && LA86_1 <= DOUBLE_POSITIVE)||LA86_1==ENCODE_FOR_URI||LA86_1==EXISTS||LA86_1==FALSE||LA86_1==FLOOR||LA86_1==GROUP_CONCAT||LA86_1==HOURS||LA86_1==IF||(LA86_1 >= INTEGER && LA86_1 <= INTEGER_POSITIVE)||LA86_1==IRI||(LA86_1 >= IRI_REF && LA86_1 <= ISURI)||(LA86_1 >= LANG && LA86_1 <= LANGMATCHES)||LA86_1==LCASE||(LA86_1 >= MAX && LA86_1 <= MIN)||LA86_1==MINUTES||LA86_1==MONTH||LA86_1==NOT||LA86_1==NOW||LA86_1==OPEN_BRACE||(LA86_1 >= PNAME_LN && LA86_1 <= PNAME_NS)||LA86_1==RAND||(LA86_1 >= REGEX && LA86_1 <= REPLACE)||LA86_1==ROUND||(LA86_1 >= SAMETERM && LA86_1 <= SECONDS)||(LA86_1 >= SHA1 && LA86_1 <= SHA512)||(LA86_1 >= STR && LA86_1 <= STRENDS)||(LA86_1 >= STRING_LITERAL1 && LA86_1 <= STRUUID)||LA86_1==SUBSTR||LA86_1==SUM||LA86_1==TIMEZONE||LA86_1==TRUE||LA86_1==TZ||LA86_1==UCASE||LA86_1==URI||LA86_1==UUID||(LA86_1 >= VAR1 && LA86_1 <= VAR2)||LA86_1==YEAR||LA86_1==251||(LA86_1 >= 254 && LA86_1 <= 255)) ) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:490:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_argList3415);
                    nil199=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil199.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 490:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:491:7: OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE200=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_argList3430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE200);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:491:19: (d= DISTINCT )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==DISTINCT) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:491:19: d= DISTINCT
                            {
                            d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_argList3434); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_argList3439);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:491:44: ( COMMA e2+= expression )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:491:46: COMMA e2+= expression
                    	    {
                    	    COMMA201=(Token)match(input,COMMA,FOLLOW_COMMA_in_argList3443); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA201);


                    	    pushFollow(FOLLOW_expression_in_argList3447);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    CLOSE_BRACE202=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_argList3452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE202);


                    // AST REWRITE
                    // elements: e1, e2, d
                    // token labels: d
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 492:10: -> ( $d)? $e1 ( $e2)*
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:492:15: ( $d)?
                        if ( stream_d.hasNext() ) {
                            adaptor.addChild(root_0, stream_d.nextNode());

                        }
                        stream_d.reset();

                        adaptor.addChild(root_0, stream_e1.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:492:24: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argList"


    public static class expressionList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:495:1: expressionList : ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* );
    public final IbmSparqlParser.expressionList_return expressionList() throws RecognitionException {
        IbmSparqlParser.expressionList_return retval = new IbmSparqlParser.expressionList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE204=null;
        Token COMMA205=null;
        Token CLOSE_BRACE206=null;
        List list_e2=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.nil_return nil203 =null;

        RuleReturnScope e2 = null;
        XTree OPEN_BRACE204_tree=null;
        XTree COMMA205_tree=null;
        XTree CLOSE_BRACE206_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:496:2: ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==OPEN_BRACE) ) {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==CLOSE_BRACE) ) {
                    alt88=1;
                }
                else if ( (LA88_1==ABS||LA88_1==AVG||LA88_1==BNODE||LA88_1==BOUND||LA88_1==CEIL||LA88_1==COALESCE||LA88_1==CONCAT||LA88_1==CONTAINS||LA88_1==COUNT||(LA88_1 >= DATATYPE && LA88_1 <= DECIMAL_POSITIVE)||(LA88_1 >= DOUBLE && LA88_1 <= DOUBLE_POSITIVE)||LA88_1==ENCODE_FOR_URI||LA88_1==EXISTS||LA88_1==FALSE||LA88_1==FLOOR||LA88_1==GROUP_CONCAT||LA88_1==HOURS||LA88_1==IF||(LA88_1 >= INTEGER && LA88_1 <= INTEGER_POSITIVE)||LA88_1==IRI||(LA88_1 >= IRI_REF && LA88_1 <= ISURI)||(LA88_1 >= LANG && LA88_1 <= LANGMATCHES)||LA88_1==LCASE||(LA88_1 >= MAX && LA88_1 <= MIN)||LA88_1==MINUTES||LA88_1==MONTH||LA88_1==NOT||LA88_1==NOW||LA88_1==OPEN_BRACE||(LA88_1 >= PNAME_LN && LA88_1 <= PNAME_NS)||LA88_1==RAND||(LA88_1 >= REGEX && LA88_1 <= REPLACE)||LA88_1==ROUND||(LA88_1 >= SAMETERM && LA88_1 <= SECONDS)||(LA88_1 >= SHA1 && LA88_1 <= SHA512)||(LA88_1 >= STR && LA88_1 <= STRENDS)||(LA88_1 >= STRING_LITERAL1 && LA88_1 <= STRUUID)||LA88_1==SUBSTR||LA88_1==SUM||LA88_1==TIMEZONE||LA88_1==TRUE||LA88_1==TZ||LA88_1==UCASE||LA88_1==URI||LA88_1==UUID||(LA88_1 >= VAR1 && LA88_1 <= VAR2)||LA88_1==YEAR||LA88_1==251||(LA88_1 >= 254 && LA88_1 <= 255)) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:496:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_expressionList3490);
                    nil203=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil203.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 496:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:497:7: OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE204=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expressionList3505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE204);


                    pushFollow(FOLLOW_expression_in_expressionList3509);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:497:32: ( COMMA e2+= expression )*
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==COMMA) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:497:34: COMMA e2+= expression
                    	    {
                    	    COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList3513); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);


                    	    pushFollow(FOLLOW_expression_in_expressionList3517);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);


                    CLOSE_BRACE206=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expressionList3522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE206);


                    // AST REWRITE
                    // elements: e2, e1
                    // token labels: 
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 498:13: -> $e1 ( $e2)*
                    {
                        adaptor.addChild(root_0, stream_e1.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:498:23: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expressionList"


    public static class constructTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructTemplate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:501:1: constructTemplate : OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !;
    public final IbmSparqlParser.constructTemplate_return constructTemplate() throws RecognitionException {
        IbmSparqlParser.constructTemplate_return retval = new IbmSparqlParser.constructTemplate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_CURLY_BRACE207=null;
        Token CLOSE_CURLY_BRACE209=null;
        IbmSparqlParser.constructTriples_return constructTriples208 =null;


        XTree OPEN_CURLY_BRACE207_tree=null;
        XTree CLOSE_CURLY_BRACE209_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:502:2: ( OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:502:7: OPEN_CURLY_BRACE ! ( constructTriples )? CLOSE_CURLY_BRACE !
            {
            root_0 = (XTree)adaptor.nil();


            OPEN_CURLY_BRACE207=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3559); if (state.failed) return retval;

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:502:25: ( constructTriples )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==BLANK_NODE_LABEL||(LA89_0 >= DECIMAL && LA89_0 <= DECIMAL_POSITIVE)||(LA89_0 >= DOUBLE && LA89_0 <= DOUBLE_POSITIVE)||LA89_0==FALSE||(LA89_0 >= INTEGER && LA89_0 <= INTEGER_POSITIVE)||LA89_0==IRI_REF||LA89_0==OPEN_BRACE||LA89_0==OPEN_SQ_BRACKET||(LA89_0 >= PNAME_LN && LA89_0 <= PNAME_NS)||(LA89_0 >= STRING_LITERAL1 && LA89_0 <= STRING_LITERAL_LONG2)||LA89_0==TRUE||(LA89_0 >= VAR1 && LA89_0 <= VAR2)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:502:25: constructTriples
                    {
                    pushFollow(FOLLOW_constructTriples_in_constructTemplate3562);
                    constructTriples208=constructTriples();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples208.getTree());

                    }
                    break;

            }


            CLOSE_CURLY_BRACE209=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3565); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructTemplate"


    public static class constructTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructTriples"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:505:1: constructTriples : triplesSameSubject ( DOT ! ( constructTriples )? )? ;
    public final IbmSparqlParser.constructTriples_return constructTriples() throws RecognitionException {
        IbmSparqlParser.constructTriples_return retval = new IbmSparqlParser.constructTriples_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token DOT211=null;
        IbmSparqlParser.triplesSameSubject_return triplesSameSubject210 =null;

        IbmSparqlParser.constructTriples_return constructTriples212 =null;


        XTree DOT211_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:2: ( triplesSameSubject ( DOT ! ( constructTriples )? )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:7: triplesSameSubject ( DOT ! ( constructTriples )? )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_triplesSameSubject_in_constructTriples3580);
            triplesSameSubject210=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject210.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:26: ( DOT ! ( constructTriples )? )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DOT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:28: DOT ! ( constructTriples )?
                    {
                    DOT211=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples3584); if (state.failed) return retval;

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:33: ( constructTriples )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==BLANK_NODE_LABEL||(LA90_0 >= DECIMAL && LA90_0 <= DECIMAL_POSITIVE)||(LA90_0 >= DOUBLE && LA90_0 <= DOUBLE_POSITIVE)||LA90_0==FALSE||(LA90_0 >= INTEGER && LA90_0 <= INTEGER_POSITIVE)||LA90_0==IRI_REF||LA90_0==OPEN_BRACE||LA90_0==OPEN_SQ_BRACKET||(LA90_0 >= PNAME_LN && LA90_0 <= PNAME_NS)||(LA90_0 >= STRING_LITERAL1 && LA90_0 <= STRING_LITERAL_LONG2)||LA90_0==TRUE||(LA90_0 >= VAR1 && LA90_0 <= VAR2)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:506:33: constructTriples
                            {
                            pushFollow(FOLLOW_constructTriples_in_constructTriples3587);
                            constructTriples212=constructTriples();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples212.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructTriples"


    public static class triplesSameSubject_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesSameSubject"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:509:1: triplesSameSubject : ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlParser.triplesSameSubject_return triplesSameSubject() throws RecognitionException {
        IbmSparqlParser.triplesSameSubject_return retval = new IbmSparqlParser.triplesSameSubject_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return s1 =null;

        IbmSparqlParser.propertyListNotEmpty_return p1 =null;

        IbmSparqlParser.triplesNode_return s2 =null;

        IbmSparqlParser.propertyList_return p2 =null;


        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyList=new RewriteRuleSubtreeStream(adaptor,"rule propertyList");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:510:2: ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt92=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt92=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA92_2 = input.LA(2);

                if ( (LA92_2==CLOSE_SQ_BRACKET) ) {
                    alt92=1;
                }
                else if ( (LA92_2==IRI_REF||(LA92_2 >= PNAME_LN && LA92_2 <= PNAME_NS)||(LA92_2 >= VAR1 && LA92_2 <= VAR2)||LA92_2==263) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA92_3 = input.LA(2);

                if ( (LA92_3==CLOSE_BRACE) ) {
                    alt92=1;
                }
                else if ( (LA92_3==BLANK_NODE_LABEL||(LA92_3 >= DECIMAL && LA92_3 <= DECIMAL_POSITIVE)||(LA92_3 >= DOUBLE && LA92_3 <= DOUBLE_POSITIVE)||LA92_3==FALSE||(LA92_3 >= INTEGER && LA92_3 <= INTEGER_POSITIVE)||LA92_3==IRI_REF||LA92_3==OPEN_BRACE||LA92_3==OPEN_SQ_BRACKET||(LA92_3 >= PNAME_LN && LA92_3 <= PNAME_NS)||(LA92_3 >= STRING_LITERAL1 && LA92_3 <= STRING_LITERAL_LONG2)||LA92_3==TRUE||(LA92_3 >= VAR1 && LA92_3 <= VAR2)) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }

            switch (alt92) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:510:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:510:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:510:7: s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubject3607);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());

                    pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject3611);
                    p1=propertyListNotEmpty((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p1.getTree());

                    }


                    // AST REWRITE
                    // elements: propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 510:72: -> propertyListNotEmpty
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmpty.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:7: s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubject3631);
                    s2=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNode.add(s2.getTree());

                    pushFollow(FOLLOW_propertyList_in_triplesSameSubject3635);
                    p2=propertyList((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyList.add(p2.getTree());

                    }


                    // AST REWRITE
                    // elements: s2, p2
                    // token labels: 
                    // rule labels: p2, retval, s2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"rule p2",p2!=null?p2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 511:72: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:76: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(TRIPLE2, "TRIPLE2")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:87: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SUBJECT, "SUBJECT")
                        , root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:511:105: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubject"


    public static class propertyListNotEmpty_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListNotEmpty"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:514:1: propertyListNotEmpty[CommonTree s, int t] : p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ ;
    public final IbmSparqlParser.propertyListNotEmpty_return propertyListNotEmpty(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListNotEmpty_return retval = new IbmSparqlParser.propertyListNotEmpty_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON214=null;
        IbmSparqlParser.verb_return p1 =null;

        IbmSparqlParser.verb_return p2 =null;

        IbmSparqlParser.objectList_return objectList213 =null;

        IbmSparqlParser.objectList_return objectList215 =null;


        XTree SEMICOLON214_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verb=new RewriteRuleSubtreeStream(adaptor,"rule verb");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:515:2: (p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:515:6: p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            {
            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3684);
            p1=verb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verb.add(p1.getTree());

            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty3686);
            objectList213=objectList(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectList.add(objectList213.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:516:3: ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==SEMICOLON) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:516:5: SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    {
            	    SEMICOLON214=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmpty3693); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON214);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:516:15: (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    int alt93=2;
            	    int LA93_0 = input.LA(1);

            	    if ( (LA93_0==IRI_REF||(LA93_0 >= PNAME_LN && LA93_0 <= PNAME_NS)||(LA93_0 >= VAR1 && LA93_0 <= VAR2)||LA93_0==263) ) {
            	        alt93=1;
            	    }
            	    switch (alt93) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:516:16: p2= verb objectList[$s, (CommonTree)$p2.tree, $t]
            	            {
            	            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3698);
            	            p2=verb();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_verb.add(p2.getTree());

            	            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty3700);
            	            objectList215=objectList(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_objectList.add(objectList215.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            // AST REWRITE
            // elements: objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 518:3: -> ( objectList )+
            {
                if ( !(stream_objectList.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmpty"


    public static class propertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:521:1: propertyList[CommonTree s, int t] : ( propertyListNotEmpty[$s, $t] )? ;
    public final IbmSparqlParser.propertyList_return propertyList(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyList_return retval = new IbmSparqlParser.propertyList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.propertyListNotEmpty_return propertyListNotEmpty216 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:522:2: ( ( propertyListNotEmpty[$s, $t] )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:522:7: ( propertyListNotEmpty[$s, $t] )?
            {
            root_0 = (XTree)adaptor.nil();


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:522:7: ( propertyListNotEmpty[$s, $t] )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==IRI_REF||(LA95_0 >= PNAME_LN && LA95_0 <= PNAME_NS)||(LA95_0 >= VAR1 && LA95_0 <= VAR2)||LA95_0==263) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:522:7: propertyListNotEmpty[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmpty_in_propertyList3732);
                    propertyListNotEmpty216=propertyListNotEmpty(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyListNotEmpty216.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyList"


    public static class objectList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:525:1: objectList[CommonTree s, CommonTree p, int t] : object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ ;
    public final IbmSparqlParser.objectList_return objectList(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlParser.objectList_return retval = new IbmSparqlParser.objectList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COMMA218=null;
        IbmSparqlParser.object_return object217 =null;

        IbmSparqlParser.object_return object219 =null;


        XTree COMMA218_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_object=new RewriteRuleSubtreeStream(adaptor,"rule object");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:526:2: ( object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:527:3: object ( COMMA object )*
            {
            pushFollow(FOLLOW_object_in_objectList3752);
            object217=object();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object.add(object217.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:527:10: ( COMMA object )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==COMMA) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:527:11: COMMA object
            	    {
            	    COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectList3755); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);


            	    pushFollow(FOLLOW_object_in_objectList3757);
            	    object219=object();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_object.add(object219.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            // AST REWRITE
            // elements: object, object, object
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 529:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+
            if (t==3) {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:529:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:529:35: ^( VALUE object )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_1);

                    adaptor.addChild(root_1, stream_object.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }

            else // 530:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
            if (t==2) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:530:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:530:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREDICATE, "PREDICATE")
                , root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:530:51: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_object.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 531:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+
            {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:531:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLE, "TRIPLE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:531:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(SUBJECT, "SUBJECT")
                    , root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:531:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:531:54: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectList"


    public static class objectListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:534:1: objectListPath[CommonTree s, CommonTree p, int t] : objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ ;
    public final IbmSparqlParser.objectListPath_return objectListPath(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlParser.objectListPath_return retval = new IbmSparqlParser.objectListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token COMMA221=null;
        IbmSparqlParser.objectPath_return objectPath220 =null;

        IbmSparqlParser.objectPath_return objectPath222 =null;


        XTree COMMA221_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_objectPath=new RewriteRuleSubtreeStream(adaptor,"rule objectPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:535:2: ( objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:536:3: objectPath ( COMMA objectPath )*
            {
            pushFollow(FOLLOW_objectPath_in_objectListPath3866);
            objectPath220=objectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectPath.add(objectPath220.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:536:14: ( COMMA objectPath )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:536:15: COMMA objectPath
            	    {
            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectListPath3869); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);


            	    pushFollow(FOLLOW_objectPath_in_objectListPath3871);
            	    objectPath222=objectPath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_objectPath.add(objectPath222.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            // AST REWRITE
            // elements: objectPath, objectPath, objectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 538:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+
            if (t==3) {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:538:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:538:35: ^( VALUE objectPath )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_1);

                    adaptor.addChild(root_1, stream_objectPath.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }

            else // 539:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
            if (t==2) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:539:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:539:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PREDICATE, "PREDICATE")
                , root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:539:51: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_objectPath.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 540:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+
            {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:540:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(TRIPLE, "TRIPLE")
                    , root_1);

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:540:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(SUBJECT, "SUBJECT")
                    , root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:540:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(PREDICATE, "PREDICATE")
                    , root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:540:54: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot(
                    (XTree)adaptor.create(VALUE, "VALUE")
                    , root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectListPath"


    public static class object_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:543:1: object : graphNode ;
    public final IbmSparqlParser.object_return object() throws RecognitionException {
        IbmSparqlParser.object_return retval = new IbmSparqlParser.object_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.graphNode_return graphNode223 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:544:2: ( graphNode )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:544:7: graphNode
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_graphNode_in_object3976);
            graphNode223=graphNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNode223.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object"


    public static class objectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:547:1: objectPath : graphNodePath ;
    public final IbmSparqlParser.objectPath_return objectPath() throws RecognitionException {
        IbmSparqlParser.objectPath_return retval = new IbmSparqlParser.objectPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.graphNodePath_return graphNodePath224 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:548:2: ( graphNodePath )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:548:7: graphNodePath
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_graphNodePath_in_objectPath3990);
            graphNodePath224=graphNodePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNodePath224.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objectPath"


    public static class verb_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verb"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:552:1: verb : (v= varOrIRIref | 'a' );
    public final IbmSparqlParser.verb_return verb() throws RecognitionException {
        IbmSparqlParser.verb_return retval = new IbmSparqlParser.verb_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal225=null;
        IbmSparqlParser.varOrIRIref_return v =null;


        XTree char_literal225_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:553:2: (v= varOrIRIref | 'a' )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IRI_REF||(LA98_0 >= PNAME_LN && LA98_0 <= PNAME_NS)||(LA98_0 >= VAR1 && LA98_0 <= VAR2)) ) {
                alt98=1;
            }
            else if ( (LA98_0==263) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:553:6: v= varOrIRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrIRIref_in_verb4007);
                    v=varOrIRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:554:5: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal225=(Token)match(input,263,FOLLOW_263_in_verb4016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal225_tree = 
                    (XTree)adaptor.create(char_literal225)
                    ;
                    adaptor.addChild(root_0, char_literal225_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verb"


    public static class triplesSameSubjectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesSameSubjectPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:557:1: triplesSameSubjectPath : ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlParser.triplesSameSubjectPath_return triplesSameSubjectPath() throws RecognitionException {
        IbmSparqlParser.triplesSameSubjectPath_return retval = new IbmSparqlParser.triplesSameSubjectPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        List list_p1=null;
        List list_p2=null;
        IbmSparqlParser.varOrTerm_return s1 =null;

        IbmSparqlParser.triplesNodePath_return s2 =null;

        RuleReturnScope p1 = null;
        RuleReturnScope p2 = null;
        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        RewriteRuleSubtreeStream stream_propertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListPath");
        RewriteRuleSubtreeStream stream_triplesNodePath=new RewriteRuleSubtreeStream(adaptor,"rule triplesNodePath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:558:2: ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt99=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt99=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA99_2 = input.LA(2);

                if ( (LA99_2==CLOSE_SQ_BRACKET) ) {
                    alt99=1;
                }
                else if ( (LA99_2==IRI_REF||LA99_2==OPEN_BRACE||(LA99_2 >= PNAME_LN && LA99_2 <= PNAME_NS)||(LA99_2 >= VAR1 && LA99_2 <= VAR2)||LA99_2==251||LA99_2==261||LA99_2==263) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA99_3 = input.LA(2);

                if ( (LA99_3==CLOSE_BRACE) ) {
                    alt99=1;
                }
                else if ( (LA99_3==BLANK_NODE_LABEL||(LA99_3 >= DECIMAL && LA99_3 <= DECIMAL_POSITIVE)||(LA99_3 >= DOUBLE && LA99_3 <= DOUBLE_POSITIVE)||LA99_3==FALSE||(LA99_3 >= INTEGER && LA99_3 <= INTEGER_POSITIVE)||LA99_3==IRI_REF||LA99_3==OPEN_BRACE||LA99_3==OPEN_SQ_BRACKET||(LA99_3 >= PNAME_LN && LA99_3 <= PNAME_NS)||(LA99_3 >= STRING_LITERAL1 && LA99_3 <= STRING_LITERAL_LONG2)||LA99_3==TRUE||(LA99_3 >= VAR1 && LA99_3 <= VAR2)) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:558:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:558:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:558:7: s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubjectPath4034);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());

                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4038);
                    p1=propertyListNotEmptyPath((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p1.getTree());
                    if (list_p1==null) list_p1=new ArrayList();
                    list_p1.add(p1.getTree());


                    }


                    // AST REWRITE
                    // elements: propertyListNotEmptyPath
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 558:78: -> propertyListNotEmptyPath
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:7: s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNodePath_in_triplesSameSubjectPath4058);
                    s2=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNodePath.add(s2.getTree());

                    pushFollow(FOLLOW_propertyListPath_in_triplesSameSubjectPath4062);
                    p2=propertyListPath((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListPath.add(p2.getTree());
                    if (list_p2==null) list_p2=new ArrayList();
                    list_p2.add(p2.getTree());


                    }


                    // AST REWRITE
                    // elements: s2, p2
                    // token labels: 
                    // rule labels: retval, s2
                    // token list labels: 
                    // rule list labels: p2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"token p2",list_p2);
                    root_0 = (XTree)adaptor.nil();
                    // 559:79: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:83: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(TRIPLE2, "TRIPLE2")
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:94: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SUBJECT, "SUBJECT")
                        , root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:559:112: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubjectPath"


    public static class propertyListNotEmptyPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListNotEmptyPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:562:1: propertyListNotEmptyPath[CommonTree s, int t] : (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* ;
    public final IbmSparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListNotEmptyPath_return retval = new IbmSparqlParser.propertyListNotEmptyPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SEMICOLON226=null;
        IbmSparqlParser.verbPath_return p1 =null;

        IbmSparqlParser.objectListPath_return v1 =null;

        IbmSparqlParser.verbSimple_return p2 =null;

        IbmSparqlParser.objectListPath_return v2 =null;

        IbmSparqlParser.verbPath_return p3 =null;

        IbmSparqlParser.objectList_return v3 =null;

        IbmSparqlParser.verbSimple_return p4 =null;

        IbmSparqlParser.objectList_return v4 =null;


        XTree SEMICOLON226_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_objectListPath=new RewriteRuleSubtreeStream(adaptor,"rule objectListPath");
        RewriteRuleSubtreeStream stream_verbPath=new RewriteRuleSubtreeStream(adaptor,"rule verbPath");
        RewriteRuleSubtreeStream stream_verbSimple=new RewriteRuleSubtreeStream(adaptor,"rule verbSimple");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:563:2: ( (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:563:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:563:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] |p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IRI_REF||LA100_0==OPEN_BRACE||(LA100_0 >= PNAME_LN && LA100_0 <= PNAME_NS)||LA100_0==251||LA100_0==261||LA100_0==263) ) {
                alt100=1;
            }
            else if ( ((LA100_0 >= VAR1 && LA100_0 <= VAR2)) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:563:9: p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t]
                    {
                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4112);
                    p1=verbPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbPath.add(p1.getTree());

                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4116);
                    v1=objectListPath(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v1.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:564:6: p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t]
                    {
                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4135);
                    p2=verbSimple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbSimple.add(p2.getTree());

                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4139);
                    v2=objectListPath(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v2.getTree());

                    }
                    break;

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:4: ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==SEMICOLON) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:6: SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    {
            	    SEMICOLON226=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4155); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON226);


            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:16: ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==IRI_REF||LA102_0==OPEN_BRACE||(LA102_0 >= PNAME_LN && LA102_0 <= PNAME_NS)||(LA102_0 >= VAR1 && LA102_0 <= VAR2)||LA102_0==251||LA102_0==261||LA102_0==263) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] |p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            int alt101=2;
            	            int LA101_0 = input.LA(1);

            	            if ( (LA101_0==IRI_REF||LA101_0==OPEN_BRACE||(LA101_0 >= PNAME_LN && LA101_0 <= PNAME_NS)||LA101_0==251||LA101_0==261||LA101_0==263) ) {
            	                alt101=1;
            	            }
            	            else if ( ((LA101_0 >= VAR1 && LA101_0 <= VAR2)) ) {
            	                alt101=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 101, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt101) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:566:20: p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4163);
            	                    p3=verbPath();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbPath.add(p3.getTree());

            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4167);
            	                    v3=objectList(s, (CommonTree)(p3!=null?((XTree)p3.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v3.getTree());

            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:567:21: p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4195);
            	                    p4=verbSimple();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbSimple.add(p4.getTree());

            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4199);
            	                    v4=objectList(s, (CommonTree)(p4!=null?((XTree)p4.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v4.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            // AST REWRITE
            // elements: objectListPath, objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 572:4: -> objectListPath ( objectList )*
            {
                adaptor.addChild(root_0, stream_objectListPath.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:572:23: ( objectList )*
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmptyPath"


    public static class propertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "propertyListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:575:1: propertyListPath[CommonTree s, int t] : ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? ;
    public final IbmSparqlParser.propertyListPath_return propertyListPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListPath_return retval = new IbmSparqlParser.propertyListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath227 =null;


        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:576:2: ( ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:576:7: ( propertyListNotEmptyPath[$s, $t] )?
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:576:7: ( propertyListNotEmptyPath[$s, $t] )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==IRI_REF||LA104_0==OPEN_BRACE||(LA104_0 >= PNAME_LN && LA104_0 <= PNAME_NS)||(LA104_0 >= VAR1 && LA104_0 <= VAR2)||LA104_0==251||LA104_0==261||LA104_0==263) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:576:7: propertyListNotEmptyPath[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_propertyListPath4281);
                    propertyListNotEmptyPath227=propertyListNotEmptyPath(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(propertyListNotEmptyPath227.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: propertyListNotEmptyPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 576:43: -> ( propertyListNotEmptyPath )?
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:576:47: ( propertyListNotEmptyPath )?
                if ( stream_propertyListNotEmptyPath.hasNext() ) {
                    adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                }
                stream_propertyListNotEmptyPath.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "propertyListPath"


    public static class verbPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verbPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:579:1: verbPath : path ;
    public final IbmSparqlParser.verbPath_return verbPath() throws RecognitionException {
        IbmSparqlParser.verbPath_return retval = new IbmSparqlParser.verbPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.path_return path228 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:580:2: ( path )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:580:7: path
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_path_in_verbPath4305);
            path228=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path228.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verbPath"


    public static class verbSimple_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "verbSimple"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:583:1: verbSimple : var ;
    public final IbmSparqlParser.verbSimple_return verbSimple() throws RecognitionException {
        IbmSparqlParser.verbSimple_return retval = new IbmSparqlParser.verbSimple_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.var_return var229 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:584:2: ( var )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:584:7: var
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_var_in_verbSimple4319);
            var229=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, var229.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "verbSimple"


    public static class path_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:587:1: path : pathAlternative ;
    public final IbmSparqlParser.path_return path() throws RecognitionException {
        IbmSparqlParser.path_return retval = new IbmSparqlParser.path_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.pathAlternative_return pathAlternative230 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:588:2: ( pathAlternative )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:588:7: pathAlternative
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_pathAlternative_in_path4333);
            pathAlternative230=pathAlternative();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathAlternative230.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path"


    public static class pathAlternative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathAlternative"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:591:1: pathAlternative : s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlParser.pathAlternative_return pathAlternative() throws RecognitionException {
        IbmSparqlParser.pathAlternative_return retval = new IbmSparqlParser.pathAlternative_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal231=null;
        List list_s2=null;
        IbmSparqlParser.pathSequence_return s1 =null;

        RuleReturnScope s2 = null;
        XTree char_literal231_tree=null;
        RewriteRuleTokenStream stream_264=new RewriteRuleTokenStream(adaptor,"token 264");
        RewriteRuleSubtreeStream stream_pathSequence=new RewriteRuleSubtreeStream(adaptor,"rule pathSequence");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:592:2: (s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:592:7: s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathSequence_in_pathAlternative4349);
            s1=pathSequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathSequence.add(s1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:593:10: ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==264) ) {
                alt106=1;
            }
            else if ( (LA106_0==BLANK_NODE_LABEL||LA106_0==CLOSE_BRACE||(LA106_0 >= DECIMAL && LA106_0 <= DECIMAL_POSITIVE)||(LA106_0 >= DOUBLE && LA106_0 <= DOUBLE_POSITIVE)||LA106_0==FALSE||(LA106_0 >= INTEGER && LA106_0 <= INTEGER_POSITIVE)||LA106_0==IRI_REF||LA106_0==OPEN_BRACE||LA106_0==OPEN_SQ_BRACKET||(LA106_0 >= PNAME_LN && LA106_0 <= PNAME_NS)||(LA106_0 >= STRING_LITERAL1 && LA106_0 <= STRING_LITERAL_LONG2)||LA106_0==TRUE||(LA106_0 >= VAR1 && LA106_0 <= VAR2)) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }
            switch (alt106) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:593:12: ( '|' s2+= pathSequence )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:593:12: ( '|' s2+= pathSequence )+
                    int cnt105=0;
                    loop105:
                    do {
                        int alt105=2;
                        int LA105_0 = input.LA(1);

                        if ( (LA105_0==264) ) {
                            alt105=1;
                        }


                        switch (alt105) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:593:13: '|' s2+= pathSequence
                    	    {
                    	    char_literal231=(Token)match(input,264,FOLLOW_264_in_pathAlternative4364); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_264.add(char_literal231);


                    	    pushFollow(FOLLOW_pathSequence_in_pathAlternative4368);
                    	    s2=pathSequence();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathSequence.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt105 >= 1 ) break loop105;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(105, input);
                                throw eee;
                        }
                        cnt105++;
                    } while (true);


                    // AST REWRITE
                    // elements: s2, s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 593:36: -> ^( ALT $s1 ( $s2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:593:39: ^( ALT $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(ALT, "ALT")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:594:14: 
                    {
                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 594:14: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathAlternative"


    public static class pathSequence_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathSequence"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:597:1: pathSequence : s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlParser.pathSequence_return pathSequence() throws RecognitionException {
        IbmSparqlParser.pathSequence_return retval = new IbmSparqlParser.pathSequence_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal232=null;
        List list_s2=null;
        IbmSparqlParser.pathEltOrInverse_return s1 =null;

        RuleReturnScope s2 = null;
        XTree char_literal232_tree=null;
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleSubtreeStream stream_pathEltOrInverse=new RewriteRuleSubtreeStream(adaptor,"rule pathEltOrInverse");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:598:2: (s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:598:7: s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4419);
            s1=pathEltOrInverse();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:599:9: ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==256) ) {
                alt108=1;
            }
            else if ( (LA108_0==BLANK_NODE_LABEL||LA108_0==CLOSE_BRACE||(LA108_0 >= DECIMAL && LA108_0 <= DECIMAL_POSITIVE)||(LA108_0 >= DOUBLE && LA108_0 <= DOUBLE_POSITIVE)||LA108_0==FALSE||(LA108_0 >= INTEGER && LA108_0 <= INTEGER_POSITIVE)||LA108_0==IRI_REF||LA108_0==OPEN_BRACE||LA108_0==OPEN_SQ_BRACKET||(LA108_0 >= PNAME_LN && LA108_0 <= PNAME_NS)||(LA108_0 >= STRING_LITERAL1 && LA108_0 <= STRING_LITERAL_LONG2)||LA108_0==TRUE||(LA108_0 >= VAR1 && LA108_0 <= VAR2)||LA108_0==264) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:599:11: ( '/' s2+= pathEltOrInverse )+
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:599:11: ( '/' s2+= pathEltOrInverse )+
                    int cnt107=0;
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==256) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:599:12: '/' s2+= pathEltOrInverse
                    	    {
                    	    char_literal232=(Token)match(input,256,FOLLOW_256_in_pathSequence4433); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_256.add(char_literal232);


                    	    pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4437);
                    	    s2=pathEltOrInverse();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt107 >= 1 ) break loop107;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(107, input);
                                throw eee;
                        }
                        cnt107++;
                    } while (true);


                    // AST REWRITE
                    // elements: s2, s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 599:39: -> ^( SEQ $s1 ( $s2)+ )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:599:42: ^( SEQ $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(SEQ, "SEQ")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());

                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:600:13: 
                    {
                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: s1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 600:13: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathSequence"


    public static class pathElt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathElt"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:603:1: pathElt : pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) ;
    public final IbmSparqlParser.pathElt_return pathElt() throws RecognitionException {
        IbmSparqlParser.pathElt_return retval = new IbmSparqlParser.pathElt_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.pathPrimary_return pathPrimary233 =null;

        IbmSparqlParser.pathMod_return pathMod234 =null;


        RewriteRuleSubtreeStream stream_pathPrimary=new RewriteRuleSubtreeStream(adaptor,"rule pathPrimary");
        RewriteRuleSubtreeStream stream_pathMod=new RewriteRuleSubtreeStream(adaptor,"rule pathMod");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:604:2: ( pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:604:6: pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            {
            pushFollow(FOLLOW_pathPrimary_in_pathElt4484);
            pathPrimary233=pathPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathPrimary.add(pathPrimary233.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:605:9: ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0 >= 253 && LA109_0 <= 254)||LA109_0==260) ) {
                alt109=1;
            }
            else if ( (LA109_0==BLANK_NODE_LABEL||LA109_0==CLOSE_BRACE||(LA109_0 >= DECIMAL && LA109_0 <= DECIMAL_POSITIVE)||(LA109_0 >= DOUBLE && LA109_0 <= DOUBLE_POSITIVE)||LA109_0==FALSE||(LA109_0 >= INTEGER && LA109_0 <= INTEGER_POSITIVE)||LA109_0==IRI_REF||LA109_0==OPEN_BRACE||LA109_0==OPEN_SQ_BRACKET||(LA109_0 >= PNAME_LN && LA109_0 <= PNAME_NS)||(LA109_0 >= STRING_LITERAL1 && LA109_0 <= STRING_LITERAL_LONG2)||LA109_0==TRUE||(LA109_0 >= VAR1 && LA109_0 <= VAR2)||LA109_0==256||LA109_0==264) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:605:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:605:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:605:12: pathMod
                    {
                    pushFollow(FOLLOW_pathMod_in_pathElt4498);
                    pathMod234=pathMod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathMod.add(pathMod234.getTree());

                    // AST REWRITE
                    // elements: pathPrimary, pathMod
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 605:20: -> ^( ELT pathPrimary pathMod )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:605:23: ^( ELT pathPrimary pathMod )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(ELT, "ELT")
                        , root_1);

                        adaptor.addChild(root_1, stream_pathPrimary.nextTree());

                        adaptor.addChild(root_1, stream_pathMod.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:606:10: 
                    {
                    // AST REWRITE
                    // elements: pathPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 606:10: -> pathPrimary
                    {
                        adaptor.addChild(root_0, stream_pathPrimary.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathElt"


    public static class pathEltOrInverse_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathEltOrInverse"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:609:1: pathEltOrInverse : ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) );
    public final IbmSparqlParser.pathEltOrInverse_return pathEltOrInverse() throws RecognitionException {
        IbmSparqlParser.pathEltOrInverse_return retval = new IbmSparqlParser.pathEltOrInverse_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal236=null;
        IbmSparqlParser.pathElt_return pathElt235 =null;

        IbmSparqlParser.pathElt_return pathElt237 =null;


        XTree char_literal236_tree=null;
        RewriteRuleTokenStream stream_261=new RewriteRuleTokenStream(adaptor,"token 261");
        RewriteRuleSubtreeStream stream_pathElt=new RewriteRuleSubtreeStream(adaptor,"rule pathElt");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:2: ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==IRI_REF||LA110_0==OPEN_BRACE||(LA110_0 >= PNAME_LN && LA110_0 <= PNAME_NS)||LA110_0==251||LA110_0==263) ) {
                alt110=1;
            }
            else if ( (LA110_0==261) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:7: pathElt
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4540);
                    pathElt235=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathElt235.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:17: ( '^' pathElt -> ^( INV pathElt ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:17: ( '^' pathElt -> ^( INV pathElt ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:18: '^' pathElt
                    {
                    char_literal236=(Token)match(input,261,FOLLOW_261_in_pathEltOrInverse4545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_261.add(char_literal236);


                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4547);
                    pathElt237=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathElt.add(pathElt237.getTree());

                    // AST REWRITE
                    // elements: pathElt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 610:30: -> ^( INV pathElt )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:610:33: ^( INV pathElt )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, stream_pathElt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathEltOrInverse"


    public static class pathMod_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathMod"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:613:1: pathMod : ( '*' | '?' | '+' );
    public final IbmSparqlParser.pathMod_return pathMod() throws RecognitionException {
        IbmSparqlParser.pathMod_return retval = new IbmSparqlParser.pathMod_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token set238=null;

        XTree set238_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:614:2: ( '*' | '?' | '+' )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:
            {
            root_0 = (XTree)adaptor.nil();


            set238=(Token)input.LT(1);

            if ( (input.LA(1) >= 253 && input.LA(1) <= 254)||input.LA(1)==260 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (XTree)adaptor.create(set238)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathMod"


    public static class pathPrimary_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathPrimary"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:617:1: pathPrimary : ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE ! path CLOSE_BRACE !);
    public final IbmSparqlParser.pathPrimary_return pathPrimary() throws RecognitionException {
        IbmSparqlParser.pathPrimary_return retval = new IbmSparqlParser.pathPrimary_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal240=null;
        Token char_literal241=null;
        Token OPEN_BRACE243=null;
        Token CLOSE_BRACE245=null;
        IbmSparqlParser.iRIref_return iRIref239 =null;

        IbmSparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet242 =null;

        IbmSparqlParser.path_return path244 =null;


        XTree char_literal240_tree=null;
        XTree char_literal241_tree=null;
        XTree OPEN_BRACE243_tree=null;
        XTree CLOSE_BRACE245_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:618:2: ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE ! path CLOSE_BRACE !)
            int alt111=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt111=1;
                }
                break;
            case 263:
                {
                alt111=2;
                }
                break;
            case 251:
                {
                alt111=3;
                }
                break;
            case OPEN_BRACE:
                {
                alt111=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:618:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_pathPrimary4593);
                    iRIref239=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref239.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:618:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal240=(Token)match(input,263,FOLLOW_263_in_pathPrimary4597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = 
                    (XTree)adaptor.create(char_literal240)
                    ;
                    adaptor.addChild(root_0, char_literal240_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:618:22: '!' pathNegatedPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal241=(Token)match(input,251,FOLLOW_251_in_pathPrimary4601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal241_tree = 
                    (XTree)adaptor.create(char_literal241)
                    ;
                    adaptor.addChild(root_0, char_literal241_tree);
                    }

                    pushFollow(FOLLOW_pathNegatedPropertySet_in_pathPrimary4603);
                    pathNegatedPropertySet242=pathNegatedPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathNegatedPropertySet242.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:618:51: OPEN_BRACE ! path CLOSE_BRACE !
                    {
                    root_0 = (XTree)adaptor.nil();


                    OPEN_BRACE243=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathPrimary4607); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_in_pathPrimary4610);
                    path244=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path244.getTree());

                    CLOSE_BRACE245=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathPrimary4612); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathPrimary"


    public static class pathNegatedPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathNegatedPropertySet"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:621:1: pathNegatedPropertySet : ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE );
    public final IbmSparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet() throws RecognitionException {
        IbmSparqlParser.pathNegatedPropertySet_return retval = new IbmSparqlParser.pathNegatedPropertySet_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE247=null;
        Token char_literal249=null;
        Token CLOSE_BRACE251=null;
        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet246 =null;

        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet248 =null;

        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet250 =null;


        XTree OPEN_BRACE247_tree=null;
        XTree char_literal249_tree=null;
        XTree CLOSE_BRACE251_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:2: ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==IRI_REF||(LA114_0 >= PNAME_LN && LA114_0 <= PNAME_NS)||LA114_0==261||LA114_0==263) ) {
                alt114=1;
            }
            else if ( (LA114_0==OPEN_BRACE) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:7: pathOneInPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4627);
                    pathOneInPropertySet246=pathOneInPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet246.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:30: OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();


                    OPEN_BRACE247=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPEN_BRACE247_tree = 
                    (XTree)adaptor.create(OPEN_BRACE247)
                    ;
                    adaptor.addChild(root_0, OPEN_BRACE247_tree);
                    }

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:41: ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==IRI_REF||(LA113_0 >= PNAME_LN && LA113_0 <= PNAME_NS)||LA113_0==261||LA113_0==263) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:43: pathOneInPropertySet ( '|' pathOneInPropertySet )*
                            {
                            pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4635);
                            pathOneInPropertySet248=pathOneInPropertySet();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet248.getTree());

                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:64: ( '|' pathOneInPropertySet )*
                            loop112:
                            do {
                                int alt112=2;
                                int LA112_0 = input.LA(1);

                                if ( (LA112_0==264) ) {
                                    alt112=1;
                                }


                                switch (alt112) {
                            	case 1 :
                            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:622:66: '|' pathOneInPropertySet
                            	    {
                            	    char_literal249=(Token)match(input,264,FOLLOW_264_in_pathNegatedPropertySet4639); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal249_tree = 
                            	    (XTree)adaptor.create(char_literal249)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal249_tree);
                            	    }

                            	    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4641);
                            	    pathOneInPropertySet250=pathOneInPropertySet();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet250.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop112;
                                }
                            } while (true);


                            }
                            break;

                    }


                    CLOSE_BRACE251=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLOSE_BRACE251_tree = 
                    (XTree)adaptor.create(CLOSE_BRACE251)
                    ;
                    adaptor.addChild(root_0, CLOSE_BRACE251_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathNegatedPropertySet"


    public static class pathOneInPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pathOneInPropertySet"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:625:1: pathOneInPropertySet : ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) );
    public final IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet() throws RecognitionException {
        IbmSparqlParser.pathOneInPropertySet_return retval = new IbmSparqlParser.pathOneInPropertySet_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal253=null;
        Token char_literal254=null;
        Token char_literal256=null;
        Token char_literal257=null;
        IbmSparqlParser.iRIref_return iRIref252 =null;

        IbmSparqlParser.iRIref_return iRIref255 =null;


        XTree char_literal253_tree=null;
        XTree char_literal254_tree=null;
        XTree char_literal256_tree=null;
        XTree char_literal257_tree=null;
        RewriteRuleTokenStream stream_261=new RewriteRuleTokenStream(adaptor,"token 261");
        RewriteRuleTokenStream stream_263=new RewriteRuleTokenStream(adaptor,"token 263");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:2: ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) )
            int alt115=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt115=1;
                }
                break;
            case 263:
                {
                alt115=2;
                }
                break;
            case 261:
                {
                int LA115_3 = input.LA(2);

                if ( (LA115_3==263) ) {
                    alt115=4;
                }
                else if ( (LA115_3==IRI_REF||(LA115_3 >= PNAME_LN && LA115_3 <= PNAME_NS)) ) {
                    alt115=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }

            switch (alt115) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4663);
                    iRIref252=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref252.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal253=(Token)match(input,263,FOLLOW_263_in_pathOneInPropertySet4667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal253_tree = 
                    (XTree)adaptor.create(char_literal253)
                    ;
                    adaptor.addChild(root_0, char_literal253_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:22: ( '^' iRIref -> ^( INV iRIref ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:22: ( '^' iRIref -> ^( INV iRIref ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:23: '^' iRIref
                    {
                    char_literal254=(Token)match(input,261,FOLLOW_261_in_pathOneInPropertySet4672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_261.add(char_literal254);


                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4674);
                    iRIref255=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iRIref.add(iRIref255.getTree());

                    // AST REWRITE
                    // elements: iRIref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 626:34: -> ^( INV iRIref )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:37: ^( INV iRIref )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, stream_iRIref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:55: ( '^' 'a' -> ^( INV 'a' ) )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:55: ( '^' 'a' -> ^( INV 'a' ) )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:56: '^' 'a'
                    {
                    char_literal256=(Token)match(input,261,FOLLOW_261_in_pathOneInPropertySet4689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_261.add(char_literal256);


                    char_literal257=(Token)match(input,263,FOLLOW_263_in_pathOneInPropertySet4691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_263.add(char_literal257);


                    // AST REWRITE
                    // elements: 263
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 626:64: -> ^( INV 'a' )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:626:67: ^( INV 'a' )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(INV, "INV")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_263.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pathOneInPropertySet"


    public static class integer_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:629:1: integer : INTEGER ;
    public final IbmSparqlParser.integer_return integer() throws RecognitionException {
        IbmSparqlParser.integer_return retval = new IbmSparqlParser.integer_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER258=null;

        XTree INTEGER258_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:630:2: ( INTEGER )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:630:7: INTEGER
            {
            root_0 = (XTree)adaptor.nil();


            INTEGER258=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_integer4714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER258_tree = 
            (XTree)adaptor.create(INTEGER258)
            ;
            adaptor.addChild(root_0, INTEGER258_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "integer"


    public static class triplesNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:633:1: triplesNode : (c= collection |p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlParser.triplesNode_return triplesNode() throws RecognitionException {
        IbmSparqlParser.triplesNode_return retval = new IbmSparqlParser.triplesNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.collection_return c =null;

        IbmSparqlParser.blankNodePropertyList_return p =null;


        RewriteRuleSubtreeStream stream_blankNodePropertyList=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyList");
        RewriteRuleSubtreeStream stream_collection=new RewriteRuleSubtreeStream(adaptor,"rule collection");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:634:2: ( (c= collection |p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:634:7: (c= collection |p= blankNodePropertyList )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:634:7: (c= collection |p= blankNodePropertyList )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==OPEN_BRACE) ) {
                alt116=1;
            }
            else if ( (LA116_0==OPEN_SQ_BRACKET) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:634:9: c= collection
                    {
                    pushFollow(FOLLOW_collection_in_triplesNode4732);
                    c=collection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collection.add(c.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:635:6: p= blankNodePropertyList
                    {
                    pushFollow(FOLLOW_blankNodePropertyList_in_triplesNode4741);
                    p=blankNodePropertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyList.add(p.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: c, p
            // token labels: 
            // rule labels: p, c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 637:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:637:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:637:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:637:27: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesNode"


    public static class triplesNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "triplesNodePath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:640:1: triplesNodePath : (c= collectionPath |p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlParser.triplesNodePath_return triplesNodePath() throws RecognitionException {
        IbmSparqlParser.triplesNodePath_return retval = new IbmSparqlParser.triplesNodePath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.collectionPath_return c =null;

        IbmSparqlParser.blankNodePropertyListPath_return p =null;


        RewriteRuleSubtreeStream stream_collectionPath=new RewriteRuleSubtreeStream(adaptor,"rule collectionPath");
        RewriteRuleSubtreeStream stream_blankNodePropertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyListPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:641:2: ( (c= collectionPath |p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:641:7: (c= collectionPath |p= blankNodePropertyListPath )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:641:7: (c= collectionPath |p= blankNodePropertyListPath )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==OPEN_BRACE) ) {
                alt117=1;
            }
            else if ( (LA117_0==OPEN_SQ_BRACKET) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:641:9: c= collectionPath
                    {
                    pushFollow(FOLLOW_collectionPath_in_triplesNodePath4781);
                    c=collectionPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collectionPath.add(c.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:642:6: p= blankNodePropertyListPath
                    {
                    pushFollow(FOLLOW_blankNodePropertyListPath_in_triplesNodePath4793);
                    p=blankNodePropertyListPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyListPath.add(p.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: p, c
            // token labels: 
            // rule labels: p, c, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 644:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:644:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE")
                , root_1);

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:644:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:644:27: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "triplesNodePath"


    public static class blankNodePropertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNodePropertyList"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:647:1: blankNodePropertyList : OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlParser.blankNodePropertyList_return blankNodePropertyList() throws RecognitionException {
        IbmSparqlParser.blankNodePropertyList_return retval = new IbmSparqlParser.blankNodePropertyList_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET259=null;
        Token CLOSE_SQ_BRACKET260=null;
        IbmSparqlParser.propertyListNotEmpty_return p =null;


        XTree OPEN_SQ_BRACKET259_tree=null;
        XTree CLOSE_SQ_BRACKET260_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:648:2: ( OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:648:7: OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET259=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList4830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET259);


            pushFollow(FOLLOW_propertyListNotEmpty_in_blankNodePropertyList4834);
            p=propertyListNotEmpty(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p.getTree());

            CLOSE_SQ_BRACKET260=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList4837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET260);


            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: p, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 650:3: -> ^( PROPERTY_LIST $p)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:650:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyList"


    public static class blankNodePropertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNodePropertyListPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:653:1: blankNodePropertyListPath : OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlParser.blankNodePropertyListPath_return blankNodePropertyListPath() throws RecognitionException {
        IbmSparqlParser.blankNodePropertyListPath_return retval = new IbmSparqlParser.blankNodePropertyListPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET261=null;
        Token CLOSE_SQ_BRACKET262=null;
        IbmSparqlParser.propertyListNotEmptyPath_return p =null;


        XTree OPEN_SQ_BRACKET261_tree=null;
        XTree CLOSE_SQ_BRACKET262_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:654:2: ( OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:654:7: OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET261=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath4866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET261);


            pushFollow(FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath4870);
            p=propertyListNotEmptyPath(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p.getTree());

            CLOSE_SQ_BRACKET262=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath4873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET262);


            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: p, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 656:3: -> ^( PROPERTY_LIST $p)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:656:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyListPath"


    public static class collection_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collection"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:659:1: collection : ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlParser.collection_return collection() throws RecognitionException {
        IbmSparqlParser.collection_return retval = new IbmSparqlParser.collection_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE263=null;
        Token CLOSE_BRACE264=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE263_tree=null;
        XTree CLOSE_BRACE264_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:2: ( ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:7: OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE
            {
            OPEN_BRACE263=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection4902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE263);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:19: (g+= graphNode )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==BLANK_NODE_LABEL||(LA118_0 >= DECIMAL && LA118_0 <= DECIMAL_POSITIVE)||(LA118_0 >= DOUBLE && LA118_0 <= DOUBLE_POSITIVE)||LA118_0==FALSE||(LA118_0 >= INTEGER && LA118_0 <= INTEGER_POSITIVE)||LA118_0==IRI_REF||LA118_0==OPEN_BRACE||LA118_0==OPEN_SQ_BRACKET||(LA118_0 >= PNAME_LN && LA118_0 <= PNAME_NS)||(LA118_0 >= STRING_LITERAL1 && LA118_0 <= STRING_LITERAL_LONG2)||LA118_0==TRUE||(LA118_0 >= VAR1 && LA118_0 <= VAR2)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:660:19: g+= graphNode
            	    {
            	    pushFollow(FOLLOW_graphNode_in_collection4906);
            	    g=graphNode();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNode.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);


            CLOSE_BRACE264=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection4909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE264);


            }


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 662:3: -> ^( COLLECTION ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:662:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(COLLECTION, "COLLECTION")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collection"


    public static class collectionPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collectionPath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:665:1: collectionPath : ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlParser.collectionPath_return collectionPath() throws RecognitionException {
        IbmSparqlParser.collectionPath_return retval = new IbmSparqlParser.collectionPath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE265=null;
        Token CLOSE_BRACE266=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE265_tree=null;
        XTree CLOSE_BRACE266_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_graphNodePath=new RewriteRuleSubtreeStream(adaptor,"rule graphNodePath");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:2: ( ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:7: OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE
            {
            OPEN_BRACE265=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collectionPath4941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE265);


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:19: (g+= graphNodePath )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==BLANK_NODE_LABEL||(LA119_0 >= DECIMAL && LA119_0 <= DECIMAL_POSITIVE)||(LA119_0 >= DOUBLE && LA119_0 <= DOUBLE_POSITIVE)||LA119_0==FALSE||(LA119_0 >= INTEGER && LA119_0 <= INTEGER_POSITIVE)||LA119_0==IRI_REF||LA119_0==OPEN_BRACE||LA119_0==OPEN_SQ_BRACKET||(LA119_0 >= PNAME_LN && LA119_0 <= PNAME_NS)||(LA119_0 >= STRING_LITERAL1 && LA119_0 <= STRING_LITERAL_LONG2)||LA119_0==TRUE||(LA119_0 >= VAR1 && LA119_0 <= VAR2)) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:666:19: g+= graphNodePath
            	    {
            	    pushFollow(FOLLOW_graphNodePath_in_collectionPath4945);
            	    g=graphNodePath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNodePath.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            CLOSE_BRACE266=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collectionPath4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE266);


            }


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 668:3: -> ^( COLLECTION ( $g)+ )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:668:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(COLLECTION, "COLLECTION")
                , root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collectionPath"


    public static class graphNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:671:1: graphNode : ( varOrTerm | triplesNode );
    public final IbmSparqlParser.graphNode_return graphNode() throws RecognitionException {
        IbmSparqlParser.graphNode_return retval = new IbmSparqlParser.graphNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return varOrTerm267 =null;

        IbmSparqlParser.triplesNode_return triplesNode268 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:672:2: ( varOrTerm | triplesNode )
            int alt120=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt120=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA120_2 = input.LA(2);

                if ( (LA120_2==CLOSE_SQ_BRACKET) ) {
                    alt120=1;
                }
                else if ( (LA120_2==IRI_REF||(LA120_2 >= PNAME_LN && LA120_2 <= PNAME_NS)||(LA120_2 >= VAR1 && LA120_2 <= VAR2)||LA120_2==263) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA120_3 = input.LA(2);

                if ( (LA120_3==CLOSE_BRACE) ) {
                    alt120=1;
                }
                else if ( (LA120_3==BLANK_NODE_LABEL||(LA120_3 >= DECIMAL && LA120_3 <= DECIMAL_POSITIVE)||(LA120_3 >= DOUBLE && LA120_3 <= DOUBLE_POSITIVE)||LA120_3==FALSE||(LA120_3 >= INTEGER && LA120_3 <= INTEGER_POSITIVE)||LA120_3==IRI_REF||LA120_3==OPEN_BRACE||LA120_3==OPEN_SQ_BRACKET||(LA120_3 >= PNAME_LN && LA120_3 <= PNAME_NS)||(LA120_3 >= STRING_LITERAL1 && LA120_3 <= STRING_LITERAL_LONG2)||LA120_3==TRUE||(LA120_3 >= VAR1 && LA120_3 <= VAR2)) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }

            switch (alt120) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:672:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrTerm_in_graphNode4980);
                    varOrTerm267=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm267.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:672:19: triplesNode
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_triplesNode_in_graphNode4984);
                    triplesNode268=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNode268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphNode"


    public static class graphNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphNodePath"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:675:1: graphNodePath : ( varOrTerm | triplesNodePath );
    public final IbmSparqlParser.graphNodePath_return graphNodePath() throws RecognitionException {
        IbmSparqlParser.graphNodePath_return retval = new IbmSparqlParser.graphNodePath_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return varOrTerm269 =null;

        IbmSparqlParser.triplesNodePath_return triplesNodePath270 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:676:2: ( varOrTerm | triplesNodePath )
            int alt121=2;
            switch ( input.LA(1) ) {
            case BLANK_NODE_LABEL:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case FALSE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case TRUE:
            case VAR1:
            case VAR2:
                {
                alt121=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA121_2 = input.LA(2);

                if ( (LA121_2==CLOSE_SQ_BRACKET) ) {
                    alt121=1;
                }
                else if ( (LA121_2==IRI_REF||LA121_2==OPEN_BRACE||(LA121_2 >= PNAME_LN && LA121_2 <= PNAME_NS)||(LA121_2 >= VAR1 && LA121_2 <= VAR2)||LA121_2==251||LA121_2==261||LA121_2==263) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA121_3 = input.LA(2);

                if ( (LA121_3==CLOSE_BRACE) ) {
                    alt121=1;
                }
                else if ( (LA121_3==BLANK_NODE_LABEL||(LA121_3 >= DECIMAL && LA121_3 <= DECIMAL_POSITIVE)||(LA121_3 >= DOUBLE && LA121_3 <= DOUBLE_POSITIVE)||LA121_3==FALSE||(LA121_3 >= INTEGER && LA121_3 <= INTEGER_POSITIVE)||LA121_3==IRI_REF||LA121_3==OPEN_BRACE||LA121_3==OPEN_SQ_BRACKET||(LA121_3 >= PNAME_LN && LA121_3 <= PNAME_NS)||(LA121_3 >= STRING_LITERAL1 && LA121_3 <= STRING_LITERAL_LONG2)||LA121_3==TRUE||(LA121_3 >= VAR1 && LA121_3 <= VAR2)) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:676:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_varOrTerm_in_graphNodePath4998);
                    varOrTerm269=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm269.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:676:19: triplesNodePath
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_triplesNodePath_in_graphNodePath5002);
                    triplesNodePath270=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNodePath270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphNodePath"


    public static class varOrTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrTerm"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:680:1: varOrTerm : ( var | graphTerm );
    public final IbmSparqlParser.varOrTerm_return varOrTerm() throws RecognitionException {
        IbmSparqlParser.varOrTerm_return retval = new IbmSparqlParser.varOrTerm_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.var_return var271 =null;

        IbmSparqlParser.graphTerm_return graphTerm272 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:681:2: ( var | graphTerm )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( ((LA122_0 >= VAR1 && LA122_0 <= VAR2)) ) {
                alt122=1;
            }
            else if ( (LA122_0==BLANK_NODE_LABEL||(LA122_0 >= DECIMAL && LA122_0 <= DECIMAL_POSITIVE)||(LA122_0 >= DOUBLE && LA122_0 <= DOUBLE_POSITIVE)||LA122_0==FALSE||(LA122_0 >= INTEGER && LA122_0 <= INTEGER_POSITIVE)||LA122_0==IRI_REF||LA122_0==OPEN_BRACE||LA122_0==OPEN_SQ_BRACKET||(LA122_0 >= PNAME_LN && LA122_0 <= PNAME_NS)||(LA122_0 >= STRING_LITERAL1 && LA122_0 <= STRING_LITERAL_LONG2)||LA122_0==TRUE) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:681:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_varOrTerm5017);
                    var271=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var271.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:681:13: graphTerm
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_graphTerm_in_varOrTerm5021);
                    graphTerm272=graphTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphTerm272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varOrTerm"


    public static class varOrIRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrIRIref"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:684:1: varOrIRIref : ( var | iRIref );
    public final IbmSparqlParser.varOrIRIref_return varOrIRIref() throws RecognitionException {
        IbmSparqlParser.varOrIRIref_return retval = new IbmSparqlParser.varOrIRIref_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.var_return var273 =null;

        IbmSparqlParser.iRIref_return iRIref274 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:685:2: ( var | iRIref )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( ((LA123_0 >= VAR1 && LA123_0 <= VAR2)) ) {
                alt123=1;
            }
            else if ( (LA123_0==IRI_REF||(LA123_0 >= PNAME_LN && LA123_0 <= PNAME_NS)) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:685:7: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_varOrIRIref5035);
                    var273=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var273.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:685:13: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_varOrIRIref5039);
                    iRIref274=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varOrIRIref"


    public static class var_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:688:1: var : (v1= VAR1 -> ^( VAR $v1) |v2= VAR2 -> ^( VAR $v2) );
    public final IbmSparqlParser.var_return var() throws RecognitionException {
        IbmSparqlParser.var_return retval = new IbmSparqlParser.var_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token v1=null;
        Token v2=null;

        XTree v1_tree=null;
        XTree v2_tree=null;
        RewriteRuleTokenStream stream_VAR1=new RewriteRuleTokenStream(adaptor,"token VAR1");
        RewriteRuleTokenStream stream_VAR2=new RewriteRuleTokenStream(adaptor,"token VAR2");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:689:2: (v1= VAR1 -> ^( VAR $v1) |v2= VAR2 -> ^( VAR $v2) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==VAR1) ) {
                alt124=1;
            }
            else if ( (LA124_0==VAR2) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:689:7: v1= VAR1
                    {
                    v1=(Token)match(input,VAR1,FOLLOW_VAR1_in_var5055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR1.add(v1);


                    // AST REWRITE
                    // elements: v1
                    // token labels: v1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v1=new RewriteRuleTokenStream(adaptor,"token v1",v1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 689:18: -> ^( VAR $v1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:689:22: ^( VAR $v1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(VAR, "VAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_v1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:690:7: v2= VAR2
                    {
                    v2=(Token)match(input,VAR2,FOLLOW_VAR2_in_var5078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR2.add(v2);


                    // AST REWRITE
                    // elements: v2
                    // token labels: v2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v2=new RewriteRuleTokenStream(adaptor,"token v2",v2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 690:18: -> ^( VAR $v2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:690:22: ^( VAR $v2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(VAR, "VAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_v2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var"


    public static class graphTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "graphTerm"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:693:1: graphTerm : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil );
    public final IbmSparqlParser.graphTerm_return graphTerm() throws RecognitionException {
        IbmSparqlParser.graphTerm_return retval = new IbmSparqlParser.graphTerm_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.iRIref_return iRIref275 =null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral276 =null;

        IbmSparqlParser.numericLiteral_return numericLiteral277 =null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral278 =null;

        IbmSparqlParser.blankNode_return blankNode279 =null;

        IbmSparqlParser.nil_return nil280 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil )
            int alt125=6;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt125=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt125=2;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt125=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt125=4;
                }
                break;
            case BLANK_NODE_LABEL:
            case OPEN_SQ_BRACKET:
                {
                alt125=5;
                }
                break;
            case OPEN_BRACE:
                {
                alt125=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIref_in_graphTerm5105);
                    iRIref275=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref275.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_graphTerm5109);
                    rDFLiteral276=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral276.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_graphTerm5113);
                    numericLiteral277=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral277.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_graphTerm5117);
                    booleanLiteral278=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral278.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:63: blankNode
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_blankNode_in_graphTerm5121);
                    blankNode279=blankNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blankNode279.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:694:75: nil
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_nil_in_graphTerm5125);
                    nil280=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nil280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "graphTerm"


    public static class expression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:697:1: expression : conditionalOrExpression ;
    public final IbmSparqlParser.expression_return expression() throws RecognitionException {
        IbmSparqlParser.expression_return retval = new IbmSparqlParser.expression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.conditionalOrExpression_return conditionalOrExpression281 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:698:2: ( conditionalOrExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:698:7: conditionalOrExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_conditionalOrExpression_in_expression5139);
            conditionalOrExpression281=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression281.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalOrExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:701:1: conditionalOrExpression : c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1;
    public final IbmSparqlParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        IbmSparqlParser.conditionalOrExpression_return retval = new IbmSparqlParser.conditionalOrExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOGICAL_OR282=null;
        List list_c2=null;
        IbmSparqlParser.conditionalAndExpression_return c1 =null;

        RuleReturnScope c2 = null;
        XTree LOGICAL_OR282_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_OR=new RewriteRuleTokenStream(adaptor,"token LOGICAL_OR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        boolean isOR=false;
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:703:2: (c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:703:7: c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5161);
            c1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:703:35: ( LOGICAL_OR c2+= conditionalAndExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==LOGICAL_OR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:703:37: LOGICAL_OR c2+= conditionalAndExpression
            	    {
            	    LOGICAL_OR282=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_conditionalOrExpression5165); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_OR.add(LOGICAL_OR282);


            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5169);
            	    c2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c2.getTree());
            	    if (list_c2==null) list_c2=new ArrayList();
            	    list_c2.add(c2.getTree());


            	    if ( state.backtracking==0 ) {isOR=true;}

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            // AST REWRITE
            // elements: c1, c1, c2, LOGICAL_OR
            // token labels: 
            // rule labels: c1, retval
            // token list labels: 
            // rule list labels: c2
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"token c2",list_c2);
            root_0 = (XTree)adaptor.nil();
            // 705:3: -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ )
            if (isOR==true) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:705:22: ^( LOGICAL_OR $c1 ( $c2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LOGICAL_OR.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_c1.nextTree());

                if ( !(stream_c2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_c2.hasNext() ) {
                    adaptor.addChild(root_1, stream_c2.nextTree());

                }
                stream_c2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 706:3: -> $c1
            {
                adaptor.addChild(root_0, stream_c1.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"


    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalAndExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:709:1: conditionalAndExpression : v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1;
    public final IbmSparqlParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        IbmSparqlParser.conditionalAndExpression_return retval = new IbmSparqlParser.conditionalAndExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LOGICAL_AND283=null;
        List list_v2=null;
        IbmSparqlParser.valueLogical_return v1 =null;

        RuleReturnScope v2 = null;
        XTree LOGICAL_AND283_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_AND=new RewriteRuleTokenStream(adaptor,"token LOGICAL_AND");
        RewriteRuleSubtreeStream stream_valueLogical=new RewriteRuleSubtreeStream(adaptor,"rule valueLogical");
        boolean isAnd=false;
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:711:2: (v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:711:7: v1= valueLogical ( LOGICAL_AND v2+= valueLogical )*
            {
            pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5229);
            v1=valueLogical();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_valueLogical.add(v1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:711:23: ( LOGICAL_AND v2+= valueLogical )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LOGICAL_AND) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:711:25: LOGICAL_AND v2+= valueLogical
            	    {
            	    LOGICAL_AND283=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_conditionalAndExpression5233); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_AND.add(LOGICAL_AND283);


            	    pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5237);
            	    v2=valueLogical();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_valueLogical.add(v2.getTree());
            	    if (list_v2==null) list_v2=new ArrayList();
            	    list_v2.add(v2.getTree());


            	    if ( state.backtracking==0 ) {isAnd=true;}

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // AST REWRITE
            // elements: v1, v1, v2, LOGICAL_AND
            // token labels: 
            // rule labels: v1, retval
            // token list labels: 
            // rule list labels: v2
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"rule v1",v1!=null?v1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v2=new RewriteRuleSubtreeStream(adaptor,"token v2",list_v2);
            root_0 = (XTree)adaptor.nil();
            // 713:3: -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ )
            if (isAnd==true) {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:713:23: ^( LOGICAL_AND $v1 ( $v2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_LOGICAL_AND.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_v1.nextTree());

                if ( !(stream_v2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_v2.hasNext() ) {
                    adaptor.addChild(root_1, stream_v2.nextTree());

                }
                stream_v2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 714:3: -> $v1
            {
                adaptor.addChild(root_0, stream_v1.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"


    public static class valueLogical_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "valueLogical"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:717:1: valueLogical : relationalExpression ;
    public final IbmSparqlParser.valueLogical_return valueLogical() throws RecognitionException {
        IbmSparqlParser.valueLogical_return retval = new IbmSparqlParser.valueLogical_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.relationalExpression_return relationalExpression284 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:718:2: ( relationalExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:718:7: relationalExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_relationalExpression_in_valueLogical5288);
            relationalExpression284=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression284.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "valueLogical"


    public static class relationalExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:721:1: relationalExpression : n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )? ;
    public final IbmSparqlParser.relationalExpression_return relationalExpression() throws RecognitionException {
        IbmSparqlParser.relationalExpression_return retval = new IbmSparqlParser.relationalExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal285=null;
        Token string_literal286=null;
        Token LT287=null;
        Token char_literal288=null;
        Token LTE289=null;
        Token string_literal290=null;
        Token IN291=null;
        Token NOT292=null;
        Token IN293=null;
        IbmSparqlParser.numericExpression_return n1 =null;

        IbmSparqlParser.numericExpression_return n2 =null;

        IbmSparqlParser.numericExpression_return n3 =null;

        IbmSparqlParser.numericExpression_return n4 =null;

        IbmSparqlParser.numericExpression_return n5 =null;

        IbmSparqlParser.numericExpression_return n6 =null;

        IbmSparqlParser.numericExpression_return n7 =null;

        IbmSparqlParser.expressionList_return e1 =null;

        IbmSparqlParser.expressionList_return e2 =null;


        XTree char_literal285_tree=null;
        XTree string_literal286_tree=null;
        XTree LT287_tree=null;
        XTree char_literal288_tree=null;
        XTree LTE289_tree=null;
        XTree string_literal290_tree=null;
        XTree IN291_tree=null;
        XTree NOT292_tree=null;
        XTree IN293_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:722:2: (n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:722:7: n1= numericExpression ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_numericExpression_in_relationalExpression5304);
            n1=numericExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n1.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:722:28: ( '=' ^n2= numericExpression | '!=' ^n3= numericExpression | LT ^n4= numericExpression | '>' ^n5= numericExpression | LTE ^n6= numericExpression | '>=' ^n7= numericExpression | IN ^e1= expressionList | NOT ^ IN !e2= expressionList )?
            int alt128=9;
            switch ( input.LA(1) ) {
                case 257:
                    {
                    alt128=1;
                    }
                    break;
                case 252:
                    {
                    alt128=2;
                    }
                    break;
                case LT:
                    {
                    alt128=3;
                    }
                    break;
                case 258:
                    {
                    alt128=4;
                    }
                    break;
                case LTE:
                    {
                    alt128=5;
                    }
                    break;
                case 259:
                    {
                    alt128=6;
                    }
                    break;
                case IN:
                    {
                    alt128=7;
                    }
                    break;
                case NOT:
                    {
                    alt128=8;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:722:30: '=' ^n2= numericExpression
                    {
                    char_literal285=(Token)match(input,257,FOLLOW_257_in_relationalExpression5308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal285_tree = 
                    (XTree)adaptor.create(char_literal285)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal285_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5315);
                    n2=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n2.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:723:15: '!=' ^n3= numericExpression
                    {
                    string_literal286=(Token)match(input,252,FOLLOW_252_in_relationalExpression5331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal286_tree = 
                    (XTree)adaptor.create(string_literal286)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(string_literal286_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5337);
                    n3=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n3.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:724:15: LT ^n4= numericExpression
                    {
                    LT287=(Token)match(input,LT,FOLLOW_LT_in_relationalExpression5356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT287_tree = 
                    (XTree)adaptor.create(LT287)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(LT287_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5363);
                    n4=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n4.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:725:15: '>' ^n5= numericExpression
                    {
                    char_literal288=(Token)match(input,258,FOLLOW_258_in_relationalExpression5382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal288_tree = 
                    (XTree)adaptor.create(char_literal288)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal288_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5389);
                    n5=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n5.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:726:15: LTE ^n6= numericExpression
                    {
                    LTE289=(Token)match(input,LTE,FOLLOW_LTE_in_relationalExpression5408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LTE289_tree = 
                    (XTree)adaptor.create(LTE289)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(LTE289_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5414);
                    n6=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n6.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:727:15: '>=' ^n7= numericExpression
                    {
                    string_literal290=(Token)match(input,259,FOLLOW_259_in_relationalExpression5433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal290_tree = 
                    (XTree)adaptor.create(string_literal290)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(string_literal290_tree, root_0);
                    }

                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5439);
                    n7=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n7.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:728:15: IN ^e1= expressionList
                    {
                    IN291=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN291_tree = 
                    (XTree)adaptor.create(IN291)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(IN291_tree, root_0);
                    }

                    pushFollow(FOLLOW_expressionList_in_relationalExpression5464);
                    e1=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:729:15: NOT ^ IN !e2= expressionList
                    {
                    NOT292=(Token)match(input,NOT,FOLLOW_NOT_in_relationalExpression5488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT292_tree = 
                    (XTree)adaptor.create(NOT292)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(NOT292_tree, root_0);
                    }

                    IN293=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5491); if (state.failed) return retval;

                    pushFollow(FOLLOW_expressionList_in_relationalExpression5497);
                    e2=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"


    public static class numericExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:733:1: numericExpression : additiveExpression ;
    public final IbmSparqlParser.numericExpression_return numericExpression() throws RecognitionException {
        IbmSparqlParser.numericExpression_return retval = new IbmSparqlParser.numericExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.additiveExpression_return additiveExpression294 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:734:2: ( additiveExpression )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:734:6: additiveExpression
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_additiveExpression_in_numericExpression5563);
            additiveExpression294=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression294.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericExpression"


    public static class additiveExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "additiveExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:737:1: additiveExpression : (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* ;
    public final IbmSparqlParser.additiveExpression_return additiveExpression() throws RecognitionException {
        IbmSparqlParser.additiveExpression_return retval = new IbmSparqlParser.additiveExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token op1=null;
        Token op2=null;
        Token char_literal295=null;
        Token char_literal296=null;
        Token char_literal297=null;
        Token char_literal298=null;
        Token char_literal299=null;
        Token char_literal300=null;
        IbmSparqlParser.multiplicativeExpression_return lhs =null;

        IbmSparqlParser.multiplicativeExpression_return rhs1 =null;

        IbmSparqlParser.multiplicativeExpression_return rhs2 =null;

        IbmSparqlParser.numericLiteralPositive_return litp =null;

        IbmSparqlParser.multiplicativeExpression_return rhs3 =null;

        IbmSparqlParser.numericLiteralNegative_return litn =null;

        IbmSparqlParser.multiplicativeExpression_return rhs4 =null;


        XTree op1_tree=null;
        XTree op2_tree=null;
        XTree char_literal295_tree=null;
        XTree char_literal296_tree=null;
        XTree char_literal297_tree=null;
        XTree char_literal298_tree=null;
        XTree char_literal299_tree=null;
        XTree char_literal300_tree=null;
        RewriteRuleTokenStream stream_253=new RewriteRuleTokenStream(adaptor,"token 253");
        RewriteRuleTokenStream stream_254=new RewriteRuleTokenStream(adaptor,"token 254");
        RewriteRuleTokenStream stream_255=new RewriteRuleTokenStream(adaptor,"token 255");
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleSubtreeStream stream_numericLiteralNegative=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralNegative");
        RewriteRuleSubtreeStream stream_numericLiteralPositive=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralPositive");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:738:2: ( (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:738:6: (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:738:6: (lhs= multiplicativeExpression -> $lhs)
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:738:7: lhs= multiplicativeExpression
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5583);
            lhs=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(lhs.getTree());

            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: lhs, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 738:36: -> $lhs
            {
                adaptor.addChild(root_0, stream_lhs.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:739:10: ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) |litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) |litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            loop133:
            do {
                int alt133=5;
                switch ( input.LA(1) ) {
                case 254:
                    {
                    alt133=1;
                    }
                    break;
                case 255:
                    {
                    alt133=2;
                    }
                    break;
                case DECIMAL_POSITIVE:
                case DOUBLE_POSITIVE:
                case INTEGER_POSITIVE:
                    {
                    alt133=3;
                    }
                    break;
                case DECIMAL_NEGATIVE:
                case DOUBLE_NEGATIVE:
                case INTEGER_NEGATIVE:
                    {
                    alt133=4;
                    }
                    break;

                }

                switch (alt133) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:739:12: '+' rhs1= multiplicativeExpression
            	    {
            	    char_literal295=(Token)match(input,254,FOLLOW_254_in_additiveExpression5602); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_254.add(char_literal295);


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5606);
            	    rhs1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs1.getTree());

            	    // AST REWRITE
            	    // elements: 254, additiveExpression, rhs1
            	    // token labels: 
            	    // rule labels: rhs1, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_rhs1=new RewriteRuleSubtreeStream(adaptor,"rule rhs1",rhs1!=null?rhs1.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 739:46: -> ^( '+' $additiveExpression $rhs1)
            	    {
            	        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:739:49: ^( '+' $additiveExpression $rhs1)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(
            	        stream_254.nextNode()
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_rhs1.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:740:12: '-' rhs2= multiplicativeExpression
            	    {
            	    char_literal296=(Token)match(input,255,FOLLOW_255_in_additiveExpression5631); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_255.add(char_literal296);


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5635);
            	    rhs2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs2.getTree());

            	    // AST REWRITE
            	    // elements: additiveExpression, 255, rhs2
            	    // token labels: 
            	    // rule labels: rhs2, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 740:46: -> ^( '-' $additiveExpression $rhs2)
            	    {
            	        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:740:49: ^( '-' $additiveExpression $rhs2)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(
            	        stream_255.nextNode()
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_rhs2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;
            	case 3 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:741:12: litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralPositive_in_additiveExpression5662);
            	    litp=numericLiteralPositive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralPositive.add(litp.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:742:13: (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    int alt130=2;
            	    int LA130_0 = input.LA(1);

            	    if ( (LA130_0==253||LA130_0==256) ) {
            	        alt130=1;
            	    }
            	    else if ( (LA130_0==AS||LA130_0==CLOSE_BRACE||LA130_0==COMMA||(LA130_0 >= DECIMAL_NEGATIVE && LA130_0 <= DECIMAL_POSITIVE)||(LA130_0 >= DOUBLE_NEGATIVE && LA130_0 <= DOUBLE_POSITIVE)||LA130_0==IN||(LA130_0 >= INTEGER_NEGATIVE && LA130_0 <= INTEGER_POSITIVE)||(LA130_0 >= LOGICAL_AND && LA130_0 <= LTE)||LA130_0==NOT||LA130_0==SEMICOLON||LA130_0==252||(LA130_0 >= 254 && LA130_0 <= 255)||(LA130_0 >= 257 && LA130_0 <= 259)) ) {
            	        alt130=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 130, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt130) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:742:15: op1= ( '*' | '/' ) rhs3= multiplicativeExpression
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:742:19: ( '*' | '/' )
            	            int alt129=2;
            	            int LA129_0 = input.LA(1);

            	            if ( (LA129_0==253) ) {
            	                alt129=1;
            	            }
            	            else if ( (LA129_0==256) ) {
            	                alt129=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 129, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt129) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:742:20: '*'
            	                    {
            	                    char_literal297=(Token)match(input,253,FOLLOW_253_in_additiveExpression5682); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_253.add(char_literal297);


            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:742:24: '/'
            	                    {
            	                    char_literal298=(Token)match(input,256,FOLLOW_256_in_additiveExpression5684); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_256.add(char_literal298);


            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5689);
            	            rhs3=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs3.getTree());

            	            // AST REWRITE
            	            // elements: op1, additiveExpression, litp, rhs3
            	            // token labels: op1
            	            // rule labels: rhs3, litp, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op1=new RewriteRuleTokenStream(adaptor,"token op1",op1);
            	            RewriteRuleSubtreeStream stream_rhs3=new RewriteRuleSubtreeStream(adaptor,"rule rhs3",rhs3!=null?rhs3.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 743:15: -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:743:18: ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:743:52: ^( $op1 $litp $rhs3)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op1.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litp.nextTree());

            	                adaptor.addChild(root_2, stream_rhs3.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:745:15: 
            	            {
            	            // AST REWRITE
            	            // elements: litp, additiveExpression
            	            // token labels: 
            	            // rule labels: litp, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 745:15: -> ^( BROKEN_PLUS $additiveExpression $litp)
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:745:18: ^( BROKEN_PLUS $additiveExpression $litp)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, stream_litp.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:747:12: litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralNegative_in_additiveExpression5792);
            	    litn=numericLiteralNegative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralNegative.add(litn.getTree());

            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:748:13: (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    int alt132=2;
            	    int LA132_0 = input.LA(1);

            	    if ( (LA132_0==253||LA132_0==256) ) {
            	        alt132=1;
            	    }
            	    else if ( (LA132_0==AS||LA132_0==CLOSE_BRACE||LA132_0==COMMA||(LA132_0 >= DECIMAL_NEGATIVE && LA132_0 <= DECIMAL_POSITIVE)||(LA132_0 >= DOUBLE_NEGATIVE && LA132_0 <= DOUBLE_POSITIVE)||LA132_0==IN||(LA132_0 >= INTEGER_NEGATIVE && LA132_0 <= INTEGER_POSITIVE)||(LA132_0 >= LOGICAL_AND && LA132_0 <= LTE)||LA132_0==NOT||LA132_0==SEMICOLON||LA132_0==252||(LA132_0 >= 254 && LA132_0 <= 255)||(LA132_0 >= 257 && LA132_0 <= 259)) ) {
            	        alt132=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 132, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt132) {
            	        case 1 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:748:15: op2= ( '*' | '/' ) rhs4= multiplicativeExpression
            	            {
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:748:19: ( '*' | '/' )
            	            int alt131=2;
            	            int LA131_0 = input.LA(1);

            	            if ( (LA131_0==253) ) {
            	                alt131=1;
            	            }
            	            else if ( (LA131_0==256) ) {
            	                alt131=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 131, 0, input);

            	                throw nvae;

            	            }
            	            switch (alt131) {
            	                case 1 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:748:20: '*'
            	                    {
            	                    char_literal299=(Token)match(input,253,FOLLOW_253_in_additiveExpression5812); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_253.add(char_literal299);


            	                    }
            	                    break;
            	                case 2 :
            	                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:748:24: '/'
            	                    {
            	                    char_literal300=(Token)match(input,256,FOLLOW_256_in_additiveExpression5814); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_256.add(char_literal300);


            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5819);
            	            rhs4=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs4.getTree());

            	            // AST REWRITE
            	            // elements: additiveExpression, rhs4, op2, litn
            	            // token labels: op2
            	            // rule labels: rhs4, litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op2=new RewriteRuleTokenStream(adaptor,"token op2",op2);
            	            RewriteRuleSubtreeStream stream_rhs4=new RewriteRuleSubtreeStream(adaptor,"rule rhs4",rhs4!=null?rhs4.tree:null);
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 749:15: -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:749:18: ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:749:53: ^( $op2 $litn $rhs4)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op2.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litn.nextTree());

            	                adaptor.addChild(root_2, stream_rhs4.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:751:15: 
            	            {
            	            // AST REWRITE
            	            // elements: additiveExpression, litn
            	            // token labels: 
            	            // rule labels: litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 751:15: -> ^( BROKEN_MINUS $additiveExpression $litn)
            	            {
            	                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:751:18: ^( BROKEN_MINUS $additiveExpression $litn)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot(
            	                (XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, stream_litn.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"


    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiplicativeExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:756:1: multiplicativeExpression : unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )* ;
    public final IbmSparqlParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        IbmSparqlParser.multiplicativeExpression_return retval = new IbmSparqlParser.multiplicativeExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal302=null;
        Token char_literal304=null;
        IbmSparqlParser.unaryExpression_return unaryExpression301 =null;

        IbmSparqlParser.unaryExpression_return unaryExpression303 =null;

        IbmSparqlParser.unaryExpression_return unaryExpression305 =null;


        XTree char_literal302_tree=null;
        XTree char_literal304_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:757:2: ( unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )* )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:757:6: unaryExpression ( '*' ^ unaryExpression | '/' ^ unaryExpression )*
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5936);
            unaryExpression301=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression301.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:757:23: ( '*' ^ unaryExpression | '/' ^ unaryExpression )*
            loop134:
            do {
                int alt134=3;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==253) ) {
                    alt134=1;
                }
                else if ( (LA134_0==256) ) {
                    alt134=2;
                }


                switch (alt134) {
            	case 1 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:757:25: '*' ^ unaryExpression
            	    {
            	    char_literal302=(Token)match(input,253,FOLLOW_253_in_multiplicativeExpression5941); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal302_tree = 
            	    (XTree)adaptor.create(char_literal302)
            	    ;
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal302_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5944);
            	    unaryExpression303=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression303.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:758:10: '/' ^ unaryExpression
            	    {
            	    char_literal304=(Token)match(input,256,FOLLOW_256_in_multiplicativeExpression5956); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal304_tree = 
            	    (XTree)adaptor.create(char_literal304)
            	    ;
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal304_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5959);
            	    unaryExpression305=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression305.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"


    public static class unaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unaryExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:762:1: unaryExpression : ( '!' ^ primaryExpression | '+' ^ primaryExpression | '-' ^ primaryExpression | primaryExpression );
    public final IbmSparqlParser.unaryExpression_return unaryExpression() throws RecognitionException {
        IbmSparqlParser.unaryExpression_return retval = new IbmSparqlParser.unaryExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token char_literal306=null;
        Token char_literal308=null;
        Token char_literal310=null;
        IbmSparqlParser.primaryExpression_return primaryExpression307 =null;

        IbmSparqlParser.primaryExpression_return primaryExpression309 =null;

        IbmSparqlParser.primaryExpression_return primaryExpression311 =null;

        IbmSparqlParser.primaryExpression_return primaryExpression312 =null;


        XTree char_literal306_tree=null;
        XTree char_literal308_tree=null;
        XTree char_literal310_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:763:2: ( '!' ^ primaryExpression | '+' ^ primaryExpression | '-' ^ primaryExpression | primaryExpression )
            int alt135=4;
            switch ( input.LA(1) ) {
            case 251:
                {
                alt135=1;
                }
                break;
            case 254:
                {
                alt135=2;
                }
                break;
            case 255:
                {
                alt135=3;
                }
                break;
            case ABS:
            case AVG:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case COUNT:
            case DATATYPE:
            case DAY:
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FALSE:
            case FLOOR:
            case GROUP_CONCAT:
            case HOURS:
            case IF:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
            case IRI:
            case IRI_REF:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MAX:
            case MD5:
            case MIN:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case OPEN_BRACE:
            case PNAME_LN:
            case PNAME_NS:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SAMPLE:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case SUM:
            case TIMEZONE:
            case TRUE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case VAR1:
            case VAR2:
            case YEAR:
                {
                alt135=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:763:4: '!' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal306=(Token)match(input,251,FOLLOW_251_in_unaryExpression5985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal306_tree = 
                    (XTree)adaptor.create(char_literal306)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal306_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5988);
                    primaryExpression307=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression307.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:764:5: '+' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal308=(Token)match(input,254,FOLLOW_254_in_unaryExpression5994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal308_tree = 
                    (XTree)adaptor.create(char_literal308)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal308_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5997);
                    primaryExpression309=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression309.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:765:5: '-' ^ primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    char_literal310=(Token)match(input,255,FOLLOW_255_in_unaryExpression6003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal310_tree = 
                    (XTree)adaptor.create(char_literal310)
                    ;
                    root_0 = (XTree)adaptor.becomeRoot(char_literal310_tree, root_0);
                    }

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6006);
                    primaryExpression311=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression311.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:766:5: primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6012);
                    primaryExpression312=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression312.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"


    public static class primaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primaryExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:769:1: primaryExpression : ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate );
    public final IbmSparqlParser.primaryExpression_return primaryExpression() throws RecognitionException {
        IbmSparqlParser.primaryExpression_return retval = new IbmSparqlParser.primaryExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.brackettedExpression_return brackettedExpression313 =null;

        IbmSparqlParser.builtInCall_return builtInCall314 =null;

        IbmSparqlParser.iRIrefOrFunction_return iRIrefOrFunction315 =null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral316 =null;

        IbmSparqlParser.numericLiteral_return numericLiteral317 =null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral318 =null;

        IbmSparqlParser.var_return var319 =null;

        IbmSparqlParser.aggregate_return aggregate320 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:770:2: ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate )
            int alt136=8;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt136=1;
                }
                break;
            case ABS:
            case BNODE:
            case BOUND:
            case CEIL:
            case COALESCE:
            case CONCAT:
            case CONTAINS:
            case DATATYPE:
            case DAY:
            case ENCODE_FOR_URI:
            case EXISTS:
            case FLOOR:
            case HOURS:
            case IF:
            case IRI:
            case ISBLANK:
            case ISIRI:
            case ISLITERAL:
            case ISNUMERIC:
            case ISURI:
            case LANG:
            case LANGMATCHES:
            case LCASE:
            case MD5:
            case MINUTES:
            case MONTH:
            case NOT:
            case NOW:
            case RAND:
            case REGEX:
            case REPLACE:
            case ROUND:
            case SAMETERM:
            case SECONDS:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case STR:
            case STRAFTER:
            case STRBEFORE:
            case STRDT:
            case STRENDS:
            case STRLANG:
            case STRLEN:
            case STRSTARTS:
            case STRUUID:
            case SUBSTR:
            case TIMEZONE:
            case TZ:
            case UCASE:
            case URI:
            case UUID:
            case YEAR:
                {
                alt136=2;
                }
                break;
            case IRI_REF:
            case PNAME_LN:
            case PNAME_NS:
                {
                alt136=3;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt136=4;
                }
                break;
            case DECIMAL:
            case DECIMAL_NEGATIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE:
            case DOUBLE_NEGATIVE:
            case DOUBLE_POSITIVE:
            case INTEGER:
            case INTEGER_NEGATIVE:
            case INTEGER_POSITIVE:
                {
                alt136=5;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt136=6;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt136=7;
                }
                break;
            case AVG:
            case COUNT:
            case GROUP_CONCAT:
            case MAX:
            case MIN:
            case SAMPLE:
            case SUM:
                {
                alt136=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }

            switch (alt136) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:770:6: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_brackettedExpression_in_primaryExpression6029);
                    brackettedExpression313=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression313.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:771:5: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_builtInCall_in_primaryExpression6036);
                    builtInCall314=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall314.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:772:5: iRIrefOrFunction
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_iRIrefOrFunction_in_primaryExpression6043);
                    iRIrefOrFunction315=iRIrefOrFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIrefOrFunction315.getTree());

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:773:5: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_rDFLiteral_in_primaryExpression6050);
                    rDFLiteral316=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral316.getTree());

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:774:5: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteral_in_primaryExpression6057);
                    numericLiteral317=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral317.getTree());

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:775:5: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanLiteral_in_primaryExpression6064);
                    booleanLiteral318=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral318.getTree());

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:776:5: var
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_var_in_primaryExpression6071);
                    var319=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var319.getTree());

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:777:5: aggregate
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_aggregate_in_primaryExpression6078);
                    aggregate320=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregate320.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"


    public static class brackettedExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brackettedExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:780:1: brackettedExpression : ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) ;
    public final IbmSparqlParser.brackettedExpression_return brackettedExpression() throws RecognitionException {
        IbmSparqlParser.brackettedExpression_return retval = new IbmSparqlParser.brackettedExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE321=null;
        Token CLOSE_BRACE322=null;
        IbmSparqlParser.expression_return e =null;


        XTree OPEN_BRACE321_tree=null;
        XTree CLOSE_BRACE322_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:781:2: ( ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:781:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:781:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:781:36: OPEN_BRACE e= expression CLOSE_BRACE
            {
            OPEN_BRACE321=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_brackettedExpression6108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE321);


            pushFollow(FOLLOW_expression_in_brackettedExpression6112);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());

            CLOSE_BRACE322=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_brackettedExpression6114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE322);


            }


            // AST REWRITE
            // elements: e
            // token labels: 
            // rule labels: e, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 783:3: -> ^( EXPRESSION $e)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:783:7: ^( EXPRESSION $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(EXPRESSION, "EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "brackettedExpression"


    public static class builtInCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtInCall"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:786:1: builtInCall : ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) |s= substringExpression -> $s| STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc );
    public final IbmSparqlParser.builtInCall_return builtInCall() throws RecognitionException {
        IbmSparqlParser.builtInCall_return retval = new IbmSparqlParser.builtInCall_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token STR323=null;
        Token OPEN_BRACE324=null;
        Token CLOSE_BRACE325=null;
        Token LANG326=null;
        Token OPEN_BRACE327=null;
        Token CLOSE_BRACE328=null;
        Token LANGMATCHES329=null;
        Token OPEN_BRACE330=null;
        Token COMMA331=null;
        Token CLOSE_BRACE332=null;
        Token DATATYPE333=null;
        Token OPEN_BRACE334=null;
        Token CLOSE_BRACE335=null;
        Token BOUND336=null;
        Token OPEN_BRACE337=null;
        Token CLOSE_BRACE338=null;
        Token IRI339=null;
        Token OPEN_BRACE340=null;
        Token CLOSE_BRACE341=null;
        Token URI342=null;
        Token OPEN_BRACE343=null;
        Token CLOSE_BRACE344=null;
        Token BNODE345=null;
        Token OPEN_BRACE346=null;
        Token CLOSE_BRACE347=null;
        Token RAND349=null;
        Token ABS351=null;
        Token OPEN_BRACE352=null;
        Token CLOSE_BRACE353=null;
        Token CEIL354=null;
        Token OPEN_BRACE355=null;
        Token CLOSE_BRACE356=null;
        Token FLOOR357=null;
        Token OPEN_BRACE358=null;
        Token CLOSE_BRACE359=null;
        Token ROUND360=null;
        Token OPEN_BRACE361=null;
        Token CLOSE_BRACE362=null;
        Token CONCAT363=null;
        Token STRLEN364=null;
        Token OPEN_BRACE365=null;
        Token CLOSE_BRACE366=null;
        Token UCASE368=null;
        Token OPEN_BRACE369=null;
        Token CLOSE_BRACE370=null;
        Token LCASE371=null;
        Token OPEN_BRACE372=null;
        Token CLOSE_BRACE373=null;
        Token ENCODE_FOR_URI374=null;
        Token OPEN_BRACE375=null;
        Token CLOSE_BRACE376=null;
        Token CONTAINS377=null;
        Token OPEN_BRACE378=null;
        Token COMMA379=null;
        Token CLOSE_BRACE380=null;
        Token STRSTARTS381=null;
        Token OPEN_BRACE382=null;
        Token COMMA383=null;
        Token CLOSE_BRACE384=null;
        Token STRENDS385=null;
        Token OPEN_BRACE386=null;
        Token COMMA387=null;
        Token CLOSE_BRACE388=null;
        Token STRBEFORE389=null;
        Token OPEN_BRACE390=null;
        Token COMMA391=null;
        Token CLOSE_BRACE392=null;
        Token STRAFTER393=null;
        Token OPEN_BRACE394=null;
        Token COMMA395=null;
        Token CLOSE_BRACE396=null;
        Token YEAR397=null;
        Token OPEN_BRACE398=null;
        Token CLOSE_BRACE399=null;
        Token MONTH400=null;
        Token OPEN_BRACE401=null;
        Token CLOSE_BRACE402=null;
        Token DAY403=null;
        Token OPEN_BRACE404=null;
        Token CLOSE_BRACE405=null;
        Token HOURS406=null;
        Token OPEN_BRACE407=null;
        Token CLOSE_BRACE408=null;
        Token MINUTES409=null;
        Token OPEN_BRACE410=null;
        Token CLOSE_BRACE411=null;
        Token SECONDS412=null;
        Token OPEN_BRACE413=null;
        Token CLOSE_BRACE414=null;
        Token TIMEZONE415=null;
        Token OPEN_BRACE416=null;
        Token CLOSE_BRACE417=null;
        Token TZ418=null;
        Token OPEN_BRACE419=null;
        Token CLOSE_BRACE420=null;
        Token NOW421=null;
        Token UUID423=null;
        Token STRUUID425=null;
        Token MD5427=null;
        Token OPEN_BRACE428=null;
        Token CLOSE_BRACE429=null;
        Token SHA1430=null;
        Token OPEN_BRACE431=null;
        Token CLOSE_BRACE432=null;
        Token SHA224433=null;
        Token OPEN_BRACE434=null;
        Token CLOSE_BRACE435=null;
        Token SHA256436=null;
        Token OPEN_BRACE437=null;
        Token CLOSE_BRACE438=null;
        Token SHA384439=null;
        Token OPEN_BRACE440=null;
        Token CLOSE_BRACE441=null;
        Token SHA512442=null;
        Token OPEN_BRACE443=null;
        Token CLOSE_BRACE444=null;
        Token COALESCE445=null;
        Token IF446=null;
        Token OPEN_BRACE447=null;
        Token COMMA448=null;
        Token COMMA449=null;
        Token CLOSE_BRACE450=null;
        Token STRLANG451=null;
        Token OPEN_BRACE452=null;
        Token COMMA453=null;
        Token CLOSE_BRACE454=null;
        Token STRDT455=null;
        Token OPEN_BRACE456=null;
        Token COMMA457=null;
        Token CLOSE_BRACE458=null;
        Token SAMETERM459=null;
        Token OPEN_BRACE460=null;
        Token COMMA461=null;
        Token CLOSE_BRACE462=null;
        Token ISIRI463=null;
        Token OPEN_BRACE464=null;
        Token CLOSE_BRACE465=null;
        Token ISURI466=null;
        Token OPEN_BRACE467=null;
        Token CLOSE_BRACE468=null;
        Token ISBLANK469=null;
        Token OPEN_BRACE470=null;
        Token CLOSE_BRACE471=null;
        Token ISLITERAL472=null;
        Token OPEN_BRACE473=null;
        Token CLOSE_BRACE474=null;
        Token ISNUMERIC475=null;
        Token OPEN_BRACE476=null;
        Token CLOSE_BRACE477=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.expression_return e2 =null;

        IbmSparqlParser.expression_return e3 =null;

        IbmSparqlParser.expression_return e4 =null;

        IbmSparqlParser.expression_return e5 =null;

        IbmSparqlParser.var_return v =null;

        IbmSparqlParser.expression_return e51 =null;

        IbmSparqlParser.expression_return e6 =null;

        IbmSparqlParser.expression_return e7 =null;

        IbmSparqlParser.expression_return e8 =null;

        IbmSparqlParser.expression_return e9 =null;

        IbmSparqlParser.expression_return e10 =null;

        IbmSparqlParser.expression_return e11 =null;

        IbmSparqlParser.expressionList_return e12 =null;

        IbmSparqlParser.substringExpression_return s =null;

        IbmSparqlParser.expression_return e13 =null;

        IbmSparqlParser.expression_return e14 =null;

        IbmSparqlParser.expression_return e15 =null;

        IbmSparqlParser.expression_return e16 =null;

        IbmSparqlParser.expression_return e17 =null;

        IbmSparqlParser.expression_return e18 =null;

        IbmSparqlParser.expression_return e19 =null;

        IbmSparqlParser.expression_return e20 =null;

        IbmSparqlParser.expression_return e21 =null;

        IbmSparqlParser.expression_return e22 =null;

        IbmSparqlParser.expression_return e23 =null;

        IbmSparqlParser.expression_return e24 =null;

        IbmSparqlParser.expression_return e25 =null;

        IbmSparqlParser.expression_return e26 =null;

        IbmSparqlParser.expression_return e27 =null;

        IbmSparqlParser.expression_return e28 =null;

        IbmSparqlParser.expression_return e29 =null;

        IbmSparqlParser.expression_return e30 =null;

        IbmSparqlParser.expression_return e31 =null;

        IbmSparqlParser.expression_return e32 =null;

        IbmSparqlParser.expression_return e33 =null;

        IbmSparqlParser.expression_return e34 =null;

        IbmSparqlParser.expression_return e35 =null;

        IbmSparqlParser.expression_return e36 =null;

        IbmSparqlParser.expressionList_return e37 =null;

        IbmSparqlParser.expression_return e38 =null;

        IbmSparqlParser.expression_return e39 =null;

        IbmSparqlParser.expression_return e40 =null;

        IbmSparqlParser.expression_return e41 =null;

        IbmSparqlParser.expression_return e42 =null;

        IbmSparqlParser.expression_return e43 =null;

        IbmSparqlParser.expression_return e44 =null;

        IbmSparqlParser.expression_return e45 =null;

        IbmSparqlParser.expression_return e46 =null;

        IbmSparqlParser.expression_return e47 =null;

        IbmSparqlParser.expression_return e48 =null;

        IbmSparqlParser.expression_return e52 =null;

        IbmSparqlParser.expression_return e49 =null;

        IbmSparqlParser.expression_return e50 =null;

        IbmSparqlParser.nil_return nil348 =null;

        IbmSparqlParser.nil_return nil350 =null;

        IbmSparqlParser.strReplaceExpression_return strReplaceExpression367 =null;

        IbmSparqlParser.nil_return nil422 =null;

        IbmSparqlParser.nil_return nil424 =null;

        IbmSparqlParser.nil_return nil426 =null;

        IbmSparqlParser.regexExpression_return regexExpression478 =null;

        IbmSparqlParser.existsFunc_return existsFunc479 =null;

        IbmSparqlParser.notExistsFunc_return notExistsFunc480 =null;


        XTree STR323_tree=null;
        XTree OPEN_BRACE324_tree=null;
        XTree CLOSE_BRACE325_tree=null;
        XTree LANG326_tree=null;
        XTree OPEN_BRACE327_tree=null;
        XTree CLOSE_BRACE328_tree=null;
        XTree LANGMATCHES329_tree=null;
        XTree OPEN_BRACE330_tree=null;
        XTree COMMA331_tree=null;
        XTree CLOSE_BRACE332_tree=null;
        XTree DATATYPE333_tree=null;
        XTree OPEN_BRACE334_tree=null;
        XTree CLOSE_BRACE335_tree=null;
        XTree BOUND336_tree=null;
        XTree OPEN_BRACE337_tree=null;
        XTree CLOSE_BRACE338_tree=null;
        XTree IRI339_tree=null;
        XTree OPEN_BRACE340_tree=null;
        XTree CLOSE_BRACE341_tree=null;
        XTree URI342_tree=null;
        XTree OPEN_BRACE343_tree=null;
        XTree CLOSE_BRACE344_tree=null;
        XTree BNODE345_tree=null;
        XTree OPEN_BRACE346_tree=null;
        XTree CLOSE_BRACE347_tree=null;
        XTree RAND349_tree=null;
        XTree ABS351_tree=null;
        XTree OPEN_BRACE352_tree=null;
        XTree CLOSE_BRACE353_tree=null;
        XTree CEIL354_tree=null;
        XTree OPEN_BRACE355_tree=null;
        XTree CLOSE_BRACE356_tree=null;
        XTree FLOOR357_tree=null;
        XTree OPEN_BRACE358_tree=null;
        XTree CLOSE_BRACE359_tree=null;
        XTree ROUND360_tree=null;
        XTree OPEN_BRACE361_tree=null;
        XTree CLOSE_BRACE362_tree=null;
        XTree CONCAT363_tree=null;
        XTree STRLEN364_tree=null;
        XTree OPEN_BRACE365_tree=null;
        XTree CLOSE_BRACE366_tree=null;
        XTree UCASE368_tree=null;
        XTree OPEN_BRACE369_tree=null;
        XTree CLOSE_BRACE370_tree=null;
        XTree LCASE371_tree=null;
        XTree OPEN_BRACE372_tree=null;
        XTree CLOSE_BRACE373_tree=null;
        XTree ENCODE_FOR_URI374_tree=null;
        XTree OPEN_BRACE375_tree=null;
        XTree CLOSE_BRACE376_tree=null;
        XTree CONTAINS377_tree=null;
        XTree OPEN_BRACE378_tree=null;
        XTree COMMA379_tree=null;
        XTree CLOSE_BRACE380_tree=null;
        XTree STRSTARTS381_tree=null;
        XTree OPEN_BRACE382_tree=null;
        XTree COMMA383_tree=null;
        XTree CLOSE_BRACE384_tree=null;
        XTree STRENDS385_tree=null;
        XTree OPEN_BRACE386_tree=null;
        XTree COMMA387_tree=null;
        XTree CLOSE_BRACE388_tree=null;
        XTree STRBEFORE389_tree=null;
        XTree OPEN_BRACE390_tree=null;
        XTree COMMA391_tree=null;
        XTree CLOSE_BRACE392_tree=null;
        XTree STRAFTER393_tree=null;
        XTree OPEN_BRACE394_tree=null;
        XTree COMMA395_tree=null;
        XTree CLOSE_BRACE396_tree=null;
        XTree YEAR397_tree=null;
        XTree OPEN_BRACE398_tree=null;
        XTree CLOSE_BRACE399_tree=null;
        XTree MONTH400_tree=null;
        XTree OPEN_BRACE401_tree=null;
        XTree CLOSE_BRACE402_tree=null;
        XTree DAY403_tree=null;
        XTree OPEN_BRACE404_tree=null;
        XTree CLOSE_BRACE405_tree=null;
        XTree HOURS406_tree=null;
        XTree OPEN_BRACE407_tree=null;
        XTree CLOSE_BRACE408_tree=null;
        XTree MINUTES409_tree=null;
        XTree OPEN_BRACE410_tree=null;
        XTree CLOSE_BRACE411_tree=null;
        XTree SECONDS412_tree=null;
        XTree OPEN_BRACE413_tree=null;
        XTree CLOSE_BRACE414_tree=null;
        XTree TIMEZONE415_tree=null;
        XTree OPEN_BRACE416_tree=null;
        XTree CLOSE_BRACE417_tree=null;
        XTree TZ418_tree=null;
        XTree OPEN_BRACE419_tree=null;
        XTree CLOSE_BRACE420_tree=null;
        XTree NOW421_tree=null;
        XTree UUID423_tree=null;
        XTree STRUUID425_tree=null;
        XTree MD5427_tree=null;
        XTree OPEN_BRACE428_tree=null;
        XTree CLOSE_BRACE429_tree=null;
        XTree SHA1430_tree=null;
        XTree OPEN_BRACE431_tree=null;
        XTree CLOSE_BRACE432_tree=null;
        XTree SHA224433_tree=null;
        XTree OPEN_BRACE434_tree=null;
        XTree CLOSE_BRACE435_tree=null;
        XTree SHA256436_tree=null;
        XTree OPEN_BRACE437_tree=null;
        XTree CLOSE_BRACE438_tree=null;
        XTree SHA384439_tree=null;
        XTree OPEN_BRACE440_tree=null;
        XTree CLOSE_BRACE441_tree=null;
        XTree SHA512442_tree=null;
        XTree OPEN_BRACE443_tree=null;
        XTree CLOSE_BRACE444_tree=null;
        XTree COALESCE445_tree=null;
        XTree IF446_tree=null;
        XTree OPEN_BRACE447_tree=null;
        XTree COMMA448_tree=null;
        XTree COMMA449_tree=null;
        XTree CLOSE_BRACE450_tree=null;
        XTree STRLANG451_tree=null;
        XTree OPEN_BRACE452_tree=null;
        XTree COMMA453_tree=null;
        XTree CLOSE_BRACE454_tree=null;
        XTree STRDT455_tree=null;
        XTree OPEN_BRACE456_tree=null;
        XTree COMMA457_tree=null;
        XTree CLOSE_BRACE458_tree=null;
        XTree SAMETERM459_tree=null;
        XTree OPEN_BRACE460_tree=null;
        XTree COMMA461_tree=null;
        XTree CLOSE_BRACE462_tree=null;
        XTree ISIRI463_tree=null;
        XTree OPEN_BRACE464_tree=null;
        XTree CLOSE_BRACE465_tree=null;
        XTree ISURI466_tree=null;
        XTree OPEN_BRACE467_tree=null;
        XTree CLOSE_BRACE468_tree=null;
        XTree ISBLANK469_tree=null;
        XTree OPEN_BRACE470_tree=null;
        XTree CLOSE_BRACE471_tree=null;
        XTree ISLITERAL472_tree=null;
        XTree OPEN_BRACE473_tree=null;
        XTree CLOSE_BRACE474_tree=null;
        XTree ISNUMERIC475_tree=null;
        XTree OPEN_BRACE476_tree=null;
        XTree CLOSE_BRACE477_tree=null;
        RewriteRuleTokenStream stream_BNODE=new RewriteRuleTokenStream(adaptor,"token BNODE");
        RewriteRuleTokenStream stream_MONTH=new RewriteRuleTokenStream(adaptor,"token MONTH");
        RewriteRuleTokenStream stream_RAND=new RewriteRuleTokenStream(adaptor,"token RAND");
        RewriteRuleTokenStream stream_SHA1=new RewriteRuleTokenStream(adaptor,"token SHA1");
        RewriteRuleTokenStream stream_TZ=new RewriteRuleTokenStream(adaptor,"token TZ");
        RewriteRuleTokenStream stream_STRBEFORE=new RewriteRuleTokenStream(adaptor,"token STRBEFORE");
        RewriteRuleTokenStream stream_STR=new RewriteRuleTokenStream(adaptor,"token STR");
        RewriteRuleTokenStream stream_STRSTARTS=new RewriteRuleTokenStream(adaptor,"token STRSTARTS");
        RewriteRuleTokenStream stream_FLOOR=new RewriteRuleTokenStream(adaptor,"token FLOOR");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_YEAR=new RewriteRuleTokenStream(adaptor,"token YEAR");
        RewriteRuleTokenStream stream_ISLITERAL=new RewriteRuleTokenStream(adaptor,"token ISLITERAL");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_ISNUMERIC=new RewriteRuleTokenStream(adaptor,"token ISNUMERIC");
        RewriteRuleTokenStream stream_BOUND=new RewriteRuleTokenStream(adaptor,"token BOUND");
        RewriteRuleTokenStream stream_CEIL=new RewriteRuleTokenStream(adaptor,"token CEIL");
        RewriteRuleTokenStream stream_TIMEZONE=new RewriteRuleTokenStream(adaptor,"token TIMEZONE");
        RewriteRuleTokenStream stream_UUID=new RewriteRuleTokenStream(adaptor,"token UUID");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_SAMETERM=new RewriteRuleTokenStream(adaptor,"token SAMETERM");
        RewriteRuleTokenStream stream_LANGMATCHES=new RewriteRuleTokenStream(adaptor,"token LANGMATCHES");
        RewriteRuleTokenStream stream_STRENDS=new RewriteRuleTokenStream(adaptor,"token STRENDS");
        RewriteRuleTokenStream stream_STRLEN=new RewriteRuleTokenStream(adaptor,"token STRLEN");
        RewriteRuleTokenStream stream_LCASE=new RewriteRuleTokenStream(adaptor,"token LCASE");
        RewriteRuleTokenStream stream_DATATYPE=new RewriteRuleTokenStream(adaptor,"token DATATYPE");
        RewriteRuleTokenStream stream_ENCODE_FOR_URI=new RewriteRuleTokenStream(adaptor,"token ENCODE_FOR_URI");
        RewriteRuleTokenStream stream_NOW=new RewriteRuleTokenStream(adaptor,"token NOW");
        RewriteRuleTokenStream stream_SHA512=new RewriteRuleTokenStream(adaptor,"token SHA512");
        RewriteRuleTokenStream stream_IRI=new RewriteRuleTokenStream(adaptor,"token IRI");
        RewriteRuleTokenStream stream_ISBLANK=new RewriteRuleTokenStream(adaptor,"token ISBLANK");
        RewriteRuleTokenStream stream_ROUND=new RewriteRuleTokenStream(adaptor,"token ROUND");
        RewriteRuleTokenStream stream_CONCAT=new RewriteRuleTokenStream(adaptor,"token CONCAT");
        RewriteRuleTokenStream stream_UCASE=new RewriteRuleTokenStream(adaptor,"token UCASE");
        RewriteRuleTokenStream stream_ISURI=new RewriteRuleTokenStream(adaptor,"token ISURI");
        RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,"token CONTAINS");
        RewriteRuleTokenStream stream_LANG=new RewriteRuleTokenStream(adaptor,"token LANG");
        RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_SHA384=new RewriteRuleTokenStream(adaptor,"token SHA384");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_STRDT=new RewriteRuleTokenStream(adaptor,"token STRDT");
        RewriteRuleTokenStream stream_STRLANG=new RewriteRuleTokenStream(adaptor,"token STRLANG");
        RewriteRuleTokenStream stream_SHA224=new RewriteRuleTokenStream(adaptor,"token SHA224");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRAFTER=new RewriteRuleTokenStream(adaptor,"token STRAFTER");
        RewriteRuleTokenStream stream_SECONDS=new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_STRUUID=new RewriteRuleTokenStream(adaptor,"token STRUUID");
        RewriteRuleTokenStream stream_SHA256=new RewriteRuleTokenStream(adaptor,"token SHA256");
        RewriteRuleTokenStream stream_HOURS=new RewriteRuleTokenStream(adaptor,"token HOURS");
        RewriteRuleTokenStream stream_MINUTES=new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_DAY=new RewriteRuleTokenStream(adaptor,"token DAY");
        RewriteRuleTokenStream stream_ISIRI=new RewriteRuleTokenStream(adaptor,"token ISIRI");
        RewriteRuleTokenStream stream_MD5=new RewriteRuleTokenStream(adaptor,"token MD5");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_substringExpression=new RewriteRuleSubtreeStream(adaptor,"rule substringExpression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:787:2: ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) |s= substringExpression -> $s| STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc )
            int alt138=55;
            switch ( input.LA(1) ) {
            case STR:
                {
                alt138=1;
                }
                break;
            case LANG:
                {
                alt138=2;
                }
                break;
            case LANGMATCHES:
                {
                alt138=3;
                }
                break;
            case DATATYPE:
                {
                alt138=4;
                }
                break;
            case BOUND:
                {
                alt138=5;
                }
                break;
            case IRI:
                {
                alt138=6;
                }
                break;
            case URI:
                {
                alt138=7;
                }
                break;
            case BNODE:
                {
                alt138=8;
                }
                break;
            case RAND:
                {
                alt138=9;
                }
                break;
            case ABS:
                {
                alt138=10;
                }
                break;
            case CEIL:
                {
                alt138=11;
                }
                break;
            case FLOOR:
                {
                alt138=12;
                }
                break;
            case ROUND:
                {
                alt138=13;
                }
                break;
            case CONCAT:
                {
                alt138=14;
                }
                break;
            case SUBSTR:
                {
                alt138=15;
                }
                break;
            case STRLEN:
                {
                alt138=16;
                }
                break;
            case REPLACE:
                {
                alt138=17;
                }
                break;
            case UCASE:
                {
                alt138=18;
                }
                break;
            case LCASE:
                {
                alt138=19;
                }
                break;
            case ENCODE_FOR_URI:
                {
                alt138=20;
                }
                break;
            case CONTAINS:
                {
                alt138=21;
                }
                break;
            case STRSTARTS:
                {
                alt138=22;
                }
                break;
            case STRENDS:
                {
                alt138=23;
                }
                break;
            case STRBEFORE:
                {
                alt138=24;
                }
                break;
            case STRAFTER:
                {
                alt138=25;
                }
                break;
            case YEAR:
                {
                alt138=26;
                }
                break;
            case MONTH:
                {
                alt138=27;
                }
                break;
            case DAY:
                {
                alt138=28;
                }
                break;
            case HOURS:
                {
                alt138=29;
                }
                break;
            case MINUTES:
                {
                alt138=30;
                }
                break;
            case SECONDS:
                {
                alt138=31;
                }
                break;
            case TIMEZONE:
                {
                alt138=32;
                }
                break;
            case TZ:
                {
                alt138=33;
                }
                break;
            case NOW:
                {
                alt138=34;
                }
                break;
            case UUID:
                {
                alt138=35;
                }
                break;
            case STRUUID:
                {
                alt138=36;
                }
                break;
            case MD5:
                {
                alt138=37;
                }
                break;
            case SHA1:
                {
                alt138=38;
                }
                break;
            case SHA224:
                {
                alt138=39;
                }
                break;
            case SHA256:
                {
                alt138=40;
                }
                break;
            case SHA384:
                {
                alt138=41;
                }
                break;
            case SHA512:
                {
                alt138=42;
                }
                break;
            case COALESCE:
                {
                alt138=43;
                }
                break;
            case IF:
                {
                alt138=44;
                }
                break;
            case STRLANG:
                {
                alt138=45;
                }
                break;
            case STRDT:
                {
                alt138=46;
                }
                break;
            case SAMETERM:
                {
                alt138=47;
                }
                break;
            case ISIRI:
                {
                alt138=48;
                }
                break;
            case ISURI:
                {
                alt138=49;
                }
                break;
            case ISBLANK:
                {
                alt138=50;
                }
                break;
            case ISLITERAL:
                {
                alt138=51;
                }
                break;
            case ISNUMERIC:
                {
                alt138=52;
                }
                break;
            case REGEX:
                {
                alt138=53;
                }
                break;
            case EXISTS:
                {
                alt138=54;
                }
                break;
            case NOT:
                {
                alt138=55;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }

            switch (alt138) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:787:4: STR OPEN_BRACE e1= expression CLOSE_BRACE
                    {
                    STR323=(Token)match(input,STR,FOLLOW_STR_in_builtInCall6149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STR.add(STR323);


                    OPEN_BRACE324=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE324);


                    pushFollow(FOLLOW_expression_in_builtInCall6155);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                    CLOSE_BRACE325=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE325);


                    // AST REWRITE
                    // elements: e1, STR
                    // token labels: 
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 787:60: -> ^( STR $e1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:787:64: ^( STR $e1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:788:4: LANG OPEN_BRACE e2= expression CLOSE_BRACE
                    {
                    LANG326=(Token)match(input,LANG,FOLLOW_LANG_in_builtInCall6189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANG.add(LANG326);


                    OPEN_BRACE327=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE327);


                    pushFollow(FOLLOW_expression_in_builtInCall6195);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    CLOSE_BRACE328=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE328);


                    // AST REWRITE
                    // elements: LANG, e2
                    // token labels: 
                    // rule labels: e2, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 788:60: -> ^( LANG $e2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:788:64: ^( LANG $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LANG.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:789:4: LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE
                    {
                    LANGMATCHES329=(Token)match(input,LANGMATCHES,FOLLOW_LANGMATCHES_in_builtInCall6228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANGMATCHES.add(LANGMATCHES329);


                    OPEN_BRACE330=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE330);


                    pushFollow(FOLLOW_expression_in_builtInCall6234);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);


                    pushFollow(FOLLOW_expression_in_builtInCall6240);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    CLOSE_BRACE332=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE332);


                    // AST REWRITE
                    // elements: LANGMATCHES, e3, e4
                    // token labels: 
                    // rule labels: e3, retval, e4
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 789:78: -> ^( LANGMATCHES $e3 $e4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:789:82: ^( LANGMATCHES $e3 $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LANGMATCHES.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:790:4: DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE
                    {
                    DATATYPE333=(Token)match(input,DATATYPE,FOLLOW_DATATYPE_in_builtInCall6267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATATYPE.add(DATATYPE333);


                    OPEN_BRACE334=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE334);


                    pushFollow(FOLLOW_expression_in_builtInCall6273);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());

                    CLOSE_BRACE335=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE335);


                    // AST REWRITE
                    // elements: DATATYPE, e5
                    // token labels: 
                    // rule labels: e5, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 790:60: -> ^( DATATYPE $e5)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:790:64: ^( DATATYPE $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DATATYPE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:791:4: BOUND OPEN_BRACE v= var CLOSE_BRACE
                    {
                    BOUND336=(Token)match(input,BOUND,FOLLOW_BOUND_in_builtInCall6302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOUND.add(BOUND336);


                    OPEN_BRACE337=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE337);


                    pushFollow(FOLLOW_var_in_builtInCall6308);
                    v=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_var.add(v.getTree());

                    CLOSE_BRACE338=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE338);


                    // AST REWRITE
                    // elements: BOUND, v
                    // token labels: 
                    // rule labels: v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 791:60: -> ^( BOUND $v)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:791:64: ^( BOUND $v)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BOUND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_v.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:792:4: IRI OPEN_BRACE e51= expression CLOSE_BRACE
                    {
                    IRI339=(Token)match(input,IRI,FOLLOW_IRI_in_builtInCall6348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI.add(IRI339);


                    OPEN_BRACE340=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE340);


                    pushFollow(FOLLOW_expression_in_builtInCall6354);
                    e51=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e51.getTree());

                    CLOSE_BRACE341=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE341);


                    // AST REWRITE
                    // elements: IRI, e51
                    // token labels: 
                    // rule labels: e51, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e51=new RewriteRuleSubtreeStream(adaptor,"rule e51",e51!=null?e51.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 792:60: -> ^( IRI $e51)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:792:64: ^( IRI $e51)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_IRI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e51.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:793:4: URI OPEN_BRACE e6= expression CLOSE_BRACE
                    {
                    URI342=(Token)match(input,URI,FOLLOW_URI_in_builtInCall6387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_URI.add(URI342);


                    OPEN_BRACE343=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE343);


                    pushFollow(FOLLOW_expression_in_builtInCall6393);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());

                    CLOSE_BRACE344=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE344);


                    // AST REWRITE
                    // elements: e6, URI
                    // token labels: 
                    // rule labels: e6, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 793:60: -> ^( URI $e6)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:793:64: ^( URI $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_URI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:4: BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    {
                    BNODE345=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall6427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BNODE.add(BNODE345);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:10: ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==OPEN_BRACE) ) {
                        int LA137_1 = input.LA(2);

                        if ( (LA137_1==CLOSE_BRACE) ) {
                            alt137=2;
                        }
                        else if ( (LA137_1==ABS||LA137_1==AVG||LA137_1==BNODE||LA137_1==BOUND||LA137_1==CEIL||LA137_1==COALESCE||LA137_1==CONCAT||LA137_1==CONTAINS||LA137_1==COUNT||(LA137_1 >= DATATYPE && LA137_1 <= DECIMAL_POSITIVE)||(LA137_1 >= DOUBLE && LA137_1 <= DOUBLE_POSITIVE)||LA137_1==ENCODE_FOR_URI||LA137_1==EXISTS||LA137_1==FALSE||LA137_1==FLOOR||LA137_1==GROUP_CONCAT||LA137_1==HOURS||LA137_1==IF||(LA137_1 >= INTEGER && LA137_1 <= INTEGER_POSITIVE)||LA137_1==IRI||(LA137_1 >= IRI_REF && LA137_1 <= ISURI)||(LA137_1 >= LANG && LA137_1 <= LANGMATCHES)||LA137_1==LCASE||(LA137_1 >= MAX && LA137_1 <= MIN)||LA137_1==MINUTES||LA137_1==MONTH||LA137_1==NOT||LA137_1==NOW||LA137_1==OPEN_BRACE||(LA137_1 >= PNAME_LN && LA137_1 <= PNAME_NS)||LA137_1==RAND||(LA137_1 >= REGEX && LA137_1 <= REPLACE)||LA137_1==ROUND||(LA137_1 >= SAMETERM && LA137_1 <= SECONDS)||(LA137_1 >= SHA1 && LA137_1 <= SHA512)||(LA137_1 >= STR && LA137_1 <= STRENDS)||(LA137_1 >= STRING_LITERAL1 && LA137_1 <= STRUUID)||LA137_1==SUBSTR||LA137_1==SUM||LA137_1==TIMEZONE||LA137_1==TRUE||LA137_1==TZ||LA137_1==UCASE||LA137_1==URI||LA137_1==UUID||(LA137_1 >= VAR1 && LA137_1 <= VAR2)||LA137_1==YEAR||LA137_1==251||(LA137_1 >= 254 && LA137_1 <= 255)) ) {
                            alt137=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 137, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        throw nvae;

                    }
                    switch (alt137) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:12: OPEN_BRACE e7= expression CLOSE_BRACE
                            {
                            OPEN_BRACE346=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE346);


                            pushFollow(FOLLOW_expression_in_builtInCall6435);
                            e7=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e7.getTree());

                            CLOSE_BRACE347=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6437); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE347);


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:51: nil
                            {
                            pushFollow(FOLLOW_nil_in_builtInCall6441);
                            nil348=nil();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nil.add(nil348.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: BNODE, e7
                    // token labels: 
                    // rule labels: e7, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 794:60: -> ^( BNODE ( $e7)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:64: ^( BNODE ( $e7)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_BNODE.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:794:74: ( $e7)?
                        if ( stream_e7.hasNext() ) {
                            adaptor.addChild(root_1, stream_e7.nextTree());

                        }
                        stream_e7.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:795:4: RAND nil
                    {
                    RAND349=(Token)match(input,RAND,FOLLOW_RAND_in_builtInCall6464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAND.add(RAND349);


                    pushFollow(FOLLOW_nil_in_builtInCall6466);
                    nil350=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil350.getTree());

                    // AST REWRITE
                    // elements: RAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 795:60: -> ^( RAND NIL )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:795:64: ^( RAND NIL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_RAND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        (XTree)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:796:4: ABS OPEN_BRACE e8= expression CLOSE_BRACE
                    {
                    ABS351=(Token)match(input,ABS,FOLLOW_ABS_in_builtInCall6529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABS.add(ABS351);


                    OPEN_BRACE352=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE352);


                    pushFollow(FOLLOW_expression_in_builtInCall6535);
                    e8=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e8.getTree());

                    CLOSE_BRACE353=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE353);


                    // AST REWRITE
                    // elements: e8, ABS
                    // token labels: 
                    // rule labels: e8, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e8=new RewriteRuleSubtreeStream(adaptor,"rule e8",e8!=null?e8.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 796:60: -> ^( ABS $e8)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:796:64: ^( ABS $e8)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ABS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e8.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:797:4: CEIL OPEN_BRACE e9= expression CLOSE_BRACE
                    {
                    CEIL354=(Token)match(input,CEIL,FOLLOW_CEIL_in_builtInCall6569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CEIL.add(CEIL354);


                    OPEN_BRACE355=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE355);


                    pushFollow(FOLLOW_expression_in_builtInCall6575);
                    e9=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e9.getTree());

                    CLOSE_BRACE356=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE356);


                    // AST REWRITE
                    // elements: CEIL, e9
                    // token labels: 
                    // rule labels: e9, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e9=new RewriteRuleSubtreeStream(adaptor,"rule e9",e9!=null?e9.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 797:60: -> ^( CEIL $e9)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:797:64: ^( CEIL $e9)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CEIL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e9.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 12 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:798:4: FLOOR OPEN_BRACE e10= expression CLOSE_BRACE
                    {
                    FLOOR357=(Token)match(input,FLOOR,FOLLOW_FLOOR_in_builtInCall6608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FLOOR.add(FLOOR357);


                    OPEN_BRACE358=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE358);


                    pushFollow(FOLLOW_expression_in_builtInCall6614);
                    e10=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e10.getTree());

                    CLOSE_BRACE359=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE359);


                    // AST REWRITE
                    // elements: FLOOR, e10
                    // token labels: 
                    // rule labels: e10, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e10=new RewriteRuleSubtreeStream(adaptor,"rule e10",e10!=null?e10.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 798:60: -> ^( FLOOR $e10)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:798:64: ^( FLOOR $e10)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_FLOOR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e10.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 13 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:799:4: ROUND OPEN_BRACE e11= expression CLOSE_BRACE
                    {
                    ROUND360=(Token)match(input,ROUND,FOLLOW_ROUND_in_builtInCall6645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND.add(ROUND360);


                    OPEN_BRACE361=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE361);


                    pushFollow(FOLLOW_expression_in_builtInCall6651);
                    e11=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e11.getTree());

                    CLOSE_BRACE362=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE362);


                    // AST REWRITE
                    // elements: ROUND, e11
                    // token labels: 
                    // rule labels: e11, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e11=new RewriteRuleSubtreeStream(adaptor,"rule e11",e11!=null?e11.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 799:60: -> ^( ROUND $e11)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:799:64: ^( ROUND $e11)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ROUND.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e11.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 14 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:800:4: CONCAT e12= expressionList
                    {
                    CONCAT363=(Token)match(input,CONCAT,FOLLOW_CONCAT_in_builtInCall6682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONCAT.add(CONCAT363);


                    pushFollow(FOLLOW_expressionList_in_builtInCall6686);
                    e12=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e12.getTree());

                    // AST REWRITE
                    // elements: e12, CONCAT
                    // token labels: 
                    // rule labels: e12, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e12=new RewriteRuleSubtreeStream(adaptor,"rule e12",e12!=null?e12.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 800:60: -> ^( CONCAT $e12)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:800:64: ^( CONCAT $e12)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONCAT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e12.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:801:4: s= substringExpression
                    {
                    pushFollow(FOLLOW_substringExpression_in_builtInCall6735);
                    s=substringExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substringExpression.add(s.getTree());

                    // AST REWRITE
                    // elements: s
                    // token labels: 
                    // rule labels: s, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 801:60: -> $s
                    {
                        adaptor.addChild(root_0, stream_s.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 16 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:802:4: STRLEN OPEN_BRACE e13= expression CLOSE_BRACE
                    {
                    STRLEN364=(Token)match(input,STRLEN,FOLLOW_STRLEN_in_builtInCall6780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLEN.add(STRLEN364);


                    OPEN_BRACE365=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE365);


                    pushFollow(FOLLOW_expression_in_builtInCall6786);
                    e13=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e13.getTree());

                    CLOSE_BRACE366=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE366);


                    // AST REWRITE
                    // elements: e13, STRLEN
                    // token labels: 
                    // rule labels: e13, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e13=new RewriteRuleSubtreeStream(adaptor,"rule e13",e13!=null?e13.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 802:60: -> ^( STRLEN $e13)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:802:64: ^( STRLEN $e13)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRLEN.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e13.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 17 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:803:7: strReplaceExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_strReplaceExpression_in_builtInCall6819);
                    strReplaceExpression367=strReplaceExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strReplaceExpression367.getTree());

                    }
                    break;
                case 18 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:804:4: UCASE OPEN_BRACE e14= expression CLOSE_BRACE
                    {
                    UCASE368=(Token)match(input,UCASE,FOLLOW_UCASE_in_builtInCall6824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UCASE.add(UCASE368);


                    OPEN_BRACE369=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE369);


                    pushFollow(FOLLOW_expression_in_builtInCall6830);
                    e14=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e14.getTree());

                    CLOSE_BRACE370=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE370);


                    // AST REWRITE
                    // elements: UCASE, e14
                    // token labels: 
                    // rule labels: e14, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e14=new RewriteRuleSubtreeStream(adaptor,"rule e14",e14!=null?e14.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 804:60: -> ^( UCASE $e14)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:804:64: ^( UCASE $e14)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_UCASE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e14.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 19 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:805:4: LCASE OPEN_BRACE e15= expression CLOSE_BRACE
                    {
                    LCASE371=(Token)match(input,LCASE,FOLLOW_LCASE_in_builtInCall6861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCASE.add(LCASE371);


                    OPEN_BRACE372=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE372);


                    pushFollow(FOLLOW_expression_in_builtInCall6867);
                    e15=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e15.getTree());

                    CLOSE_BRACE373=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE373);


                    // AST REWRITE
                    // elements: e15, LCASE
                    // token labels: 
                    // rule labels: e15, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e15=new RewriteRuleSubtreeStream(adaptor,"rule e15",e15!=null?e15.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 805:60: -> ^( LCASE $e15)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:805:64: ^( LCASE $e15)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_LCASE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e15.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 20 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:806:4: ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE
                    {
                    ENCODE_FOR_URI374=(Token)match(input,ENCODE_FOR_URI,FOLLOW_ENCODE_FOR_URI_in_builtInCall6898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODE_FOR_URI.add(ENCODE_FOR_URI374);


                    OPEN_BRACE375=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE375);


                    pushFollow(FOLLOW_expression_in_builtInCall6904);
                    e16=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e16.getTree());

                    CLOSE_BRACE376=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE376);


                    // AST REWRITE
                    // elements: e16, ENCODE_FOR_URI
                    // token labels: 
                    // rule labels: e16, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e16=new RewriteRuleSubtreeStream(adaptor,"rule e16",e16!=null?e16.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 806:60: -> ^( ENCODE_FOR_URI $e16)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:806:64: ^( ENCODE_FOR_URI $e16)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ENCODE_FOR_URI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e16.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 21 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:807:4: CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE
                    {
                    CONTAINS377=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_builtInCall6926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTAINS.add(CONTAINS377);


                    OPEN_BRACE378=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE378);


                    pushFollow(FOLLOW_expression_in_builtInCall6932);
                    e17=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e17.getTree());

                    COMMA379=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA379);


                    pushFollow(FOLLOW_expression_in_builtInCall6938);
                    e18=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e18.getTree());

                    CLOSE_BRACE380=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE380);


                    // AST REWRITE
                    // elements: e17, CONTAINS, e18
                    // token labels: 
                    // rule labels: e17, e18, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e17=new RewriteRuleSubtreeStream(adaptor,"rule e17",e17!=null?e17.tree:null);
                    RewriteRuleSubtreeStream stream_e18=new RewriteRuleSubtreeStream(adaptor,"rule e18",e18!=null?e18.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 807:78: -> ^( CONTAINS $e17 $e18)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:807:82: ^( CONTAINS $e17 $e18)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_CONTAINS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e17.nextTree());

                        adaptor.addChild(root_1, stream_e18.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 22 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:808:4: STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE
                    {
                    STRSTARTS381=(Token)match(input,STRSTARTS,FOLLOW_STRSTARTS_in_builtInCall6966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRSTARTS.add(STRSTARTS381);


                    OPEN_BRACE382=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE382);


                    pushFollow(FOLLOW_expression_in_builtInCall6972);
                    e19=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e19.getTree());

                    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA383);


                    pushFollow(FOLLOW_expression_in_builtInCall6978);
                    e20=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e20.getTree());

                    CLOSE_BRACE384=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE384);


                    // AST REWRITE
                    // elements: e19, e20, STRSTARTS
                    // token labels: 
                    // rule labels: e20, e19, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e20=new RewriteRuleSubtreeStream(adaptor,"rule e20",e20!=null?e20.tree:null);
                    RewriteRuleSubtreeStream stream_e19=new RewriteRuleSubtreeStream(adaptor,"rule e19",e19!=null?e19.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 808:78: -> ^( STRSTARTS $e19 $e20)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:808:82: ^( STRSTARTS $e19 $e20)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRSTARTS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e19.nextTree());

                        adaptor.addChild(root_1, stream_e20.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 23 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:809:4: STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRENDS385=(Token)match(input,STRENDS,FOLLOW_STRENDS_in_builtInCall7005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRENDS.add(STRENDS385);


                    OPEN_BRACE386=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE386);


                    pushFollow(FOLLOW_expression_in_builtInCall7011);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA387=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA387);


                    pushFollow(FOLLOW_expression_in_builtInCall7017);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE388=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE388);


                    // AST REWRITE
                    // elements: e21, e22, STRENDS
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 809:78: -> ^( STRENDS $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:809:82: ^( STRENDS $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRENDS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 24 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:810:4: STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRBEFORE389=(Token)match(input,STRBEFORE,FOLLOW_STRBEFORE_in_builtInCall7046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRBEFORE.add(STRBEFORE389);


                    OPEN_BRACE390=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE390);


                    pushFollow(FOLLOW_expression_in_builtInCall7052);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA391=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA391);


                    pushFollow(FOLLOW_expression_in_builtInCall7058);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE392=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE392);


                    // AST REWRITE
                    // elements: STRBEFORE, e21, e22
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 810:80: -> ^( STRBEFORE $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:810:84: ^( STRBEFORE $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRBEFORE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 25 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:811:4: STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRAFTER393=(Token)match(input,STRAFTER,FOLLOW_STRAFTER_in_builtInCall7087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRAFTER.add(STRAFTER393);


                    OPEN_BRACE394=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE394);


                    pushFollow(FOLLOW_expression_in_builtInCall7093);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());

                    COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);


                    pushFollow(FOLLOW_expression_in_builtInCall7099);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());

                    CLOSE_BRACE396=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE396);


                    // AST REWRITE
                    // elements: e22, e21, STRAFTER
                    // token labels: 
                    // rule labels: e22, e21, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 811:79: -> ^( STRAFTER $e21 $e22)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:811:83: ^( STRAFTER $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRAFTER.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());

                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 26 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:812:4: YEAR OPEN_BRACE e23= expression CLOSE_BRACE
                    {
                    YEAR397=(Token)match(input,YEAR,FOLLOW_YEAR_in_builtInCall7128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_YEAR.add(YEAR397);


                    OPEN_BRACE398=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE398);


                    pushFollow(FOLLOW_expression_in_builtInCall7134);
                    e23=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e23.getTree());

                    CLOSE_BRACE399=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE399);


                    // AST REWRITE
                    // elements: e23, YEAR
                    // token labels: 
                    // rule labels: e23, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e23=new RewriteRuleSubtreeStream(adaptor,"rule e23",e23!=null?e23.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 812:60: -> ^( YEAR $e23)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:812:64: ^( YEAR $e23)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_YEAR.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e23.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 27 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:813:4: MONTH OPEN_BRACE e24= expression CLOSE_BRACE
                    {
                    MONTH400=(Token)match(input,MONTH,FOLLOW_MONTH_in_builtInCall7166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MONTH.add(MONTH400);


                    OPEN_BRACE401=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE401);


                    pushFollow(FOLLOW_expression_in_builtInCall7172);
                    e24=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e24.getTree());

                    CLOSE_BRACE402=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE402);


                    // AST REWRITE
                    // elements: MONTH, e24
                    // token labels: 
                    // rule labels: e24, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e24=new RewriteRuleSubtreeStream(adaptor,"rule e24",e24!=null?e24.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 813:60: -> ^( MONTH $e24)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:813:64: ^( MONTH $e24)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MONTH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e24.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 28 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:814:4: DAY OPEN_BRACE e25= expression CLOSE_BRACE
                    {
                    DAY403=(Token)match(input,DAY,FOLLOW_DAY_in_builtInCall7203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DAY.add(DAY403);


                    OPEN_BRACE404=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE404);


                    pushFollow(FOLLOW_expression_in_builtInCall7209);
                    e25=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e25.getTree());

                    CLOSE_BRACE405=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE405);


                    // AST REWRITE
                    // elements: e25, DAY
                    // token labels: 
                    // rule labels: e25, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e25=new RewriteRuleSubtreeStream(adaptor,"rule e25",e25!=null?e25.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 814:60: -> ^( DAY $e25)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:814:64: ^( DAY $e25)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DAY.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e25.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 29 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:815:4: HOURS OPEN_BRACE e26= expression CLOSE_BRACE
                    {
                    HOURS406=(Token)match(input,HOURS,FOLLOW_HOURS_in_builtInCall7242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HOURS.add(HOURS406);


                    OPEN_BRACE407=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE407);


                    pushFollow(FOLLOW_expression_in_builtInCall7248);
                    e26=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e26.getTree());

                    CLOSE_BRACE408=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE408);


                    // AST REWRITE
                    // elements: HOURS, e26
                    // token labels: 
                    // rule labels: e26, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e26=new RewriteRuleSubtreeStream(adaptor,"rule e26",e26!=null?e26.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 815:60: -> ^( HOURS $e26)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:815:64: ^( HOURS $e26)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_HOURS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e26.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 30 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:816:4: MINUTES OPEN_BRACE e27= expression CLOSE_BRACE
                    {
                    MINUTES409=(Token)match(input,MINUTES,FOLLOW_MINUTES_in_builtInCall7279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUTES.add(MINUTES409);


                    OPEN_BRACE410=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE410);


                    pushFollow(FOLLOW_expression_in_builtInCall7285);
                    e27=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e27.getTree());

                    CLOSE_BRACE411=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE411);


                    // AST REWRITE
                    // elements: MINUTES, e27
                    // token labels: 
                    // rule labels: e27, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e27=new RewriteRuleSubtreeStream(adaptor,"rule e27",e27!=null?e27.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 816:60: -> ^( MINUTES $e27)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:816:64: ^( MINUTES $e27)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MINUTES.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e27.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 31 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:817:4: SECONDS OPEN_BRACE e28= expression CLOSE_BRACE
                    {
                    SECONDS412=(Token)match(input,SECONDS,FOLLOW_SECONDS_in_builtInCall7314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SECONDS.add(SECONDS412);


                    OPEN_BRACE413=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE413);


                    pushFollow(FOLLOW_expression_in_builtInCall7320);
                    e28=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e28.getTree());

                    CLOSE_BRACE414=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE414);


                    // AST REWRITE
                    // elements: e28, SECONDS
                    // token labels: 
                    // rule labels: e28, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e28=new RewriteRuleSubtreeStream(adaptor,"rule e28",e28!=null?e28.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 817:60: -> ^( SECONDS $e28)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:817:64: ^( SECONDS $e28)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SECONDS.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e28.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 32 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:818:4: TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE
                    {
                    TIMEZONE415=(Token)match(input,TIMEZONE,FOLLOW_TIMEZONE_in_builtInCall7349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEZONE.add(TIMEZONE415);


                    OPEN_BRACE416=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE416);


                    pushFollow(FOLLOW_expression_in_builtInCall7355);
                    e29=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e29.getTree());

                    CLOSE_BRACE417=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE417);


                    // AST REWRITE
                    // elements: e29, TIMEZONE
                    // token labels: 
                    // rule labels: e29, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e29=new RewriteRuleSubtreeStream(adaptor,"rule e29",e29!=null?e29.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 818:60: -> ^( TIMEZONE $e29)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:818:64: ^( TIMEZONE $e29)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_TIMEZONE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e29.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 33 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:819:4: TZ OPEN_BRACE e30= expression CLOSE_BRACE
                    {
                    TZ418=(Token)match(input,TZ,FOLLOW_TZ_in_builtInCall7383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TZ.add(TZ418);


                    OPEN_BRACE419=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE419);


                    pushFollow(FOLLOW_expression_in_builtInCall7389);
                    e30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e30.getTree());

                    CLOSE_BRACE420=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE420);


                    // AST REWRITE
                    // elements: TZ, e30
                    // token labels: 
                    // rule labels: e30, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e30=new RewriteRuleSubtreeStream(adaptor,"rule e30",e30!=null?e30.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 819:60: -> ^( TZ $e30)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:819:64: ^( TZ $e30)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_TZ.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e30.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 34 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:820:4: NOW nil
                    {
                    NOW421=(Token)match(input,NOW,FOLLOW_NOW_in_builtInCall7423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOW.add(NOW421);


                    pushFollow(FOLLOW_nil_in_builtInCall7425);
                    nil422=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil422.getTree());

                    // AST REWRITE
                    // elements: NOW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 820:12: -> NOW
                    {
                        adaptor.addChild(root_0, 
                        stream_NOW.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 35 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:821:4: UUID nil
                    {
                    UUID423=(Token)match(input,UUID,FOLLOW_UUID_in_builtInCall7434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UUID.add(UUID423);


                    pushFollow(FOLLOW_nil_in_builtInCall7436);
                    nil424=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil424.getTree());

                    // AST REWRITE
                    // elements: UUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 821:13: -> UUID
                    {
                        adaptor.addChild(root_0, 
                        stream_UUID.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 36 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:822:4: STRUUID nil
                    {
                    STRUUID425=(Token)match(input,STRUUID,FOLLOW_STRUUID_in_builtInCall7445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRUUID.add(STRUUID425);


                    pushFollow(FOLLOW_nil_in_builtInCall7447);
                    nil426=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil426.getTree());

                    // AST REWRITE
                    // elements: STRUUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 822:16: -> STRUUID
                    {
                        adaptor.addChild(root_0, 
                        stream_STRUUID.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 37 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:823:4: MD5 OPEN_BRACE e31= expression CLOSE_BRACE
                    {
                    MD5427=(Token)match(input,MD5,FOLLOW_MD5_in_builtInCall7456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MD5.add(MD5427);


                    OPEN_BRACE428=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE428);


                    pushFollow(FOLLOW_expression_in_builtInCall7462);
                    e31=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e31.getTree());

                    CLOSE_BRACE429=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE429);


                    // AST REWRITE
                    // elements: MD5, e31
                    // token labels: 
                    // rule labels: e31, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e31=new RewriteRuleSubtreeStream(adaptor,"rule e31",e31!=null?e31.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 823:60: -> ^( MD5 $e31)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:823:64: ^( MD5 $e31)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MD5.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e31.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 38 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:824:4: SHA1 OPEN_BRACE e32= expression CLOSE_BRACE
                    {
                    SHA1430=(Token)match(input,SHA1,FOLLOW_SHA1_in_builtInCall7495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA1.add(SHA1430);


                    OPEN_BRACE431=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE431);


                    pushFollow(FOLLOW_expression_in_builtInCall7501);
                    e32=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e32.getTree());

                    CLOSE_BRACE432=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE432);


                    // AST REWRITE
                    // elements: e32, SHA1
                    // token labels: 
                    // rule labels: e32, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e32=new RewriteRuleSubtreeStream(adaptor,"rule e32",e32!=null?e32.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 824:60: -> ^( SHA1 $e32)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:824:64: ^( SHA1 $e32)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA1.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e32.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 39 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:825:4: SHA224 OPEN_BRACE e33= expression CLOSE_BRACE
                    {
                    SHA224433=(Token)match(input,SHA224,FOLLOW_SHA224_in_builtInCall7533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA224.add(SHA224433);


                    OPEN_BRACE434=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE434);


                    pushFollow(FOLLOW_expression_in_builtInCall7539);
                    e33=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e33.getTree());

                    CLOSE_BRACE435=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE435);


                    // AST REWRITE
                    // elements: SHA224, e33
                    // token labels: 
                    // rule labels: e33, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e33=new RewriteRuleSubtreeStream(adaptor,"rule e33",e33!=null?e33.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 825:60: -> ^( SHA224 $e33)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:825:64: ^( SHA224 $e33)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA224.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e33.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 40 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:826:4: SHA256 OPEN_BRACE e34= expression CLOSE_BRACE
                    {
                    SHA256436=(Token)match(input,SHA256,FOLLOW_SHA256_in_builtInCall7569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA256.add(SHA256436);


                    OPEN_BRACE437=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE437);


                    pushFollow(FOLLOW_expression_in_builtInCall7575);
                    e34=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e34.getTree());

                    CLOSE_BRACE438=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE438);


                    // AST REWRITE
                    // elements: SHA256, e34
                    // token labels: 
                    // rule labels: e34, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e34=new RewriteRuleSubtreeStream(adaptor,"rule e34",e34!=null?e34.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 826:60: -> ^( SHA256 $e34)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:826:64: ^( SHA256 $e34)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA256.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e34.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 41 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:827:4: SHA384 OPEN_BRACE e35= expression CLOSE_BRACE
                    {
                    SHA384439=(Token)match(input,SHA384,FOLLOW_SHA384_in_builtInCall7605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA384.add(SHA384439);


                    OPEN_BRACE440=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE440);


                    pushFollow(FOLLOW_expression_in_builtInCall7611);
                    e35=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e35.getTree());

                    CLOSE_BRACE441=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE441);


                    // AST REWRITE
                    // elements: SHA384, e35
                    // token labels: 
                    // rule labels: e35, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e35=new RewriteRuleSubtreeStream(adaptor,"rule e35",e35!=null?e35.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 827:60: -> ^( SHA384 $e35)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:827:64: ^( SHA384 $e35)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA384.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e35.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 42 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:828:4: SHA512 OPEN_BRACE e36= expression CLOSE_BRACE
                    {
                    SHA512442=(Token)match(input,SHA512,FOLLOW_SHA512_in_builtInCall7641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA512.add(SHA512442);


                    OPEN_BRACE443=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE443);


                    pushFollow(FOLLOW_expression_in_builtInCall7647);
                    e36=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e36.getTree());

                    CLOSE_BRACE444=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE444);


                    // AST REWRITE
                    // elements: e36, SHA512
                    // token labels: 
                    // rule labels: e36, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e36=new RewriteRuleSubtreeStream(adaptor,"rule e36",e36!=null?e36.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 828:60: -> ^( SHA512 $e36)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:828:64: ^( SHA512 $e36)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SHA512.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e36.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 43 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:829:4: COALESCE e37= expressionList
                    {
                    COALESCE445=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtInCall7677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE445);


                    pushFollow(FOLLOW_expressionList_in_builtInCall7681);
                    e37=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e37.getTree());

                    // AST REWRITE
                    // elements: COALESCE, e37
                    // token labels: 
                    // rule labels: e37, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e37=new RewriteRuleSubtreeStream(adaptor,"rule e37",e37!=null?e37.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 829:60: -> ^( COALESCE $e37)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:829:64: ^( COALESCE $e37)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_COALESCE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e37.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 44 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:830:4: IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE
                    {
                    IF446=(Token)match(input,IF,FOLLOW_IF_in_builtInCall7726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF446);


                    OPEN_BRACE447=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE447);


                    pushFollow(FOLLOW_expression_in_builtInCall7732);
                    e38=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e38.getTree());

                    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA448);


                    pushFollow(FOLLOW_expression_in_builtInCall7738);
                    e39=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e39.getTree());

                    COMMA449=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA449);


                    pushFollow(FOLLOW_expression_in_builtInCall7744);
                    e40=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e40.getTree());

                    CLOSE_BRACE450=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE450);


                    // AST REWRITE
                    // elements: e40, e38, e39, IF
                    // token labels: 
                    // rule labels: e40, e39, e38, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e40=new RewriteRuleSubtreeStream(adaptor,"rule e40",e40!=null?e40.tree:null);
                    RewriteRuleSubtreeStream stream_e39=new RewriteRuleSubtreeStream(adaptor,"rule e39",e39!=null?e39.tree:null);
                    RewriteRuleSubtreeStream stream_e38=new RewriteRuleSubtreeStream(adaptor,"rule e38",e38!=null?e38.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 830:90: -> ^( IF $e38 $e39 $e40)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:830:94: ^( IF $e38 $e39 $e40)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_IF.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e38.nextTree());

                        adaptor.addChild(root_1, stream_e39.nextTree());

                        adaptor.addChild(root_1, stream_e40.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 45 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:831:4: STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE
                    {
                    STRLANG451=(Token)match(input,STRLANG,FOLLOW_STRLANG_in_builtInCall7772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLANG.add(STRLANG451);


                    OPEN_BRACE452=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE452);


                    pushFollow(FOLLOW_expression_in_builtInCall7778);
                    e41=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e41.getTree());

                    COMMA453=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA453);


                    pushFollow(FOLLOW_expression_in_builtInCall7784);
                    e42=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e42.getTree());

                    CLOSE_BRACE454=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE454);


                    // AST REWRITE
                    // elements: STRLANG, e41, e42
                    // token labels: 
                    // rule labels: e42, e41, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e42=new RewriteRuleSubtreeStream(adaptor,"rule e42",e42!=null?e42.tree:null);
                    RewriteRuleSubtreeStream stream_e41=new RewriteRuleSubtreeStream(adaptor,"rule e41",e41!=null?e41.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 831:90: -> ^( STRLANG $e41 $e42)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:831:94: ^( STRLANG $e41 $e42)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRLANG.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e41.nextTree());

                        adaptor.addChild(root_1, stream_e42.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 46 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:832:4: STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE
                    {
                    STRDT455=(Token)match(input,STRDT,FOLLOW_STRDT_in_builtInCall7825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRDT.add(STRDT455);


                    OPEN_BRACE456=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE456);


                    pushFollow(FOLLOW_expression_in_builtInCall7831);
                    e43=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e43.getTree());

                    COMMA457=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA457);


                    pushFollow(FOLLOW_expression_in_builtInCall7837);
                    e44=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e44.getTree());

                    CLOSE_BRACE458=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE458);


                    // AST REWRITE
                    // elements: e43, STRDT, e44
                    // token labels: 
                    // rule labels: e44, e43, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e44=new RewriteRuleSubtreeStream(adaptor,"rule e44",e44!=null?e44.tree:null);
                    RewriteRuleSubtreeStream stream_e43=new RewriteRuleSubtreeStream(adaptor,"rule e43",e43!=null?e43.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 832:90: -> ^( STRDT $e43 $e44)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:832:94: ^( STRDT $e43 $e44)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_STRDT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e43.nextTree());

                        adaptor.addChild(root_1, stream_e44.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 47 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:833:4: SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE
                    {
                    SAMETERM459=(Token)match(input,SAMETERM,FOLLOW_SAMETERM_in_builtInCall7880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMETERM.add(SAMETERM459);


                    OPEN_BRACE460=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE460);


                    pushFollow(FOLLOW_expression_in_builtInCall7886);
                    e45=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e45.getTree());

                    COMMA461=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA461);


                    pushFollow(FOLLOW_expression_in_builtInCall7892);
                    e46=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e46.getTree());

                    CLOSE_BRACE462=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE462);


                    // AST REWRITE
                    // elements: e45, SAMETERM, e46
                    // token labels: 
                    // rule labels: e46, e45, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e46=new RewriteRuleSubtreeStream(adaptor,"rule e46",e46!=null?e46.tree:null);
                    RewriteRuleSubtreeStream stream_e45=new RewriteRuleSubtreeStream(adaptor,"rule e45",e45!=null?e45.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 833:90: -> ^( SAMETERM $e45 $e46)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:833:94: ^( SAMETERM $e45 $e46)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SAMETERM.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e45.nextTree());

                        adaptor.addChild(root_1, stream_e46.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 48 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:834:4: ISIRI OPEN_BRACE e47= expression CLOSE_BRACE
                    {
                    ISIRI463=(Token)match(input,ISIRI,FOLLOW_ISIRI_in_builtInCall7932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISIRI.add(ISIRI463);


                    OPEN_BRACE464=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE464);


                    pushFollow(FOLLOW_expression_in_builtInCall7938);
                    e47=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e47.getTree());

                    CLOSE_BRACE465=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE465);


                    // AST REWRITE
                    // elements: e47, ISIRI
                    // token labels: 
                    // rule labels: e47, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e47=new RewriteRuleSubtreeStream(adaptor,"rule e47",e47!=null?e47.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 834:60: -> ^( ISIRI $e47)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:834:64: ^( ISIRI $e47)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISIRI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e47.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 49 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:835:4: ISURI OPEN_BRACE e48= expression CLOSE_BRACE
                    {
                    ISURI466=(Token)match(input,ISURI,FOLLOW_ISURI_in_builtInCall7969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISURI.add(ISURI466);


                    OPEN_BRACE467=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE467);


                    pushFollow(FOLLOW_expression_in_builtInCall7975);
                    e48=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e48.getTree());

                    CLOSE_BRACE468=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE468);


                    // AST REWRITE
                    // elements: e48, ISURI
                    // token labels: 
                    // rule labels: e48, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e48=new RewriteRuleSubtreeStream(adaptor,"rule e48",e48!=null?e48.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 835:60: -> ^( ISURI $e48)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:835:64: ^( ISURI $e48)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISURI.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e48.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 50 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:836:4: ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE
                    {
                    ISBLANK469=(Token)match(input,ISBLANK,FOLLOW_ISBLANK_in_builtInCall8006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISBLANK.add(ISBLANK469);


                    OPEN_BRACE470=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE470);


                    pushFollow(FOLLOW_expression_in_builtInCall8012);
                    e52=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e52.getTree());

                    CLOSE_BRACE471=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE471);


                    // AST REWRITE
                    // elements: ISBLANK, e52
                    // token labels: 
                    // rule labels: e52, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e52=new RewriteRuleSubtreeStream(adaptor,"rule e52",e52!=null?e52.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 836:60: -> ^( ISBLANK $e52)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:836:64: ^( ISBLANK $e52)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISBLANK.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e52.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 51 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:837:4: ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE
                    {
                    ISLITERAL472=(Token)match(input,ISLITERAL,FOLLOW_ISLITERAL_in_builtInCall8041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISLITERAL.add(ISLITERAL472);


                    OPEN_BRACE473=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE473);


                    pushFollow(FOLLOW_expression_in_builtInCall8047);
                    e49=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e49.getTree());

                    CLOSE_BRACE474=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE474);


                    // AST REWRITE
                    // elements: ISLITERAL, e49
                    // token labels: 
                    // rule labels: e49, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e49=new RewriteRuleSubtreeStream(adaptor,"rule e49",e49!=null?e49.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 837:60: -> ^( ISLITERAL $e49)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:837:64: ^( ISLITERAL $e49)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISLITERAL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e49.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 52 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:838:4: ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE
                    {
                    ISNUMERIC475=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_builtInCall8074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISNUMERIC.add(ISNUMERIC475);


                    OPEN_BRACE476=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE476);


                    pushFollow(FOLLOW_expression_in_builtInCall8080);
                    e50=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e50.getTree());

                    CLOSE_BRACE477=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE477);


                    // AST REWRITE
                    // elements: e50, ISNUMERIC
                    // token labels: 
                    // rule labels: e50, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e50=new RewriteRuleSubtreeStream(adaptor,"rule e50",e50!=null?e50.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 838:60: -> ^( ISNUMERIC $e50)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:838:64: ^( ISNUMERIC $e50)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_ISNUMERIC.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_e50.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 53 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:839:4: regexExpression
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_regexExpression_in_builtInCall8107);
                    regexExpression478=regexExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regexExpression478.getTree());

                    }
                    break;
                case 54 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:840:4: existsFunc
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_existsFunc_in_builtInCall8112);
                    existsFunc479=existsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsFunc479.getTree());

                    }
                    break;
                case 55 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:841:4: notExistsFunc
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_notExistsFunc_in_builtInCall8117);
                    notExistsFunc480=notExistsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notExistsFunc480.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "builtInCall"


    public static class regexExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "regexExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:844:1: regexExpression : REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlParser.regexExpression_return regexExpression() throws RecognitionException {
        IbmSparqlParser.regexExpression_return retval = new IbmSparqlParser.regexExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token REGEX481=null;
        Token OPEN_BRACE482=null;
        Token COMMA483=null;
        Token COMMA484=null;
        Token CLOSE_BRACE485=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.expression_return e2 =null;

        IbmSparqlParser.expression_return e3 =null;


        XTree REGEX481_tree=null;
        XTree OPEN_BRACE482_tree=null;
        XTree COMMA483_tree=null;
        XTree COMMA484_tree=null;
        XTree CLOSE_BRACE485_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_REGEX=new RewriteRuleTokenStream(adaptor,"token REGEX");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:845:2: ( REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:845:4: REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            REGEX481=(Token)match(input,REGEX,FOLLOW_REGEX_in_regexExpression8134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGEX.add(REGEX481);


            OPEN_BRACE482=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_regexExpression8136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE482);


            pushFollow(FOLLOW_expression_in_regexExpression8140);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA483);


            pushFollow(FOLLOW_expression_in_regexExpression8146);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:845:55: ( COMMA e3= expression )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==COMMA) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:845:57: COMMA e3= expression
                    {
                    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA484);


                    pushFollow(FOLLOW_expression_in_regexExpression8154);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }


            CLOSE_BRACE485=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_regexExpression8159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE485);


            // AST REWRITE
            // elements: e1, e3, REGEX, e2
            // token labels: 
            // rule labels: e1, e2, e3, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 847:3: -> ^( REGEX $e1 $e2 ( $e3)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:847:7: ^( REGEX $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_REGEX.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:847:28: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "regexExpression"


    public static class substringExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "substringExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:850:1: substringExpression : SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlParser.substringExpression_return substringExpression() throws RecognitionException {
        IbmSparqlParser.substringExpression_return retval = new IbmSparqlParser.substringExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token SUBSTR486=null;
        Token OPEN_BRACE487=null;
        Token COMMA488=null;
        Token COMMA489=null;
        Token CLOSE_BRACE490=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.expression_return e2 =null;

        IbmSparqlParser.expression_return e3 =null;


        XTree SUBSTR486_tree=null;
        XTree OPEN_BRACE487_tree=null;
        XTree COMMA488_tree=null;
        XTree COMMA489_tree=null;
        XTree CLOSE_BRACE490_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SUBSTR=new RewriteRuleTokenStream(adaptor,"token SUBSTR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:851:2: ( SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:851:6: SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            SUBSTR486=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_substringExpression8202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SUBSTR.add(SUBSTR486);


            OPEN_BRACE487=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_substringExpression8204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE487);


            pushFollow(FOLLOW_expression_in_substringExpression8208);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA488);


            pushFollow(FOLLOW_expression_in_substringExpression8214);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:851:58: ( COMMA e3= expression )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMMA) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:851:60: COMMA e3= expression
                    {
                    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA489);


                    pushFollow(FOLLOW_expression_in_substringExpression8222);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }


            CLOSE_BRACE490=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_substringExpression8227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE490);


            // AST REWRITE
            // elements: SUBSTR, e1, e3, e2
            // token labels: 
            // rule labels: e1, e2, e3, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 853:3: -> ^( SUBSTR $e1 $e2 ( $e3)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:853:7: ^( SUBSTR $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_SUBSTR.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:853:29: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "substringExpression"


    public static class strReplaceExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "strReplaceExpression"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:856:1: strReplaceExpression : REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) ;
    public final IbmSparqlParser.strReplaceExpression_return strReplaceExpression() throws RecognitionException {
        IbmSparqlParser.strReplaceExpression_return retval = new IbmSparqlParser.strReplaceExpression_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token REPLACE491=null;
        Token OPEN_BRACE492=null;
        Token COMMA493=null;
        Token COMMA494=null;
        Token COMMA495=null;
        Token CLOSE_BRACE496=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.expression_return e2 =null;

        IbmSparqlParser.expression_return e3 =null;

        IbmSparqlParser.expression_return e4 =null;


        XTree REPLACE491_tree=null;
        XTree OPEN_BRACE492_tree=null;
        XTree COMMA493_tree=null;
        XTree COMMA494_tree=null;
        XTree COMMA495_tree=null;
        XTree CLOSE_BRACE496_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:857:5: ( REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:857:9: REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE
            {
            REPLACE491=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_strReplaceExpression8269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REPLACE.add(REPLACE491);


            OPEN_BRACE492=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_strReplaceExpression8271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE492);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8275);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA493);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8281);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

            COMMA494=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA494);


            pushFollow(FOLLOW_expression_in_strReplaceExpression8287);
            e3=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:857:82: ( COMMA e4= expression )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:857:83: COMMA e4= expression
                    {
                    COMMA495=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA495);


                    pushFollow(FOLLOW_expression_in_strReplaceExpression8294);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    }
                    break;

            }


            CLOSE_BRACE496=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_strReplaceExpression8298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE496);


            // AST REWRITE
            // elements: e4, e3, e2, REPLACE, e1
            // token labels: 
            // rule labels: e1, e2, e3, retval, e4
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 858:9: -> ^( REPLACE $e1 $e2 $e3 ( $e4)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:858:12: ^( REPLACE $e1 $e2 $e3 ( $e4)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_REPLACE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());

                adaptor.addChild(root_1, stream_e2.nextTree());

                adaptor.addChild(root_1, stream_e3.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:858:37: ( $e4)?
                if ( stream_e4.hasNext() ) {
                    adaptor.addChild(root_1, stream_e4.nextTree());

                }
                stream_e4.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "strReplaceExpression"


    public static class existsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "existsFunc"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:861:1: existsFunc : EXISTS g= groupGraphPattern -> ^( EXISTS $g) ;
    public final IbmSparqlParser.existsFunc_return existsFunc() throws RecognitionException {
        IbmSparqlParser.existsFunc_return retval = new IbmSparqlParser.existsFunc_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token EXISTS497=null;
        IbmSparqlParser.groupGraphPattern_return g =null;


        XTree EXISTS497_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:862:2: ( EXISTS g= groupGraphPattern -> ^( EXISTS $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:862:6: EXISTS g= groupGraphPattern
            {
            EXISTS497=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsFunc8347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS497);


            pushFollow(FOLLOW_groupGraphPattern_in_existsFunc8351);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: EXISTS, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 864:3: -> ^( EXISTS $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:864:7: ^( EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                stream_EXISTS.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "existsFunc"


    public static class notExistsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "notExistsFunc"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:867:1: notExistsFunc : NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) ;
    public final IbmSparqlParser.notExistsFunc_return notExistsFunc() throws RecognitionException {
        IbmSparqlParser.notExistsFunc_return retval = new IbmSparqlParser.notExistsFunc_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token NOT498=null;
        Token EXISTS499=null;
        IbmSparqlParser.groupGraphPattern_return g =null;


        XTree NOT498_tree=null;
        XTree EXISTS499_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:868:2: ( NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:868:6: NOT EXISTS g= groupGraphPattern
            {
            NOT498=(Token)match(input,NOT,FOLLOW_NOT_in_notExistsFunc8385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT.add(NOT498);


            EXISTS499=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_notExistsFunc8387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS499);


            pushFollow(FOLLOW_groupGraphPattern_in_notExistsFunc8391);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());

            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 870:3: -> ^( NOT_EXISTS $g)
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:870:7: ^( NOT_EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(NOT_EXISTS, "NOT_EXISTS")
                , root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "notExistsFunc"


    public static class aggregate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "aggregate"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:873:1: aggregate : ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) );
    public final IbmSparqlParser.aggregate_return aggregate() throws RecognitionException {
        IbmSparqlParser.aggregate_return retval = new IbmSparqlParser.aggregate_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token d1=null;
        Token d2=null;
        Token d3=null;
        Token d4=null;
        Token d5=null;
        Token d6=null;
        Token d7=null;
        Token COUNT500=null;
        Token OPEN_BRACE501=null;
        Token char_literal502=null;
        Token CLOSE_BRACE503=null;
        Token SUM504=null;
        Token OPEN_BRACE505=null;
        Token CLOSE_BRACE506=null;
        Token MIN507=null;
        Token OPEN_BRACE508=null;
        Token CLOSE_BRACE509=null;
        Token MAX510=null;
        Token OPEN_BRACE511=null;
        Token CLOSE_BRACE512=null;
        Token AVG513=null;
        Token OPEN_BRACE514=null;
        Token CLOSE_BRACE515=null;
        Token SAMPLE516=null;
        Token OPEN_BRACE517=null;
        Token CLOSE_BRACE518=null;
        Token GROUP_CONCAT519=null;
        Token OPEN_BRACE520=null;
        Token SEMICOLON521=null;
        Token SEPARATOR522=null;
        Token char_literal523=null;
        Token CLOSE_BRACE524=null;
        IbmSparqlParser.expression_return e1 =null;

        IbmSparqlParser.expression_return e2 =null;

        IbmSparqlParser.expression_return e3 =null;

        IbmSparqlParser.expression_return e4 =null;

        IbmSparqlParser.expression_return e5 =null;

        IbmSparqlParser.expression_return e6 =null;

        IbmSparqlParser.expression_return e7 =null;

        IbmSparqlParser.string_return s =null;


        XTree d1_tree=null;
        XTree d2_tree=null;
        XTree d3_tree=null;
        XTree d4_tree=null;
        XTree d5_tree=null;
        XTree d6_tree=null;
        XTree d7_tree=null;
        XTree COUNT500_tree=null;
        XTree OPEN_BRACE501_tree=null;
        XTree char_literal502_tree=null;
        XTree CLOSE_BRACE503_tree=null;
        XTree SUM504_tree=null;
        XTree OPEN_BRACE505_tree=null;
        XTree CLOSE_BRACE506_tree=null;
        XTree MIN507_tree=null;
        XTree OPEN_BRACE508_tree=null;
        XTree CLOSE_BRACE509_tree=null;
        XTree MAX510_tree=null;
        XTree OPEN_BRACE511_tree=null;
        XTree CLOSE_BRACE512_tree=null;
        XTree AVG513_tree=null;
        XTree OPEN_BRACE514_tree=null;
        XTree CLOSE_BRACE515_tree=null;
        XTree SAMPLE516_tree=null;
        XTree OPEN_BRACE517_tree=null;
        XTree CLOSE_BRACE518_tree=null;
        XTree GROUP_CONCAT519_tree=null;
        XTree OPEN_BRACE520_tree=null;
        XTree SEMICOLON521_tree=null;
        XTree SEPARATOR522_tree=null;
        XTree char_literal523_tree=null;
        XTree CLOSE_BRACE524_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_SUM=new RewriteRuleTokenStream(adaptor,"token SUM");
        RewriteRuleTokenStream stream_253=new RewriteRuleTokenStream(adaptor,"token 253");
        RewriteRuleTokenStream stream_SAMPLE=new RewriteRuleTokenStream(adaptor,"token SAMPLE");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_257=new RewriteRuleTokenStream(adaptor,"token 257");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_GROUP_CONCAT=new RewriteRuleTokenStream(adaptor,"token GROUP_CONCAT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:2: ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) )
            int alt151=7;
            switch ( input.LA(1) ) {
            case COUNT:
                {
                alt151=1;
                }
                break;
            case SUM:
                {
                alt151=2;
                }
                break;
            case MIN:
                {
                alt151=3;
                }
                break;
            case MAX:
                {
                alt151=4;
                }
                break;
            case AVG:
                {
                alt151=5;
                }
                break;
            case SAMPLE:
                {
                alt151=6;
                }
                break;
            case GROUP_CONCAT:
                {
                alt151=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }

            switch (alt151) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:4: COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' |e1= expression ) CLOSE_BRACE
                    {
                    COUNT500=(Token)match(input,COUNT,FOLLOW_COUNT_in_aggregate8423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COUNT.add(COUNT500);


                    OPEN_BRACE501=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE501);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:23: (d1= DISTINCT )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==DISTINCT) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:23: d1= DISTINCT
                            {
                            d1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8429); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d1);


                            }
                            break;

                    }


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:34: ( '*' |e1= expression )
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==253) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==ABS||LA143_0==AVG||LA143_0==BNODE||LA143_0==BOUND||LA143_0==CEIL||LA143_0==COALESCE||LA143_0==CONCAT||LA143_0==CONTAINS||LA143_0==COUNT||(LA143_0 >= DATATYPE && LA143_0 <= DECIMAL_POSITIVE)||(LA143_0 >= DOUBLE && LA143_0 <= DOUBLE_POSITIVE)||LA143_0==ENCODE_FOR_URI||LA143_0==EXISTS||LA143_0==FALSE||LA143_0==FLOOR||LA143_0==GROUP_CONCAT||LA143_0==HOURS||LA143_0==IF||(LA143_0 >= INTEGER && LA143_0 <= INTEGER_POSITIVE)||LA143_0==IRI||(LA143_0 >= IRI_REF && LA143_0 <= ISURI)||(LA143_0 >= LANG && LA143_0 <= LANGMATCHES)||LA143_0==LCASE||(LA143_0 >= MAX && LA143_0 <= MIN)||LA143_0==MINUTES||LA143_0==MONTH||LA143_0==NOT||LA143_0==NOW||LA143_0==OPEN_BRACE||(LA143_0 >= PNAME_LN && LA143_0 <= PNAME_NS)||LA143_0==RAND||(LA143_0 >= REGEX && LA143_0 <= REPLACE)||LA143_0==ROUND||(LA143_0 >= SAMETERM && LA143_0 <= SECONDS)||(LA143_0 >= SHA1 && LA143_0 <= SHA512)||(LA143_0 >= STR && LA143_0 <= STRENDS)||(LA143_0 >= STRING_LITERAL1 && LA143_0 <= STRUUID)||LA143_0==SUBSTR||LA143_0==SUM||LA143_0==TIMEZONE||LA143_0==TRUE||LA143_0==TZ||LA143_0==UCASE||LA143_0==URI||LA143_0==UUID||(LA143_0 >= VAR1 && LA143_0 <= VAR2)||LA143_0==YEAR||LA143_0==251||(LA143_0 >= 254 && LA143_0 <= 255)) ) {
                        alt143=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;

                    }
                    switch (alt143) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:36: '*'
                            {
                            char_literal502=(Token)match(input,253,FOLLOW_253_in_aggregate8434); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_253.add(char_literal502);


                            }
                            break;
                        case 2 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:42: e1= expression
                            {
                            pushFollow(FOLLOW_expression_in_aggregate8440);
                            e1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE503=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE503);


                    // AST REWRITE
                    // elements: d1, e1, 253, COUNT
                    // token labels: d1
                    // rule labels: e1, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d1=new RewriteRuleTokenStream(adaptor,"token d1",d1);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 874:74: -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:78: ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_COUNT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:89: ( $d1)?
                        if ( stream_d1.hasNext() ) {
                            adaptor.addChild(root_1, stream_d1.nextNode());

                        }
                        stream_d1.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:94: ( '*' )?
                        if ( stream_253.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_253.nextNode()
                            );

                        }
                        stream_253.reset();

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:874:101: ( $e1)?
                        if ( stream_e1.hasNext() ) {
                            adaptor.addChild(root_1, stream_e1.nextTree());

                        }
                        stream_e1.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:875:4: SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE
                    {
                    SUM504=(Token)match(input,SUM,FOLLOW_SUM_in_aggregate8476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUM.add(SUM504);


                    OPEN_BRACE505=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE505);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:875:21: (d2= DISTINCT )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==DISTINCT) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:875:21: d2= DISTINCT
                            {
                            d2=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8482); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d2);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8487);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    CLOSE_BRACE506=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE506);


                    // AST REWRITE
                    // elements: SUM, e2, d2
                    // token labels: d2
                    // rule labels: e2, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d2=new RewriteRuleTokenStream(adaptor,"token d2",d2);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 875:61: -> ^( SUM ( $d2)? $e2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:875:65: ^( SUM ( $d2)? $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SUM.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:875:73: ( $d2)?
                        if ( stream_d2.hasNext() ) {
                            adaptor.addChild(root_1, stream_d2.nextNode());

                        }
                        stream_d2.reset();

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:876:4: MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE
                    {
                    MIN507=(Token)match(input,MIN,FOLLOW_MIN_in_aggregate8513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN507);


                    OPEN_BRACE508=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE508);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:876:21: (d3= DISTINCT )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==DISTINCT) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:876:21: d3= DISTINCT
                            {
                            d3=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8519); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d3);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8524);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    CLOSE_BRACE509=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE509);


                    // AST REWRITE
                    // elements: d3, MIN, e3
                    // token labels: d3
                    // rule labels: e3, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d3=new RewriteRuleTokenStream(adaptor,"token d3",d3);
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 876:61: -> ^( MIN ( $d3)? $e3)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:876:65: ^( MIN ( $d3)? $e3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MIN.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:876:73: ( $d3)?
                        if ( stream_d3.hasNext() ) {
                            adaptor.addChild(root_1, stream_d3.nextNode());

                        }
                        stream_d3.reset();

                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:877:4: MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE
                    {
                    MAX510=(Token)match(input,MAX,FOLLOW_MAX_in_aggregate8550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(MAX510);


                    OPEN_BRACE511=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE511);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:877:21: (d4= DISTINCT )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==DISTINCT) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:877:21: d4= DISTINCT
                            {
                            d4=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8556); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d4);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8561);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    CLOSE_BRACE512=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE512);


                    // AST REWRITE
                    // elements: MAX, e4, d4
                    // token labels: d4
                    // rule labels: retval, e4
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d4=new RewriteRuleTokenStream(adaptor,"token d4",d4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 877:61: -> ^( MAX ( $d4)? $e4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:877:65: ^( MAX ( $d4)? $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_MAX.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:877:73: ( $d4)?
                        if ( stream_d4.hasNext() ) {
                            adaptor.addChild(root_1, stream_d4.nextNode());

                        }
                        stream_d4.reset();

                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:878:4: AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE
                    {
                    AVG513=(Token)match(input,AVG,FOLLOW_AVG_in_aggregate8587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVG.add(AVG513);


                    OPEN_BRACE514=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE514);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:878:21: (d5= DISTINCT )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==DISTINCT) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:878:21: d5= DISTINCT
                            {
                            d5=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8593); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d5);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8598);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());

                    CLOSE_BRACE515=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE515);


                    // AST REWRITE
                    // elements: d5, AVG, e5
                    // token labels: d5
                    // rule labels: e5, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d5=new RewriteRuleTokenStream(adaptor,"token d5",d5);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 878:61: -> ^( AVG ( $d5)? $e5)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:878:65: ^( AVG ( $d5)? $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_AVG.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:878:73: ( $d5)?
                        if ( stream_d5.hasNext() ) {
                            adaptor.addChild(root_1, stream_d5.nextNode());

                        }
                        stream_d5.reset();

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:879:4: SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE
                    {
                    SAMPLE516=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_aggregate8624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMPLE.add(SAMPLE516);


                    OPEN_BRACE517=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE517);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:879:24: (d6= DISTINCT )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==DISTINCT) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:879:24: d6= DISTINCT
                            {
                            d6=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8630); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d6);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8635);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());

                    CLOSE_BRACE518=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE518);


                    // AST REWRITE
                    // elements: d6, SAMPLE, e6
                    // token labels: d6
                    // rule labels: e6, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d6=new RewriteRuleTokenStream(adaptor,"token d6",d6);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 879:61: -> ^( SAMPLE ( $d6)? $e6)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:879:65: ^( SAMPLE ( $d6)? $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_SAMPLE.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:879:76: ( $d6)?
                        if ( stream_d6.hasNext() ) {
                            adaptor.addChild(root_1, stream_d6.nextNode());

                        }
                        stream_d6.reset();

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:880:4: GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE
                    {
                    GROUP_CONCAT519=(Token)match(input,GROUP_CONCAT,FOLLOW_GROUP_CONCAT_in_aggregate8658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP_CONCAT.add(GROUP_CONCAT519);


                    OPEN_BRACE520=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE520);


                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:880:30: (d7= DISTINCT )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==DISTINCT) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:880:30: d7= DISTINCT
                            {
                            d7=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8664); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d7);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_aggregate8669);
                    e7=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e7.getTree());

                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:880:55: ( SEMICOLON SEPARATOR '=' s= string )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==SEMICOLON) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:880:57: SEMICOLON SEPARATOR '=' s= string
                            {
                            SEMICOLON521=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aggregate8673); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON521);


                            SEPARATOR522=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_aggregate8675); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR522);


                            char_literal523=(Token)match(input,257,FOLLOW_257_in_aggregate8677); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_257.add(char_literal523);


                            pushFollow(FOLLOW_string_in_aggregate8681);
                            s=string();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_string.add(s.getTree());

                            }
                            break;

                    }


                    CLOSE_BRACE524=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE524);


                    // AST REWRITE
                    // elements: GROUP_CONCAT, s, SEPARATOR, d7, e7
                    // token labels: d7
                    // rule labels: e7, s, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d7=new RewriteRuleTokenStream(adaptor,"token d7",d7);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 881:3: -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:881:7: ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_GROUP_CONCAT.nextNode()
                        , root_1);

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:881:24: ( $d7)?
                        if ( stream_d7.hasNext() ) {
                            adaptor.addChild(root_1, stream_d7.nextNode());

                        }
                        stream_d7.reset();

                        adaptor.addChild(root_1, stream_e7.nextTree());

                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:881:33: ( ^( SEPARATOR $s) )?
                        if ( stream_s.hasNext()||stream_SEPARATOR.hasNext() ) {
                            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:881:33: ^( SEPARATOR $s)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(
                            stream_SEPARATOR.nextNode()
                            , root_2);

                            adaptor.addChild(root_2, stream_s.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_s.reset();
                        stream_SEPARATOR.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "aggregate"


    public static class iRIrefOrFunction_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iRIrefOrFunction"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:884:1: iRIrefOrFunction : i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) ;
    public final IbmSparqlParser.iRIrefOrFunction_return iRIrefOrFunction() throws RecognitionException {
        IbmSparqlParser.iRIrefOrFunction_return retval = new IbmSparqlParser.iRIrefOrFunction_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.iRIref_return i =null;

        IbmSparqlParser.argList_return a =null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
         
        		boolean f=false;
        	
        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:888:2: (i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:888:6: i= iRIref (a= argList )?
            {
            pushFollow(FOLLOW_iRIref_in_iRIrefOrFunction8739);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:888:15: (a= argList )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==OPEN_BRACE) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:888:16: a= argList
                    {
                    pushFollow(FOLLOW_argList_in_iRIrefOrFunction8744);
                    a=argList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_argList.add(a.getTree());

                    if ( state.backtracking==0 ) {f=true;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: i, a, i
            // token labels: 
            // rule labels: a, i, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 890:3: -> {f==false}? $i
            if (f==false) {
                adaptor.addChild(root_0, stream_i.nextTree());

            }

            else // 891:3: -> ^( FUNCTION $i ( $a)? )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:891:7: ^( FUNCTION $i ( $a)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:891:25: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iRIrefOrFunction"


    public static class rDFLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rDFLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:894:1: rDFLiteral : string ( LANGTAG | ( '^^' iRIref ) )? ;
    public final IbmSparqlParser.rDFLiteral_return rDFLiteral() throws RecognitionException {
        IbmSparqlParser.rDFLiteral_return retval = new IbmSparqlParser.rDFLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token LANGTAG526=null;
        Token string_literal527=null;
        IbmSparqlParser.string_return string525 =null;

        IbmSparqlParser.iRIref_return iRIref528 =null;


        XTree LANGTAG526_tree=null;
        XTree string_literal527_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:2: ( string ( LANGTAG | ( '^^' iRIref ) )? )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:6: string ( LANGTAG | ( '^^' iRIref ) )?
            {
            root_0 = (XTree)adaptor.nil();


            pushFollow(FOLLOW_string_in_rDFLiteral8799);
            string525=string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string525.getTree());

            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:13: ( LANGTAG | ( '^^' iRIref ) )?
            int alt153=3;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LANGTAG) ) {
                alt153=1;
            }
            else if ( (LA153_0==262) ) {
                alt153=2;
            }
            switch (alt153) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:15: LANGTAG
                    {
                    LANGTAG526=(Token)match(input,LANGTAG,FOLLOW_LANGTAG_in_rDFLiteral8803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LANGTAG526_tree = 
                    (XTree)adaptor.create(LANGTAG526)
                    ;
                    adaptor.addChild(root_0, LANGTAG526_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:25: ( '^^' iRIref )
                    {
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:25: ( '^^' iRIref )
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:895:27: '^^' iRIref
                    {
                    string_literal527=(Token)match(input,262,FOLLOW_262_in_rDFLiteral8809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal527_tree = 
                    (XTree)adaptor.create(string_literal527)
                    ;
                    adaptor.addChild(root_0, string_literal527_tree);
                    }

                    pushFollow(FOLLOW_iRIref_in_rDFLiteral8811);
                    iRIref528=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref528.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rDFLiteral"


    public static class numericLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:898:1: numericLiteral : ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative );
    public final IbmSparqlParser.numericLiteral_return numericLiteral() throws RecognitionException {
        IbmSparqlParser.numericLiteral_return retval = new IbmSparqlParser.numericLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        IbmSparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned529 =null;

        IbmSparqlParser.numericLiteralPositive_return numericLiteralPositive530 =null;

        IbmSparqlParser.numericLiteralNegative_return numericLiteralNegative531 =null;



        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:899:2: ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative )
            int alt154=3;
            switch ( input.LA(1) ) {
            case DECIMAL:
            case DOUBLE:
            case INTEGER:
                {
                alt154=1;
                }
                break;
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_POSITIVE:
                {
                alt154=2;
                }
                break;
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case INTEGER_NEGATIVE:
                {
                alt154=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;

            }

            switch (alt154) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:899:6: numericLiteralUnsigned
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralUnsigned_in_numericLiteral8833);
                    numericLiteralUnsigned529=numericLiteralUnsigned();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralUnsigned529.getTree());

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:900:5: numericLiteralPositive
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralPositive_in_numericLiteral8841);
                    numericLiteralPositive530=numericLiteralPositive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralPositive530.getTree());

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:901:5: numericLiteralNegative
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_numericLiteralNegative_in_numericLiteral8849);
                    numericLiteralNegative531=numericLiteralNegative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralNegative531.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"


    public static class numericLiteralUnsigned_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralUnsigned"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:904:1: numericLiteralUnsigned : ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) );
    public final IbmSparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned() throws RecognitionException {
        IbmSparqlParser.numericLiteralUnsigned_return retval = new IbmSparqlParser.numericLiteralUnsigned_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER532=null;
        Token DECIMAL533=null;
        Token DOUBLE534=null;

        XTree INTEGER532_tree=null;
        XTree DECIMAL533_tree=null;
        XTree DOUBLE534_tree=null;
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_DOUBLE=new RewriteRuleTokenStream(adaptor,"token DOUBLE");
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:905:2: ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) )
            int alt155=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt155=1;
                }
                break;
            case DECIMAL:
                {
                alt155=2;
                }
                break;
            case DOUBLE:
                {
                alt155=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }

            switch (alt155) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:905:6: INTEGER
                    {
                    INTEGER532=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_numericLiteralUnsigned8867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER.add(INTEGER532);


                    // AST REWRITE
                    // elements: INTEGER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 905:18: -> ^( BIG_INTEGER INTEGER )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:905:21: ^( BIG_INTEGER INTEGER )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:906:5: DECIMAL
                    {
                    DECIMAL533=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numericLiteralUnsigned8888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(DECIMAL533);


                    // AST REWRITE
                    // elements: DECIMAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 906:17: -> ^( BIG_DECIMAL DECIMAL )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:906:20: ^( BIG_DECIMAL DECIMAL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:907:5: DOUBLE
                    {
                    DOUBLE534=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_numericLiteralUnsigned8908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE.add(DOUBLE534);


                    // AST REWRITE
                    // elements: DOUBLE, DOUBLE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 907:16: -> ^( DOUBLE DOUBLE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:907:19: ^( DOUBLE DOUBLE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        stream_DOUBLE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralUnsigned"


    public static class numericLiteralPositive_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralPositive"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:910:1: numericLiteralPositive : ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) );
    public final IbmSparqlParser.numericLiteralPositive_return numericLiteralPositive() throws RecognitionException {
        IbmSparqlParser.numericLiteralPositive_return retval = new IbmSparqlParser.numericLiteralPositive_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER_POSITIVE535=null;
        Token DECIMAL_POSITIVE536=null;
        Token DOUBLE_POSITIVE537=null;

        XTree INTEGER_POSITIVE535_tree=null;
        XTree DECIMAL_POSITIVE536_tree=null;
        XTree DOUBLE_POSITIVE537_tree=null;
        RewriteRuleTokenStream stream_DECIMAL_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_POSITIVE");
        RewriteRuleTokenStream stream_DOUBLE_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_POSITIVE");
        RewriteRuleTokenStream stream_INTEGER_POSITIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_POSITIVE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:911:2: ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) )
            int alt156=3;
            switch ( input.LA(1) ) {
            case INTEGER_POSITIVE:
                {
                alt156=1;
                }
                break;
            case DECIMAL_POSITIVE:
                {
                alt156=2;
                }
                break;
            case DOUBLE_POSITIVE:
                {
                alt156=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }

            switch (alt156) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:911:6: INTEGER_POSITIVE
                    {
                    INTEGER_POSITIVE535=(Token)match(input,INTEGER_POSITIVE,FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive8942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_POSITIVE.add(INTEGER_POSITIVE535);


                    // AST REWRITE
                    // elements: INTEGER_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 911:25: -> ^( BIG_INTEGER INTEGER_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:911:28: ^( BIG_INTEGER INTEGER_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:912:5: DECIMAL_POSITIVE
                    {
                    DECIMAL_POSITIVE536=(Token)match(input,DECIMAL_POSITIVE,FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive8961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_POSITIVE.add(DECIMAL_POSITIVE536);


                    // AST REWRITE
                    // elements: DECIMAL_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 912:24: -> ^( BIG_DECIMAL DECIMAL_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:912:27: ^( BIG_DECIMAL DECIMAL_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:913:5: DOUBLE_POSITIVE
                    {
                    DOUBLE_POSITIVE537=(Token)match(input,DOUBLE_POSITIVE,FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive8979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_POSITIVE.add(DOUBLE_POSITIVE537);


                    // AST REWRITE
                    // elements: DOUBLE_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 913:23: -> ^( DOUBLE DOUBLE_POSITIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:913:26: ^( DOUBLE DOUBLE_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(DOUBLE, "DOUBLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_POSITIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralPositive"


    public static class numericLiteralNegative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numericLiteralNegative"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:916:1: numericLiteralNegative : ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) );
    public final IbmSparqlParser.numericLiteralNegative_return numericLiteralNegative() throws RecognitionException {
        IbmSparqlParser.numericLiteralNegative_return retval = new IbmSparqlParser.numericLiteralNegative_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token INTEGER_NEGATIVE538=null;
        Token DECIMAL_NEGATIVE539=null;
        Token DOUBLE_NEGATIVE540=null;

        XTree INTEGER_NEGATIVE538_tree=null;
        XTree DECIMAL_NEGATIVE539_tree=null;
        XTree DOUBLE_NEGATIVE540_tree=null;
        RewriteRuleTokenStream stream_DECIMAL_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_NEGATIVE");
        RewriteRuleTokenStream stream_DOUBLE_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_NEGATIVE");
        RewriteRuleTokenStream stream_INTEGER_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_NEGATIVE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:917:2: ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) )
            int alt157=3;
            switch ( input.LA(1) ) {
            case INTEGER_NEGATIVE:
                {
                alt157=1;
                }
                break;
            case DECIMAL_NEGATIVE:
                {
                alt157=2;
                }
                break;
            case DOUBLE_NEGATIVE:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;

            }

            switch (alt157) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:917:6: INTEGER_NEGATIVE
                    {
                    INTEGER_NEGATIVE538=(Token)match(input,INTEGER_NEGATIVE,FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_NEGATIVE.add(INTEGER_NEGATIVE538);


                    // AST REWRITE
                    // elements: INTEGER_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 917:25: -> ^( BIG_INTEGER INTEGER_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:917:28: ^( BIG_INTEGER INTEGER_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_INTEGER_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:918:5: DECIMAL_NEGATIVE
                    {
                    DECIMAL_NEGATIVE539=(Token)match(input,DECIMAL_NEGATIVE,FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_NEGATIVE.add(DECIMAL_NEGATIVE539);


                    // AST REWRITE
                    // elements: DECIMAL_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 918:24: -> ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:918:27: ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DECIMAL_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:919:5: DOUBLE_NEGATIVE
                    {
                    DOUBLE_NEGATIVE540=(Token)match(input,DOUBLE_NEGATIVE,FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_NEGATIVE.add(DOUBLE_NEGATIVE540);


                    // AST REWRITE
                    // elements: DOUBLE_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 919:23: -> ^( DOUBLE DOUBLE_NEGATIVE )
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:919:26: ^( DOUBLE DOUBLE_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(DOUBLE, "DOUBLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_NEGATIVE.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numericLiteralNegative"


    public static class booleanLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "booleanLiteral"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:922:1: booleanLiteral : (t= TRUE -> ^( BOOLEAN $t) |f= FALSE -> ^( BOOLEAN $f) );
    public final IbmSparqlParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        IbmSparqlParser.booleanLiteral_return retval = new IbmSparqlParser.booleanLiteral_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token t=null;
        Token f=null;

        XTree t_tree=null;
        XTree f_tree=null;
        RewriteRuleTokenStream stream_TRUE=new RewriteRuleTokenStream(adaptor,"token TRUE");
        RewriteRuleTokenStream stream_FALSE=new RewriteRuleTokenStream(adaptor,"token FALSE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:923:2: (t= TRUE -> ^( BOOLEAN $t) |f= FALSE -> ^( BOOLEAN $f) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==TRUE) ) {
                alt158=1;
            }
            else if ( (LA158_0==FALSE) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }
            switch (alt158) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:923:6: t= TRUE
                    {
                    t=(Token)match(input,TRUE,FOLLOW_TRUE_in_booleanLiteral9078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRUE.add(t);


                    // AST REWRITE
                    // elements: t
                    // token labels: t
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 923:15: -> ^( BOOLEAN $t)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:923:19: ^( BOOLEAN $t)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BOOLEAN, "BOOLEAN")
                        , root_1);

                        adaptor.addChild(root_1, stream_t.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:924:6: f= FALSE
                    {
                    f=(Token)match(input,FALSE,FOLLOW_FALSE_in_booleanLiteral9101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FALSE.add(f);


                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 924:15: -> ^( BOOLEAN $f)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:924:19: ^( BOOLEAN $f)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(BOOLEAN, "BOOLEAN")
                        , root_1);

                        adaptor.addChild(root_1, stream_f.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"


    public static class string_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:927:1: string : (s1= STRING_LITERAL1 -> ^( STRING $s1) |s2= STRING_LITERAL2 -> ^( STRING $s2) |s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) |s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) );
    public final IbmSparqlParser.string_return string() throws RecognitionException {
        IbmSparqlParser.string_return retval = new IbmSparqlParser.string_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token s1=null;
        Token s2=null;
        Token s3=null;
        Token s4=null;

        XTree s1_tree=null;
        XTree s2_tree=null;
        XTree s3_tree=null;
        XTree s4_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG2");
        RewriteRuleTokenStream stream_STRING_LITERAL2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL2");
        RewriteRuleTokenStream stream_STRING_LITERAL1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL1");
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG1");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:928:2: (s1= STRING_LITERAL1 -> ^( STRING $s1) |s2= STRING_LITERAL2 -> ^( STRING $s2) |s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) |s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) )
            int alt159=4;
            switch ( input.LA(1) ) {
            case STRING_LITERAL1:
                {
                alt159=1;
                }
                break;
            case STRING_LITERAL2:
                {
                alt159=2;
                }
                break;
            case STRING_LITERAL_LONG1:
                {
                alt159=3;
                }
                break;
            case STRING_LITERAL_LONG2:
                {
                alt159=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }

            switch (alt159) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:928:6: s1= STRING_LITERAL1
                    {
                    s1=(Token)match(input,STRING_LITERAL1,FOLLOW_STRING_LITERAL1_in_string9133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL1.add(s1);


                    // AST REWRITE
                    // elements: s1
                    // token labels: s1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s1=new RewriteRuleTokenStream(adaptor,"token s1",s1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 928:33: -> ^( STRING $s1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:928:37: ^( STRING $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:929:5: s2= STRING_LITERAL2
                    {
                    s2=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_string9161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL2.add(s2);


                    // AST REWRITE
                    // elements: s2
                    // token labels: s2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 929:32: -> ^( STRING $s2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:929:36: ^( STRING $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:930:5: s3= STRING_LITERAL_LONG1
                    {
                    s3=(Token)match(input,STRING_LITERAL_LONG1,FOLLOW_STRING_LITERAL_LONG1_in_string9189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG1.add(s3);


                    // AST REWRITE
                    // elements: s3
                    // token labels: s3
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s3=new RewriteRuleTokenStream(adaptor,"token s3",s3);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 930:32: -> ^( STRING $s3)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:930:36: ^( STRING $s3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s3.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:931:4: s4= STRING_LITERAL_LONG2
                    {
                    s4=(Token)match(input,STRING_LITERAL_LONG2,FOLLOW_STRING_LITERAL_LONG2_in_string9211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG2.add(s4);


                    // AST REWRITE
                    // elements: s4
                    // token labels: s4
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s4=new RewriteRuleTokenStream(adaptor,"token s4",s4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 931:31: -> ^( STRING $s4)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:931:35: ^( STRING $s4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, stream_s4.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class iRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iRIref"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:934:1: iRIref : (i= IRI_REF -> ^( IRI $i) | prefixedName );
    public final IbmSparqlParser.iRIref_return iRIref() throws RecognitionException {
        IbmSparqlParser.iRIref_return retval = new IbmSparqlParser.iRIref_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token i=null;
        IbmSparqlParser.prefixedName_return prefixedName541 =null;


        XTree i_tree=null;
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:935:2: (i= IRI_REF -> ^( IRI $i) | prefixedName )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==IRI_REF) ) {
                alt160=1;
            }
            else if ( ((LA160_0 >= PNAME_LN && LA160_0 <= PNAME_NS)) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;

            }
            switch (alt160) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:935:6: i= IRI_REF
                    {
                    i=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_iRIref9246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI_REF.add(i);


                    // AST REWRITE
                    // elements: i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 935:26: -> ^( IRI $i)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:935:30: ^( IRI $i)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(IRI, "IRI")
                        , root_1);

                        adaptor.addChild(root_1, stream_i.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:936:6: prefixedName
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_prefixedName_in_iRIref9273);
                    prefixedName541=prefixedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefixedName541.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iRIref"


    public static class prefixedName_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefixedName"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:939:1: prefixedName : (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) |n2= PNAME_NS -> ^( PREFIXED_NS $n2) );
    public final IbmSparqlParser.prefixedName_return prefixedName() throws RecognitionException {
        IbmSparqlParser.prefixedName_return retval = new IbmSparqlParser.prefixedName_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token n1=null;
        Token n2=null;

        XTree n1_tree=null;
        XTree n2_tree=null;
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleTokenStream stream_PNAME_LN=new RewriteRuleTokenStream(adaptor,"token PNAME_LN");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:940:2: (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) |n2= PNAME_NS -> ^( PREFIXED_NS $n2) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==PNAME_LN) ) {
                alt161=1;
            }
            else if ( (LA161_0==PNAME_NS) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:940:6: n1= PNAME_LN
                    {
                    n1=(Token)match(input,PNAME_LN,FOLLOW_PNAME_LN_in_prefixedName9292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_LN.add(n1);


                    // AST REWRITE
                    // elements: n1
                    // token labels: n1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n1=new RewriteRuleTokenStream(adaptor,"token n1",n1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 940:26: -> ^( PREFIXED_NAME $n1)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:940:30: ^( PREFIXED_NAME $n1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(PREFIXED_NAME, "PREFIXED_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_n1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:941:6: n2= PNAME_NS
                    {
                    n2=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixedName9319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_NS.add(n2);


                    // AST REWRITE
                    // elements: n2
                    // token labels: n2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n2=new RewriteRuleTokenStream(adaptor,"token n2",n2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 941:26: -> ^( PREFIXED_NS $n2)
                    {
                        // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:941:30: ^( PREFIXED_NS $n2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(
                        (XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS")
                        , root_1);

                        adaptor.addChild(root_1, stream_n2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefixedName"


    public static class blankNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blankNode"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:944:1: blankNode : ( BLANK_NODE_LABEL | annon );
    public final IbmSparqlParser.blankNode_return blankNode() throws RecognitionException {
        IbmSparqlParser.blankNode_return retval = new IbmSparqlParser.blankNode_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token BLANK_NODE_LABEL542=null;
        IbmSparqlParser.annon_return annon543 =null;


        XTree BLANK_NODE_LABEL542_tree=null;

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:945:2: ( BLANK_NODE_LABEL | annon )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==BLANK_NODE_LABEL) ) {
                alt162=1;
            }
            else if ( (LA162_0==OPEN_SQ_BRACKET) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }
            switch (alt162) {
                case 1 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:945:6: BLANK_NODE_LABEL
                    {
                    root_0 = (XTree)adaptor.nil();


                    BLANK_NODE_LABEL542=(Token)match(input,BLANK_NODE_LABEL,FOLLOW_BLANK_NODE_LABEL_in_blankNode9354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLANK_NODE_LABEL542_tree = 
                    (XTree)adaptor.create(BLANK_NODE_LABEL542)
                    ;
                    adaptor.addChild(root_0, BLANK_NODE_LABEL542_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:945:25: annon
                    {
                    root_0 = (XTree)adaptor.nil();


                    pushFollow(FOLLOW_annon_in_blankNode9358);
                    annon543=annon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annon543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blankNode"


    public static class annon_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annon"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:948:1: annon : OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) ;
    public final IbmSparqlParser.annon_return annon() throws RecognitionException {
        IbmSparqlParser.annon_return retval = new IbmSparqlParser.annon_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_SQ_BRACKET544=null;
        Token CLOSE_SQ_BRACKET545=null;

        XTree OPEN_SQ_BRACKET544_tree=null;
        XTree CLOSE_SQ_BRACKET545_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:949:5: ( OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:949:9: OPEN_SQ_BRACKET CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET544=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_annon9377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET544);


            CLOSE_SQ_BRACKET545=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_annon9379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET545);


            // AST REWRITE
            // elements: OPEN_SQ_BRACKET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 949:42: -> ^( ANNON OPEN_SQ_BRACKET )
            {
                // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:949:45: ^( ANNON OPEN_SQ_BRACKET )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(
                (XTree)adaptor.create(ANNON, "ANNON")
                , root_1);

                adaptor.addChild(root_1, 
                stream_OPEN_SQ_BRACKET.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annon"


    public static class nil_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nil"
    // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:952:1: nil : OPEN_BRACE CLOSE_BRACE -> NIL ;
    public final IbmSparqlParser.nil_return nil() throws RecognitionException {
        IbmSparqlParser.nil_return retval = new IbmSparqlParser.nil_return();
        retval.start = input.LT(1);


        XTree root_0 = null;

        Token OPEN_BRACE546=null;
        Token CLOSE_BRACE547=null;

        XTree OPEN_BRACE546_tree=null;
        XTree CLOSE_BRACE547_tree=null;
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");

        try {
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:952:5: ( OPEN_BRACE CLOSE_BRACE -> NIL )
            // /home/sandy/tools/quetzal/com.ibm.research.quetzal.core/src/com/ibm/research/rdf/store/sparql11/IbmSparql.g:952:9: OPEN_BRACE CLOSE_BRACE
            {
            OPEN_BRACE546=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nil9399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE546);


            CLOSE_BRACE547=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nil9402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE547);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 952:33: -> NIL
            {
                adaptor.addChild(root_0, 
                (XTree)adaptor.create(NIL, "NIL")
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nil"

    // Delegated rules


 

    public static final BitSet FOLLOW_query_in_queryUnit375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_query420 = new BitSet(new long[]{0x0200010000001000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_selectQuery_in_query428 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_constructQuery_in_query434 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_describeQuery_in_query440 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_askQuery_in_query446 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_bindingsClause_in_query454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_in_updateUnit513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseDecl_in_prologue551 = new BitSet(new long[]{0x0000000000008002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_prefixDecl_in_prologue557 = new BitSet(new long[]{0x0000000000008002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_BASE_in_baseDecl599 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_baseDecl603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIX_in_prefixDecl636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixDecl640 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_prefixDecl644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectQuery685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_datasetClause_in_selectQuery689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_whereClause_in_selectQuery694 = new BitSet(new long[]{0x0000000000000000L,0x0080000004100000L,0x0000000000420000L});
    public static final BitSet FOLLOW_solutionModifier_in_selectQuery698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_subSelect748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_whereClause_in_subSelect752 = new BitSet(new long[]{0x0000000000000000L,0x0080000004100000L,0x0000000000420000L,0x0000200000000000L});
    public static final BitSet FOLLOW_solutionModifier_in_subSelect756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_inlineData_in_subSelect761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause804 = new BitSet(new long[]{0x08030A4421402020L,0xC0587C8050402050L,0xC1D7800000044815L,0x2201850A00ABC1F7L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause810 = new BitSet(new long[]{0x00030A4421402020L,0xC0587C8050402050L,0xC1D6800000044815L,0x2201850A00ABC1F7L});
    public static final BitSet FOLLOW_REDUCED_in_selectClause816 = new BitSet(new long[]{0x00030A4421402020L,0xC0587C8050402050L,0xC1D6800000044815L,0x2201850A00ABC1F7L});
    public static final BitSet FOLLOW_var_in_selectClause827 = new BitSet(new long[]{0x00030A4421402022L,0xC0587C8050402050L,0xC1D6800000044815L,0x0201850A00ABC1F7L});
    public static final BitSet FOLLOW_expAsVar_in_selectClause833 = new BitSet(new long[]{0x00030A4421402022L,0xC0587C8050402050L,0xC1D6800000044815L,0x0201850A00ABC1F7L});
    public static final BitSet FOLLOW_fexp_in_selectClause839 = new BitSet(new long[]{0x00030A4421402022L,0xC0587C8050402050L,0xC1D6800000044815L,0x0201850A00ABC1F7L});
    public static final BitSet FOLLOW_253_in_selectClause846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expAsVar900 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_expAsVar904 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_expAsVar906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_expAsVar910 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expAsVar912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_fexp946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_fexp952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_constructTemplate_in_constructQuery1014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_whereClause_in_constructQuery1023 = new BitSet(new long[]{0x0000000000000000L,0x0080000004100000L,0x0000000000420000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_constructQuery1075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1077 = new BitSet(new long[]{0xE01C000100200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesTemplate_in_constructQuery1081 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1084 = new BitSet(new long[]{0x0000000000000000L,0x0080000004100000L,0x0000000000420000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCRIBE_in_describeQuery1150 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x2001800000000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_describeQuery1156 = new BitSet(new long[]{0x0000000000000000L,0x0080020004104000L,0x00000000304A0000L,0x0011800000000000L});
    public static final BitSet FOLLOW_253_in_describeQuery1163 = new BitSet(new long[]{0x0000000000000000L,0x0080000004104000L,0x00000000004A0000L,0x0010000000000000L});
    public static final BitSet FOLLOW_datasetClause_in_describeQuery1169 = new BitSet(new long[]{0x0000000000000000L,0x0080000004104000L,0x00000000004A0000L,0x0010000000000000L});
    public static final BitSet FOLLOW_whereClause_in_describeQuery1174 = new BitSet(new long[]{0x0000000000000000L,0x0080000004100000L,0x0000000000420000L});
    public static final BitSet FOLLOW_solutionModifier_in_describeQuery1179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASK_in_askQuery1233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_datasetClause_in_askQuery1237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000080000L,0x0010000000000000L});
    public static final BitSet FOLLOW_whereClause_in_askQuery1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_datasetClause1279 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000080L});
    public static final BitSet FOLLOW_defaultGraphClause_in_datasetClause1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedGraphClause_in_datasetClause1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sourceSelector_in_defaultGraphClause1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_namedGraphClause1352 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sourceSelector_in_namedGraphClause1356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_sourceSelector1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_whereClause1396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_whereClause1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupClause_in_solutionModifier1433 = new BitSet(new long[]{0x0000000000000002L,0x0080000004000000L,0x0000000000420000L});
    public static final BitSet FOLLOW_havingClause_in_solutionModifier1438 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000420000L});
    public static final BitSet FOLLOW_orderClause_in_solutionModifier1443 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_limitOffsetClauses_in_solutionModifier1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupClause1490 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_BY_in_groupClause1492 = new BitSet(new long[]{0x0003024421400020L,0x80587E8050002050L,0xC156800030044814L,0x0201850A008BC1F7L});
    public static final BitSet FOLLOW_groupCondition_in_groupClause1496 = new BitSet(new long[]{0x0003024421400022L,0x80587E8050002050L,0xC156800030044814L,0x0201850A008BC1F7L});
    public static final BitSet FOLLOW_builtInCall_in_groupCondition1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_groupCondition1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_groupCondition1547 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_groupCondition1551 = new BitSet(new long[]{0x0000000080000400L});
    public static final BitSet FOLLOW_AS_in_groupCondition1555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_groupCondition1559 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_groupCondition1564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_groupCondition1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAVING_in_havingClause1608 = new BitSet(new long[]{0x0003024421400020L,0x80587E8050002050L,0xC156800030044814L,0x0200050A008BC1F7L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause1612 = new BitSet(new long[]{0x0003024421400022L,0x80587E8050002050L,0xC156800030044814L,0x0200050A008BC1F7L});
    public static final BitSet FOLLOW_constraint_in_havingCondition1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderClause1666 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_BY_in_orderClause1668 = new BitSet(new long[]{0x0103024421400820L,0x80587E8050002050L,0xC156800030044814L,0x0201850A008BC1F7L});
    public static final BitSet FOLLOW_orderCondition_in_orderClause1672 = new BitSet(new long[]{0x0103024421400822L,0x80587E8050002050L,0xC156800030044814L,0x0201850A008BC1F7L});
    public static final BitSet FOLLOW_ASC_in_orderCondition1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DESC_in_orderCondition1713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_orderCondition1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_orderCondition1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1758 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limitClause1778 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_INTEGER_in_limitClause1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OFFSET_in_offsetClause1814 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_INTEGER_in_offsetClause1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINDINGS_in_bindingsClause1849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_bindingsClause1853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0001800000000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1856 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bindingsClause1860 = new BitSet(new long[]{0xE01C000000000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_bindingValue_in_bindingsClause1864 = new BitSet(new long[]{0xE01C000080000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bindingsClause1867 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nil_in_bindingsClause1871 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_bindingsClause1916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_bindingValue1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_bindingValue1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingValue1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_bindingValue1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_bindingValue1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_update1970 = new BitSet(new long[]{0x0080140040000042L,0x0100000200000001L,0x0000000000000020L,0x0020000000000000L});
    public static final BitSet FOLLOW_update1_in_update1974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_update1978 = new BitSet(new long[]{0x0080140040008040L,0x0100000200000001L,0x0000004000000020L,0x0020000000000000L});
    public static final BitSet FOLLOW_update_in_update1980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_in_update12003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clear_in_update12007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_in_update12011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_in_update12015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_move_in_update12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copy_in_update12023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_in_update12027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertData_in_update12031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteData_in_update12035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteWhere_in_update12039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_in_update12043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load2060 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_load2062 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_load2065 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_INTO_in_load2069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_graphRef_in_load2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_clear2091 = new BitSet(new long[]{0x0020000000000080L,0x0000000000020000L,0x0000000000000080L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_clear2093 = new BitSet(new long[]{0x0020000000000080L,0x0000000000020000L,0x0000000000000080L});
    public static final BitSet FOLLOW_graphRefAll_in_clear2096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop2113 = new BitSet(new long[]{0x0020000000000080L,0x0000000000020000L,0x0000000000000080L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_drop2115 = new BitSet(new long[]{0x0020000000000080L,0x0000000000020000L,0x0000000000000080L});
    public static final BitSet FOLLOW_graphRefAll_in_drop2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create2135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_create2137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_graphRef_in_create2140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_add2157 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_add2159 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_TO_in_add2164 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOVE_in_move2183 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_move2185 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_TO_in_move2190 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_copy2209 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SILENT_in_copy2211 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_TO_in_copy2216 = new BitSet(new long[]{0x0020000000000000L,0x0000020000020000L,0x0000000030000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertData2235 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_DATA_in_insertData2237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_quadData_in_insertData2239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteData2255 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_DATA_in_deleteData2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_quadData_in_deleteData2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteWhere2276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_deleteWhere2278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteWhere2280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_modify2299 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_modify2301 = new BitSet(new long[]{0x0080000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_deleteClause_in_modify2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_insertClause_in_modify2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_insertClause_in_modify2315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_usingClause_in_modify2319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_modify2322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_modify2324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteClause2340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteClause2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertClause2359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_quadPattern_in_insertClause2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_usingClause2378 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000080L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_usingClause2386 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphOrDefault2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphOrDefault2411 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_graphOrDefault2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphRef2431 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_graphRef2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphRef_in_graphRefAll2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphRefAll2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_graphRefAll2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_graphRefAll2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2473 = new BitSet(new long[]{0xE01C000100200000L,0x0000021C00020800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_quads_in_quadPattern2475 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadData2491 = new BitSet(new long[]{0xE01C000100200000L,0x0000021C00020800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_quads_in_quadData2493 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadData2495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_quadsNotTriples_in_quads2514 = new BitSet(new long[]{0xF01C000000200002L,0x0000021C00020800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_DOT_in_quads2516 = new BitSet(new long[]{0xE01C000000200002L,0x0000021C00020800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_GRAPH_in_quadsNotTriples2537 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_quadsNotTriples2539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2541 = new BitSet(new long[]{0xE01C000100200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsNotTriples2543 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate2560 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate2564 = new BitSet(new long[]{0xE01C000000200002L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesTemplate_in_triplesTemplate2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2584 = new BitSet(new long[]{0xE01C000100240000L,0x0000021C00021800L,0x22000000303C0002L,0x0001A00080003C00L});
    public static final BitSet FOLLOW_subSelect_in_groupGraphPattern2590 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_groupGraphPatternSub_in_groupGraphPattern2596 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSub2634 = new BitSet(new long[]{0x0000000000040002L,0x0000000000021000L,0x2000000000280002L,0x0000200000000000L});
    public static final BitSet FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2637 = new BitSet(new long[]{0x0000000000040002L,0x0000000000021000L,0x2000000000280002L,0x0000200000000000L});
    public static final BitSet FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2667 = new BitSet(new long[]{0xF01C000000200002L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_DOT_in_groupGraphPatternSubInt2669 = new BitSet(new long[]{0xE01C000000200002L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSubInt2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock2703 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock2707 = new BitSet(new long[]{0xE01C000000200002L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_triplesBlock_in_triplesBlock2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusGraphPattern_in_graphPatternNotTriples2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphGraphPattern_in_graphPatternNotTriples2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_in_graphPatternNotTriples2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_in_graphPatternNotTriples2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_graphPatternNotTriples2838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_in_inlineData2858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0001800000000000L});
    public static final BitSet FOLLOW_dataBlock_in_inlineData2860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataOneVar_in_dataBlock2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataFull_in_dataBlock2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_inlineDataOneVar2914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar2916 = new BitSet(new long[]{0xE01C000100000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataOneVar2920 = new BitSet(new long[]{0xE01C000100000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull2956 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_inlineDataFull2960 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull2965 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull2969 = new BitSet(new long[]{0xE01C000080000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataFull2973 = new BitSet(new long[]{0xE01C000080000000L,0x0000021C00000800L,0x0000000030000000L,0x0000001080003C00L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull2976 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_dataBlockValue3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_dataBlockValue3019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_dataBlockValue3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_dataBlockValue3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_dataBlockValue3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONAL_in_optionalGraphPattern3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_optionalGraphPattern3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphGraphPattern3078 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_graphGraphPattern3082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_graphGraphPattern3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_serviceGraphPattern3128 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000008L});
    public static final BitSet FOLLOW_SILENT_in_serviceGraphPattern3132 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_serviceGraphPattern3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_serviceGraphPattern3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind3183 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_bind3187 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_bind3189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_bind3193 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind3195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_UNION_in_groupOrUnionGraphPattern3238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_MINUS_in_minusGraphPattern3289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_minusGraphPattern3293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter3319 = new BitSet(new long[]{0x0003024421400020L,0x80587E8050002050L,0xC156800030044814L,0x0200050A008BC1F7L});
    public static final BitSet FOLLOW_constraint_in_filter3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_constraint3354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_constraint3358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_constraint3362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_functionCall3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_argList_in_functionCall3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_argList3415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_argList3430 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_argList3434 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_argList3439 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_COMMA_in_argList3443 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_argList3447 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_argList3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_expressionList3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expressionList3505 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_expressionList3509 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList3513 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_expressionList3517 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expressionList3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3559 = new BitSet(new long[]{0xE01C000100200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_constructTriples_in_constructTemplate3562 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples3580 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_DOT_in_constructTriples3584 = new BitSet(new long[]{0xE01C000000200002L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_constructTriples_in_constructTriples3587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubject3607 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject3611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubject3631 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyList_in_triplesSameSubject3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3684 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty3686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmpty3693 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0400000030000000L,0x0001800000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3698 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty3700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_propertyList3732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_in_objectList3752 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_COMMA_in_objectList3755 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_object_in_objectList3757 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath3866 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_COMMA_in_objectListPath3869 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath3871 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_graphNode_in_object3976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphNodePath_in_objectPath3990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrIRIref_in_verb4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_verb4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubjectPath4034 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0801800000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_triplesSameSubjectPath4058 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0801800000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_propertyListPath_in_triplesSameSubjectPath4062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4112 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4135 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4155 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0400000030040000L,0x0801800000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4163 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4195 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_propertyListPath4281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_verbPath4305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_verbSimple4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathAlternative_in_path4333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_264_in_pathAlternative4364 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0800000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_256_in_pathSequence4433 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0800000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_pathPrimary_in_pathElt4484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_pathMod_in_pathElt4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_261_in_pathEltOrInverse4545 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathPrimary4593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_pathPrimary4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_251_in_pathPrimary4601 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0000000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_pathNegatedPropertySet_in_pathPrimary4603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathPrimary4607 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0800000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_path_in_pathPrimary4610 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathPrimary4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4631 = new BitSet(new long[]{0x0000000080000000L,0x0000020000000000L,0x0000000030000000L,0x0000000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4635 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_264_in_pathNegatedPropertySet4639 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0000000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4641 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_pathOneInPropertySet4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_261_in_pathOneInPropertySet4672 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_261_in_pathOneInPropertySet4689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_263_in_pathOneInPropertySet4691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_integer4714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_in_triplesNode4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyList_in_triplesNode4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionPath_in_triplesNodePath4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyListPath_in_triplesNodePath4793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList4830 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L,0x0001800000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_blankNodePropertyList4834 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath4866 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030040000L,0x0801800000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath4870 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection4902 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_graphNode_in_collection4906 = new BitSet(new long[]{0xE01C000080200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection4909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collectionPath4941 = new BitSet(new long[]{0xE01C000000200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_graphNodePath_in_collectionPath4945 = new BitSet(new long[]{0xE01C000080200000L,0x0000021C00000800L,0x0000000030140000L,0x0001800080003C00L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collectionPath4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNode4980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_graphNode4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNodePath4998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_graphNodePath5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrTerm5017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphTerm_in_varOrTerm5021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrIRIref5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_varOrIRIref5039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR1_in_var5055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR2_in_var5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_graphTerm5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_graphTerm5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_graphTerm5113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_graphTerm5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNode_in_graphTerm5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_graphTerm5125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_expression5139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5161 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_conditionalOrExpression5165 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5169 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5229 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_conditionalAndExpression5233 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5237 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_valueLogical5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5304 = new BitSet(new long[]{0x0000000000000002L,0x1800000080000000L,0x0000000000000800L,0x1000000000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_257_in_relationalExpression5308 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_252_in_relationalExpression5331 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalExpression5356 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_258_in_relationalExpression5382 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTE_in_relationalExpression5408 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_259_in_relationalExpression5433 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_relationalExpression5488 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numericExpression5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5583 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_254_in_additiveExpression5602 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5606 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_255_in_additiveExpression5631 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5635 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_additiveExpression5662 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xE000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_253_in_additiveExpression5682 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_256_in_additiveExpression5684 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5689 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_additiveExpression5792 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xE000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_253_in_additiveExpression5812 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_256_in_additiveExpression5814 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5819 = new BitSet(new long[]{0xC018000000000002L,0x0000001800000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_253_in_multiplicativeExpression5941 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_256_in_multiplicativeExpression5956 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_251_in_unaryExpression5985 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0x0201850A80ABFDF7L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_254_in_unaryExpression5994 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0x0201850A80ABFDF7L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_255_in_unaryExpression6003 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0x0201850A80ABFDF7L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_primaryExpression6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_primaryExpression6036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIrefOrFunction_in_primaryExpression6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_primaryExpression6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_primaryExpression6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_primaryExpression6064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_primaryExpression6071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_primaryExpression6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_brackettedExpression6108 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_brackettedExpression6112 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_brackettedExpression6114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_in_builtInCall6149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6151 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6155 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANG_in_builtInCall6189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6191 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6195 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGMATCHES_in_builtInCall6228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6230 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6234 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6236 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6240 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATATYPE_in_builtInCall6267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6269 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6273 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUND_in_builtInCall6302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_var_in_builtInCall6308 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_in_builtInCall6348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6350 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6354 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_builtInCall6387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6389 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6393 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall6427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6431 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6435 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_builtInCall6441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAND_in_builtInCall6464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nil_in_builtInCall6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_builtInCall6529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6531 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6535 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CEIL_in_builtInCall6569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6571 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6575 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOOR_in_builtInCall6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6610 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6614 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_in_builtInCall6645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6647 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6651 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONCAT_in_builtInCall6682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall6686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substringExpression_in_builtInCall6735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLEN_in_builtInCall6780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6782 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6786 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strReplaceExpression_in_builtInCall6819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UCASE_in_builtInCall6824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6826 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6830 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCASE_in_builtInCall6861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6863 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6867 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODE_FOR_URI_in_builtInCall6898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6900 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6904 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_builtInCall6926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6928 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6932 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6934 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6938 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRSTARTS_in_builtInCall6966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6968 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6972 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6974 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall6978 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRENDS_in_builtInCall7005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7007 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7011 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7013 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7017 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRBEFORE_in_builtInCall7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7048 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7052 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7054 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7058 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRAFTER_in_builtInCall7087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7089 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7093 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7095 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7099 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_in_builtInCall7128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7130 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7134 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_in_builtInCall7166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7168 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7172 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_in_builtInCall7203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7205 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7209 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOURS_in_builtInCall7242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7244 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7248 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTES_in_builtInCall7279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7281 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7285 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECONDS_in_builtInCall7314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7316 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7320 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_in_builtInCall7349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7351 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7355 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TZ_in_builtInCall7383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7385 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7389 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOW_in_builtInCall7423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nil_in_builtInCall7425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UUID_in_builtInCall7434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nil_in_builtInCall7436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUUID_in_builtInCall7445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nil_in_builtInCall7447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MD5_in_builtInCall7456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7458 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7462 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA1_in_builtInCall7495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7497 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7501 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA224_in_builtInCall7533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7535 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7539 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA256_in_builtInCall7569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7571 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7575 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA384_in_builtInCall7605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7607 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7611 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA512_in_builtInCall7641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7643 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7647 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtInCall7677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall7681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_builtInCall7726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7728 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7732 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7734 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7738 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7740 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7744 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLANG_in_builtInCall7772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7774 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7778 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7780 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7784 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRDT_in_builtInCall7825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7827 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7831 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7833 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7837 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMETERM_in_builtInCall7880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7882 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7886 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7888 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7892 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISIRI_in_builtInCall7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7934 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7938 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISURI_in_builtInCall7969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7971 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall7975 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISBLANK_in_builtInCall8006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8008 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall8012 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLITERAL_in_builtInCall8041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8043 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall8047 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISNUMERIC_in_builtInCall8074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8076 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_builtInCall8080 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexExpression_in_builtInCall8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsFunc_in_builtInCall8112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notExistsFunc_in_builtInCall8117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEX_in_regexExpression8134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_regexExpression8136 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_regexExpression8140 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8142 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_regexExpression8146 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8150 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_regexExpression8154 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_regexExpression8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_substringExpression8202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_substringExpression8204 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_substringExpression8208 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8210 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_substringExpression8214 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8218 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_substringExpression8222 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_substringExpression8227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_strReplaceExpression8269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_strReplaceExpression8271 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8275 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8277 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8281 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8283 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8287 = new BitSet(new long[]{0x0000001080000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8290 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8294 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_strReplaceExpression8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsFunc8347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_existsFunc8351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_notExistsFunc8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EXISTS_in_notExistsFunc8387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_notExistsFunc8391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_aggregate8423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8425 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xEA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8429 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xEA01850A80ABFDF7L});
    public static final BitSet FOLLOW_253_in_aggregate8434 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_expression_in_aggregate8440 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_aggregate8476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8478 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8482 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8487 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_aggregate8513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8515 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8519 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8524 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_aggregate8550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8552 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8556 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8561 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_aggregate8587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8589 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8593 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8598 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_aggregate8624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8626 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8630 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8635 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_CONCAT_in_aggregate8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8660 = new BitSet(new long[]{0xE81F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8664 = new BitSet(new long[]{0xE01F0A4421402020L,0xC0587E9C50402850L,0xC1D6800030044815L,0xCA01850A80ABFDF7L});
    public static final BitSet FOLLOW_expression_in_aggregate8669 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_aggregate8673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_aggregate8675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_aggregate8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_string_in_aggregate8681 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_iRIrefOrFunction8739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_argList_in_iRIrefOrFunction8744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_rDFLiteral8799 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LANGTAG_in_rDFLiteral8803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_262_in_rDFLiteral8809 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_iRIref_in_rDFLiteral8811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralUnsigned_in_numericLiteral8833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_numericLiteral8841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_numericLiteral8849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_numericLiteralUnsigned8867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numericLiteralUnsigned8888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_numericLiteralUnsigned8908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive8942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive8961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_booleanLiteral9078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_booleanLiteral9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL1_in_string9133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_string9161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG1_in_string9189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG2_in_string9211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_REF_in_iRIref9246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixedName_in_iRIref9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_LN_in_prefixedName9292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixedName9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_NODE_LABEL_in_blankNode9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annon_in_blankNode9358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_annon9377 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_annon9379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nil9399 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nil9402 = new BitSet(new long[]{0x0000000000000002L});

}